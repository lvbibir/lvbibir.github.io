[{"content":"前言 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客\n优点 仅需一个github账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本，可以将精力更多的放到博客内容本身上去 无需备案 无需ssl证书 缺点 访问速度较慢 访问速度较慢 访问速度较慢 虽说访问速度较慢可以通过各家的cdn加速来解决，但由于刚开始建立 blog 选择的是 wordpress ，域名、服务器、备案、证书等都已经一应俱全，且之前的架构采用 docker，添加一台 nginx 来跑 hugo 的静态网站是很方便的\n一键将hugo博客部署到阿里云 虽说标题带有一键，但还是有一定的门槛的，需要对dokcer | docker-compose | nginx有一定了解\n配置文件下载 下载完将目录上传到自己的服务器，重命名为 blog (当然你可以用其他名字)\n确保服务器网络、ssl证书申请、服务器公网ip、服务器安全组权限(80/443)等基础配置已经一应俱全 确保服务器安装了 docker 和 docker-compose 修改blog/conf/nginx-hugo/nginx.conf和blog/conf/nginx-proxy/default.conf，需要修改的地方在文件中已经标注出来了 将你的ssl证书放到hugo-blog-dockercompose/ssl/目录下 在blog目录下执行docker-compose up -d即可启动容器 将hugo生成的public目录上传到服务器blog/data/hugo/中，参考下文 在域名提供商处为你的域名添加A记录，指向服务器的公网ip地址(主域名和twikoo域名都要配置) 都配置完后 参考下文 配置twikoo 至此已经配置完成，应该可以通过域名访问hugo站点了，后续更新内容只需要hugo生成静态文件上传到服务即可\n所有的配置、应用数据、日志都保存在blog目录下，你可以在不同的服务器上快速迁移hugo环境，无需担心后续想要迁移新服务器时遇到的各种问题\nworkflow 编辑文章 采用 typora + picgo + 七牛云图床流程，参考我的另一篇文章：typora+picgo+七牛云上传图片\n生成静态文件 hugo -F --cleanDestinationDir 后面两个参数表示会先删除之前生成的 public 目录，保证每次生成的 public 都是新的\n上传静态文件 将mobaxterm的命令添加到用户环境变量中，以实现git bash | vscode | windows terminal中运行一些 mobaxterm 本地终端附带的命令，也就无需再专门打开一次 mobaxterm 去上传文件了\nrsync -avuz --progress --delete public/ root@lvbibir.cn:/root/blog/data/hugo/ 归档备份 沿用搭建Github pages时使用的 github仓库 ，来作为我博客的归档管理，也可以方便家里电脑和工作电脑之间的数据同步\ntwikoo评论 所有部署方式：https://twikoo.js.org/quick-start.html\nvercel+mongodb+github部署方式参考：https://www.sulvblog.cn/posts/blog/hugo_twikoo/\n记录一下账号关系：mongodb使用google账号登录，vercel使用github登录\n私有部署(docker) 如果是使用 一键将hugo博客部署到阿里云 中的步骤部署了twikoo，这步直接忽略，配置前端代码即可\ndocker run --name twikoo -e TWIKOO_THROTTLE=1000 -p 8080:8080 -v ${PWD}/data:/app/data -d imaegoo/twikoo 部署完成后看到如下结果即成功\n[root@lvbibir ~]# curl http://localhost:8080\r{\u0026#34;code\u0026#34;:100,\u0026#34;message\u0026#34;:\u0026#34;Twikoo 云函数运行正常，请参考 https://twikoo.js.org/quick-start.html#%E5%89%8D%E7%AB%AF%E9%83%A8%E7%BD%B2 完成前端的配置\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;1.6.7\u0026#34;} 后续最好套上反向代理，加上域名和证书\n前端代码 创建或者修改 layouts\\partials\\comments.html\n\u0026lt;!-- Twikoo --\u0026gt;\r\u0026lt;div\u0026gt;\r\u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt;\r\u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;💬评论\u0026lt;/span\u0026gt;\r\u0026lt;hr /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rtwikoo.init({\renvId: \u0026#34;\u0026#34;, //填自己的，例如：https://example.com\rel: \u0026#34;#tcomment\u0026#34;,\rlang: \u0026#39;zh-CN\u0026#39;,\rpath: window.TWIKOO_MAGIC_PATH||window.location.pathname,\r});\r\u0026lt;/script\u0026gt;\r\u0026lt;/div\u0026gt; 调用上述twikoo代码的位置：layouts/_default/single.html\n\u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt;\r// 其他代码......\r{{- if (.Param \u0026#34;comments\u0026#34;) }}\r{{- partial \u0026#34;comments.html\u0026#34; . }}\r{{- end }}\r\u0026lt;/article\u0026gt; 在站点配置文件config中加上版本号\nparams:\rtwikoo:\rversion: 1.6.7 更新 拉取新版本docker pull imaegoo/twikoo 停止旧版本容器docker stop twikoo 删除旧版本容器docker rm twikoo 部署新版本容器docker-compose up -d 在hugo配置文件 config.yml 中修改 twikoo版本 修改数据 直接修改blog/data/twikoo/目录下的文件后重启容器，❗慎重修改\n修改smms图床的api地址 由于sm.ms域名国内无法访问，twikoo官方还没有出具体的修改方式，自己修改容器配置文件进行修改\n# 复制配置文件 [root@lvbibir blog]# docker cp twikoo:/app/node_modules/twikoo-func/utils/image.js /root/blog/conf/twikoo/ # 修改配置文件，原来的配置是 https://sm.ms/api.v2/upload [root@lvbibir blog]# grep smms conf/twikoo/image.js } else if (config.IMAGE_CDN === \u0026#39;smms\u0026#39;) { const uploadResult = await axios.post(\u0026#39;https://smms.app/api/v2/upload\u0026#39;, formData, { # 将配置文件映射进容器内，重启容器即可 [root@lvbibir blog]# grep twikoo docker-compose.yml twikoo: image: imaegoo/twikoo container_name: twikoo - $PWD/data/twikoo:/app/data - $PWD/conf/twikoo/image.js:/app/node_modules/twikoo-func/utils/image.js 自定义字体 可以使用一些在线的字体，可能会比较慢，推荐下载想要的字体放到自己的服务器或者cdn上\n修改assets\\css\\extended\\fonts.css，添加@font-face\n@font-face { font-family: \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; src: url(\u0026#34;https://your.domain.com/fonts/test.woff2\u0026#34;) format(\u0026#34;woff2\u0026#34;); font-display: swap; } 修改assets\\css\\extended\\blank.css，推荐将英文字体放在前面，可以实现英文和中文使用不同字体。\n.post-content { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } body { font-family: Consolas, \u0026#34;LXGWWenKaiLite-Bold\u0026#34;; //修改 } 修改链接颜色 在 hugo+papermod 默认配置下，链接颜色是黑色字体带下划线的组合，个人非常喜欢typora-vue的渲染风格hugo官方文档给出了通过render hooks覆盖默认的markdown渲染link的方式\n新建layouts/_default/_markup/render-link.html文件，内容如下。在官方给出的示例中添加了 style=\u0026quot;color:#42b983，颜色可以自行修改\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; style=\u0026#34;color:#42b983\u0026#34;;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; Artitalk说说 官方文档\n需要注意的是如果使用的是国际版的LeadCloud，需要绑定自定义域名后才能正常访问\n记录一下账号关系：LeadCloud使用163邮箱登录\nleancloud配置 前往 LeanCloud 国际版，注册账号。 注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱。 绑定完成之后点击创建应用，应用名称随意，接着在结构化数据中创建 class，命名为 shuoshuo。 在你新建的应用中找到结构化数据下的用户。点击添加用户，输入想用的用户名及密码。 回到结构化数据中，点击 class 下的 shuoshuo。找到权限，在 Class 访问权限中将 add_fields 以及 create 权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将 delete 和 update 也设置为跟它们一样的权限。 然后新建一个名为atComment的class，权限什么的使用默认的即可。 点击 class 下的 _User 添加列，列名称为 img，默认值填上你这个账号想要用的发布说说的头像url，这一项不进行配置，说说头像会显示为默认头像 —— Artitalk 的 logo。 在最菜单栏中找到设置-\u0026gt; 应用 keys，记下来 AppID 和 AppKey ，一会会用。 最后将 _User 中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据以达到强制发布说说。 在设置-\u0026gt;域名绑定中绑定自定义域名 ❗ 关于设置权限的这几步\n这几步一定要设置好，才可以保证不被 “闲人” 破解发布说说的验证\nhugo配置 新增 content/talk.md 页面，内容如下，注意修改标注的内容，front-matter 的内容自行修改\n--- title: \u0026#34;💬 说说\u0026#34; date: 2021-08-31 hidemeta: true description: \u0026#34;胡言乱语\u0026#34; comments: true reward: false showToc: false TocOpen: false showbreadcrumbs: false --- \u0026lt;body\u0026gt; \u0026lt;!-- 引用 artitalk --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/artitalk\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 存放说说的容器 --\u0026gt; \u0026lt;div id=\u0026#34;artitalk_main\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Artitalk({ appId: \u0026#39;**********\u0026#39;, // Your LeanCloud appId appKey: \u0026#39;************\u0026#39;, // Your LeanCloud appKey serverURL: \u0026#39;*********\u0026#39; // 绑定的自定义域名 }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; 这个时候已经可以直接访问了，https://your.domain.com/talk\n输入 leancloud配置 步骤中的第4步配置的用户名密码登录后就可以发布说说了\nshortcode ppt、bilibili、youtube、豆瓣阅读和电影卡片\nhttps://www.sulvblog.cn/posts/blog/shortcodes/\nmermaid\nhttps://www.sulvblog.cn/posts/blog/hugo_mermaid/\n图片画廊\nhttps://github.com/liwenyip/hugo-easy-gallery/\nhttps://www.liwen.id.au/heg/\n自定义footer 自定义页脚内容\n添加完下面的页脚内容后要修改 assets\\css\\extended\\blank.css 中的 --footer-height 的大小，具体数字需要考虑到行数和字体大小\n自定义徽标 徽标功能源自：https://shields.io/ 考虑到访问速度，可以在生成完徽标后放到自己的cdn上\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://img.shields.io/static/v1?\u0026amp;style=plastic\u0026amp;color=308fb5\u0026amp;label=Power by\u0026amp;message=hugo\u0026amp;logo=hugo\u0026#34; style=\u0026#34;display: unset;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; 网站运行时间 在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n起始时间自行修改\n\u0026lt;span id=\u0026#34;runtime_span\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;function show_runtime(){window.setTimeout(\u0026#34;show_runtime()\u0026#34;,1000);X=new Date(\u0026#34;7/13/2021 1:00:00\u0026#34;);Y=new Date();T=(Y.getTime()-X.getTime());M=24*60*60*1000;a=T/M;A=Math.floor(a);b=(a-A)*24;B=Math.floor(b);c=(b-B)*60;C=Math.floor((b-B)*60);D=Math.floor((c-C)*60);runtime_span.innerHTML=\u0026#34;网站已运行\u0026#34;+A+\u0026#34;天\u0026#34;+B+\u0026#34;小时\u0026#34;+C+\u0026#34;分\u0026#34;+D+\u0026#34;秒\u0026#34;}show_runtime();\u0026lt;/script\u0026gt; 访问人数统计 统计功能源自：http://busuanzi.ibruce.info/\n在 layouts\\partials\\footer.html 中的 \u0026lt;footer\u0026gt; 添加如下\n\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\u0026#34;\u0026gt; 总访客数: \u0026lt;i class=\u0026#34;fa fa-user\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 总访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; | 本页访问量: \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; 其他修改 前端知识比较匮乏，其他 css样式修改 基本都是通过 f12控制台 一点点摸索改的，不太规范且比较琐碎就不单独记录了，其实我根本已经忘记还改了哪些东西\n","permalink":"https://www.lvbibir.cn/posts/blog/hello-hugo/","summary":"前言 研究 hugo 建站之初是打算采用 Github Pages 来发布静态博客 优点 仅需一个github账号和简单配置即可将静态博客发布到 github pages 没有维护的时间成本，可以将精力更多的放到博客内容本身上去 无需备案 无需ssl证书 缺点 访问速度较慢 访问速度较慢 访问速度较慢 虽说访问速度较慢可以通过各家的cdn加速来解决，但由于","title":"【置顶】Hello,hugo!"},{"content":"报错详细信息\nException in thread \u0026#34;main\u0026#34; java.nio.file.NotDirectoryException: /usr/share/elasticsearch/plugins/plugin-descriptor.properties at java.base/sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:439) at java.base/java.nio.file.Files.newDirectoryStream(Files.java:482) at java.base/java.nio.file.Files.list(Files.java:3793) at org.elasticsearch.tools.launchers.BootstrapJvmOptions.getPluginInfo(BootstrapJvmOptions.java:49) at org.elasticsearch.tools.launchers.BootstrapJvmOptions.bootstrapJvmOptions(BootstrapJvmOptions.java:34) at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:137) at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86) 安装插件时直接将插件的zip解压到了 plugins目录 导致的，每个插件应以目录的形式存放在 plugins目录 中\n[root@21-centos-7 ~]# ls /data/elasticsearch/plugins/ commons-codec-1.9.jar commons-logging-1.2.jar config elasticsearch-analysis-ik-7.17.3.jar httpclient-4.5.2.jar httpcore-4.4.4.jar plugin-descriptor.properties plugin-security.policy 只需要为每个插件创建一个目录，并把插件解压到对应目录即可\nmkdir /data/elasticsearch/plugins/elasticsearch-analysis-ik/ unzip elasticsearch-analysis-ik-7.17.3.zip -d /data/elasticsearch/plugins/elasticsearch-analysis-ik/ 参考: https://github.com/medcl/elasticsearch-analysis-ik/issues/638\n","permalink":"https://www.lvbibir.cn/posts/tech/elasticsearch-plugin-error/","summary":"报错详细信息 Exception in thread \u0026#34;main\u0026#34; java.nio.file.NotDirectoryException: /usr/share/elasticsearch/plugins/plugin-descriptor.properties at java.base/sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:439) at java.base/java.nio.file.Files.newDirectoryStream(Files.java:482) at java.base/java.nio.file.Files.list(Files.java:3793) at org.elasticsearch.tools.launchers.BootstrapJvmOptions.getPluginInfo(BootstrapJvmOptions.java:49) at org.elasticsearch.tools.launchers.BootstrapJvmOptions.bootstrapJvmOptions(BootstrapJvmOptions.java:34) at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:137) at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:86) 安装插件时直接将插件的zip解压到了 plugins目录 导致的，每个插件应以目录的形式存放在 plugins目录 中 [root@21-centos-7 ~]# ls /data/elasticsearch/plugins/ commons-codec-1.9.jar commons-logging-1.2.jar config elasticsearch-analysis-ik-7.17.3.jar httpclient-4.5.2.jar httpcore-4.4.4.jar plugin-descriptor.properties plugin-security.policy 只需要为每个插件创建一个目录，并把插件解压到对应目录即可 mkdir /data/elasticsearch/plugins/elasticsearch-analysis-ik/ unzip elasticsearch-analysis-ik-7.17.3.zip -d /data/elasticsearch/plugins/elasticsearch-analysis-ik/ 参考: https://github.com/medcl/elasticsearch-analysis-ik/issues/638","title":"elasticsearch 安装插件报错 java.nio.file.NotDirectoryException"},{"content":"1. 基本语法 if [ command ];then 符合该条件执行的语句 elif [ command ];then 符合该条件执行的语句 else 符合该条件执行的语句 fi 2. 字符串判断 表达式 解释 [ -z STRING ] 如果STRING的长度为零则为真 ，即判断是否为空，空即是真； [ -n STRING ] or [ STRING ] 如果STRING的长度非零则为真 ，即判断是否为非空，非空即是真； [ STRING1 = STRING2 ] 如果两个字符串相同则为真 ； [ STRING1 != STRING2 ] 如果字符串不相同则为真 ； 3. 数值判断 表达式 解释 [ INT1 -eq INT2 ] INT1和INT2两数相等为真，= [ INT1 -ne INT2 ] INT1和INT2两数不等为真，!= [ INT1 -gt INT2 ] INT1大于INT1为真，\u0026gt; [ INT1 -ge INT2 ] INT1大于等于INT2为真，\u0026gt;= [ INT1 -lt INT2 ] INT1小于INT2为真，\u0026lt; [ INT1 -le INT2 ] INT1小于等于INT2为真，\u0026lt;= 4. 文件/目录判断 表达式 解释 [ -b FILE ] 如果 FILE 存在且是一个块特殊文件则为真 [ -c FILE ] 如果 FILE 存在且是一个字特殊文件则为真 [ -d DIR ] 如果 FILE 存在且是一个目录则为真 [ -e FILE ] 如果 FILE 存在则为真 [ -f FILE ] 如果 FILE 存在且是一个普通文件则为真 [ -g FILE ] 如果 FILE 存在且已经设置了SGID则为真 [ -k FILE ] 如果 FILE 存在且已经设置了粘制位则为真 [ -p FILE ] 如果 FILE 存在且是一个名字管道(F如果O)则为真 [ -r FILE ] 如果 FILE 存在且是可读的则为真 [ -s FILE ] 如果 FILE 存在且大小不为0则为真 [ -t FD ] 如果文件描述符 FD 打开且指向一个终端则为真 [ -u FILE ] 如果 FILE 存在且设置了SUID (set user ID)则为真 [ -w FILE ] 如果 FILE存在且是可写的则为真 [ -x FILE ] 如果 FILE 存在且是可执行的则为真 [ -O FILE ] 如果 FILE 存在且属有效用户ID则为真 [ -G FILE ] 如果 FILE 存在且属有效用户组则为真 [ -L FILE ] 如果 FILE 存在且是一个符号连接则为真 [ -N FILE ] 如果 FILE 存在且自上次阅读以来已进行了修改则为真 [ -S FILE ] 如果 FILE 存在且是一个套接字则为真 [ FILE1 -nt FILE2 ] 如果 FILE1 比 FILE2 更新，或者 FILE1 存在且 FILE2 不存在则为真 [ FILE1 -ot FILE2 ] 如果 FILE1 比 FILE2 要老，或者 FILE2 存在且 FILE1 不存在则为真 [ FILE1 -ef FILE2 ] 如果 FILE1 和 FILE2 指向相同的设备和节点号则为真 5. 与或非 -a \u0026amp;\u0026amp; 与，两个条件都满足 -o || 或，两个条件只满足一个条件 ! 非，两个条件都不满足 ","permalink":"https://www.lvbibir.cn/posts/tech/shell-if/","summary":"1. 基本语法 if [ command ];then 符合该条件执行的语句 elif [ command ];then 符合该条件执行的语句 else 符合该条件执行的语句 fi 2. 字符串判断 表达式 解释 [ -z STRING ] 如果STRING的长度为零则为真 ，即判断是否为空，空即是真； [ -n STRING ] or [ STRING ] 如果STRING的长度非零则为真 ，即判断是否为非空，非空即是真； [ STRING1 = STRING2 ] 如果两个字","title":"shell | if条件判断"},{"content":"1. 阿里云构建 1.1 git仓库设置 1.1.1 创建仓库 用于存放Dockerfile\n1.1.2 上传Dockerfile #换成自己的仓库地址 git clone https://github.com/lvbibir/docker-images cd docker-images mkdir -p k8s.gcr.io/pause-3.2/ echo \u0026#34;FROM k8s.gcr.io/pause:3.2\u0026#34; \u0026gt; k8s.gcr.io/pause-3.2/Dockerfile git add . git commit -m \u0026#39;new image: k8s.gcr.io/pause:3.2\u0026#39; # 默认分支可能是main，取决于你的github设置 git push origin master 1.2 阿里云设置 登陆阿里云，访问阿里云容器镜像服务\n1.2.1 创建个人实例 1.2.2 进入个人实例创建命名空间 1.2.3 创建访问凭证 1.2.4 绑定github账号 1.2.5 新建镜像仓库 指定刚才创建的github仓库，记得勾选海外机器构建\n1.2.6 新建构建 手动触发构建，正常状况应该可以看到构建成功\n1.2.7 镜像下载 操作指南里可以看到如何下载镜像，标签即刚才新建构建时指定的镜像版本\n2. gcr.io_mirror 项目地址\n该项目通过 Github Actions 将 gcr.io、k8s.gcr.io、registry.k8s.io、quay.io、ghcr.io 镜像仓库的镜像搬运至dockerhub\n直接提交issue，在模板issue的[PORTER]后面添加想要搬运的镜像tag，也可以直接在关闭的issue列表中检索，可能也会有其他人搬运过，直接用就行了\n稍等一小会可以看到镜像已经搬运到dockerhub了\n3. Docker Playground Docker Playground 是一个免费的线上docker环境，由于是外网环境所以下载镜像、推送到dockerhub都很快，也可以直接推到阿里云的仓库\n4. http proxy 如果有代理软件可以在docker中配置代理实现\n{ \u0026#34;proxies\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;httpProxy\u0026#34;: \u0026#34;http://127.0.0.1:1080\u0026#34;, \u0026#34;httpsProxy\u0026#34;: \u0026#34;http://127.0.0.1:1080\u0026#34;, \u0026#34;noProxy\u0026#34;: \u0026#34;*.test.example.com,.example2.com\u0026#34; } } } 5. 使用国内现成的镜像站 这种方式的问题主要是镜像不全，且没有统一的管理，建议使用之前的四种方式\n阿里云仓库\ndocker pull k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.3.0 # 换成 docker pull registry.aliyuncs.com/google_containers/csi-node-driver-registrar:v2.3.0 也可以使用 lank8s.cn，他们的对应关系 k8s.gcr.io –\u0026gt; lank8s.cn，gcr.io –\u0026gt; gcr.lank8s.cn\ndocker pull k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.3.0 # 换成 docker pull lank8s.cn/sig-storage/csi-node-driver-registrar:v2.3.0 中科大\ndocker image pull quay.io/kubevirt/virt-api:v0.45.0 # 换成 docker pull quay.mirrors.ustc.edu.cn/kubevirt/virt-api:v0.45.0 ","permalink":"https://www.lvbibir.cn/posts/tech/docker-download-foreign-images/","summary":"1. 阿里云构建 1.1 git仓库设置 1.1.1 创建仓库 用于存放Dockerfile 1.1.2 上传Dockerfile #换成自己的仓库地址 git clone https://github.com/lvbibir/docker-images cd docker-images mkdir -p k8s.gcr.io/pause-3.2/ echo \u0026#34;FROM k8s.gcr.io/pause:3.2\u0026#34; \u0026gt; k8s.gcr.io/pause-3.2/Dockerfile git add . git commit -m \u0026#39;new image: k8s.gcr.io/pause:3.2\u0026#39; # 默认分支可能是main，取决于你的github设置 git push origin master 1.2 阿里云设置 登陆阿里云，访问阿里云容器镜像服务 1.2.1 创建个人实例 1.2.2 进","title":"docker | 下载外网镜像的几种方式"},{"content":"原题如下\n鬼谷子随意从2-99中选取了两个数。他把这两个数的和告诉了庞涓， 把这两个数的乘积告诉了孙膑。但孙膑和庞涓彼此不知道对方得到的数。第二天， 庞涓很有自信的对孙膑说：虽然我不知道这两个数是什么，但我知道你一定也不知道。随后，孙膑说：那我知道了。庞涓说：那我也知道了。这两个数是什么？\n代码示例\n#!/usr/bin/env python # -*- coding: utf-8 -*- \u0026#39;\u0026#39;\u0026#39; 第一步 庞告诉孙，已知和Sum满足有至少两种ab组合，且任意一组ab的乘积Pro都满足至少有两种ab组合，通过isPang函数将可能的ab组合放入abList_1 第二步 孙告诉庞，abList_1中的ab组合乘积得pro，该pro满足至少有两种ab组合，且所有的ab组合有且仅有一组ab组合满足isPang函数，通过isSun函数将abList中满足条件的ab组合放入abList_2，ab组合的积放入proList 第三步 庞告诉孙，abList_2中的ab组合相加得Sum，该Sum满足至少有两种ab组合，且所有的ab组合有且仅有一组ab所得乘积pro在proList中，将满足条件的ab组合放入abList，即最终答案 \u0026#39;\u0026#39;\u0026#39; # 根据给出的sum，遍历所有可能的a和b的组合 def getCombinationSum(sum): combination = [] for a in range(2, 100): for b in range(2, 100): if a + b == sum and a \u0026lt;= b: combination.append((a, b)) return combination # 根据给出的pro，遍历所有可能的a和b的组合 def getCombinationPro(pro): combination = [] for a in range(2, 100): for b in range(2, 100): if a * b == pro and a \u0026lt;= b: combination.append((a, b)) return combination def isPang(sum): \u0026#39;\u0026#39;\u0026#39; 第一步，传入的sum满足以下条件返回True，否则False: 1. 可以拆分成若干组ab的加和 2. 每一组拆分出来的ab乘积运算得pro，该pro满足有至少两组ab的乘积 \u0026#39;\u0026#39;\u0026#39; if len(getCombinationSum(sum)) \u0026lt; 2: return False else: combinationSum = getCombinationSum(sum) for i in combinationSum: status = 0 pro = i[0] * i[1] # 有其中一组ab不满足就打断循环 if len(getCombinationPro(pro)) \u0026lt; 2: status = 1 break if status == 0: return True else: return False def isSun(pro): \u0026#39;\u0026#39;\u0026#39; 第二步，传入的pro满足以下条件返回一组ab组合(元组)，否则False 1. 可以拆分成若干组ab的乘积 2. 每一组拆分出来的ab相加运算得sum，所有ab加和的sum有且仅有一个满足第一步的条件(放入isPang函数后返回True) \u0026#39;\u0026#39;\u0026#39; combination = [] combinationPro = getCombinationPro(pro) if len(combinationPro) \u0026gt; 1: for i in combinationPro: sum = i[0] + i[1] if isPang(sum): combination.append(i) if len(combination) == 1: return combination else: return False if __name__ == \u0026#39;__main__\u0026#39;: # 第一步 abList_1 = [] for sum in range(4, 198+1): if isPang(sum): abList_1 += getCombinationSum(sum) # 第二步 abList_2 = [] proList = [] for i in abList_1: pro = i[0] * i[1] if isSun(pro): abList_2.append(i) proList.append(pro) # 第三步 abList = [] for i in abList_2: sum = i[0] + i[1] n = 0 for j in getCombinationSum(sum): if j[0] * j[1] in proList: n += 1 if n == 1: abList.append(i) print(abList) ","permalink":"https://www.lvbibir.cn/posts/tech/logic-problem-guiguzi/","summary":"原题如下 鬼谷子随意从2-99中选取了两个数。他把这两个数的和告诉了庞涓， 把这两个数的乘积告诉了孙膑。但孙膑和庞涓彼此不知道对方得到的数。第二天， 庞涓很有自信的对孙膑说：虽然我不知道这两个数是什么，但我知道你一定也不知道。随后，孙膑说：那我知道了。庞涓说：那我也知道了。这两个数是什","title":"逻辑题 | 鬼谷子数学问题"},{"content":"1 前言 挂刀是指从饰品交易平台购买游戏饰品，在steam市场出售以实现将人民币转换为steam阿根廷账号余额。\nsteam圣诞促销活动快结束了，买了几款游戏后发现阿根廷账号余额没多少了，挂刀过程又比较繁琐，故有此文记录一下挂刀搞余额的步骤。\n2 步骤 2.1 网易buff账号注册及绑定 buff账号使用手机号注册即可，绑定需要搞余额的steam账号，同时需要提供steam账号的API key和交易链接，这部分buff有教程，或者百度，很容易找到\n2.2 挂刀油猴脚本 脚本链接\n脚本安装成功进入网页版buff后，简单设置一下脚本，推荐设置了一下货币转换为阿根廷比索和默认排序规则\n2.3 脚本提供的信息 每个饰品需要关注的有如下信息：\n挂刀比例 越低代表售出后可获得的余额更多 左边是buff售价，右边是市场售价（阿根廷比索）\nsteam求购人数\n2.4 寻找合适饰品 以以下几个维度入手，选择合适的饰品：\n比例较低 求购人数多 价格合适，太高可能卖的慢，太低要达到自己的要求可能需要倒好几个甚至十几个饰品才够 选择好后直接购买即可，后续步骤按照buff教程来\n2.5 卖出饰品 脚本提供的收益只能参考，具体还是要在市场看，着急就按照最低价卖即可，别人购买后就可以愉快的买新游戏啦\n","permalink":"https://www.lvbibir.cn/posts/life/steam-guadao/","summary":"1 前言 挂刀是指从饰品交易平台购买游戏饰品，在steam市场出售以实现将人民币转换为steam阿根廷账号余额。 steam圣诞促销活动快结束了，买了几款游戏后发现阿根廷账号余额没多少了，挂刀过程又比较繁琐，故有此文记录一下挂刀搞余额的步骤。 2 步骤 2.1 网易buff账号注册及绑定 buff账","title":"steam挂刀教程"},{"content":"在/etc/prifile.d目录下新建一个文件，用户登录系统时自动生效\nvim /etc/profile.d/history_conf.sh source /etc/profile.d/history_conf.sh # 手动生效 文件内容\nexport HISTFILE=\u0026#34;$HOME/.bash_history\u0026#34; # 指定命令写入文件(默认~/.bash_history) export HISTSIZE=1000 # history输出记录数 export HISTFILESIZE=10000 # HISTFILE文件记录数 export HISTIGNORE=\u0026#34;cmd1:cmd2:...\u0026#34; # 忽略指定cmd1,cmd2...的命令不被记录到文件；(加参数时会记录) export HISTCONTOL=ignoredups # ignoredups 不记录“重复”的命令；连续且相同 方为“重复” ； # ignorespace 不记录所有以空格开头的命令； # ignoreboth 表示ignoredups:ignorespace ,效果相当于以上两种的组合； # erasedups 删除重复命令； export PROMPT_COMMAND=\u0026#34;history -a\u0026#34; # 设置每条命令执行完立即写入HISTFILE(默认等待退出会话写入) export HISTTIMEFORMAT=\u0026#34;`whoami` %F %T \u0026#34; # 设置命令执行时间格式，记录文件增加时间戳 shopt -s histappend # 防止会话退出时覆盖其他会话写到HISTFILE的内容； 效果如下\n","permalink":"https://www.lvbibir.cn/posts/tech/linux-history-format/","summary":"在/etc/prifile.d目录下新建一个文件，用户登录系统时自动生效 vim /etc/profile.d/history_conf.sh source /etc/profile.d/history_conf.sh # 手动生效 文件内容 export HISTFILE=\u0026#34;$HOME/.bash_history\u0026#34; # 指定命令写入文件(默认~/.bash_history) export HISTSIZE=1000 # history输出记录数 export HISTFILESIZE=10000 # HISTFILE文件记录数 export HISTIGNORE=\u0026#34;cmd1:cmd2:...\u0026#34; # 忽略指定cmd1,cmd2...的命令不被记录到文件；","title":"linux中history命令的格式化输出"},{"content":"流程图\n代码示例\n使用前需要登录harbor\n确保镜像的项目名在harbor中已存在\n格式三类型的镜像会推送到harbor的library项目中\n#!/bin/bash # author: Amadeus Liu # date: 2022-10-11 17:02:13 # version: 1.0 harbor_url=\u0026#34;local.harbor.com\u0026#34; log_file=\u0026#34;/var/log/push-harbor.log\u0026#34; image_id=$(docker images -q | sort -u) ls ${log_file} || touch ${log_file} echo \u0026#34;############# $(date \u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34;) #############\u0026#34; \u0026gt;\u0026gt; ${log_file} get_image_tags () { docker inspect $1 --format=\u0026#39;{{.RepoTags}}\u0026#39; | sed \u0026#39;s/\\[//g\u0026#39; | sed \u0026#39;s/\\]//g\u0026#39; } image_tag_and_push () { docker tag $1 $2 \u0026amp;\u0026amp; echo \u0026#34;docker tag $1 $2\u0026#34; \u0026gt;\u0026gt; ${log_file} docker push $2 \u0026amp;\u0026amp; echo \u0026#34;docker pull $1 $2\u0026#34; \u0026gt;\u0026gt; ${log_file} } for i in ${image_id}; do # 判断镜像是否有harbor仓库的标签，有则视为harbor仓库中已有 if [[ $(get_image_tags $i) =~ ${harbor_url} ]]; then echo \u0026#34;已有${harbor_url}仓库标签-----$(get_image_tags $i)\u0026#34; else # 镜像的第一个完整标签 image_tag_first=$(echo $(get_image_tags $i) | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;) # 镜像的第一个完整标签并去除版本 image_tag_first_delete_ver=$(echo ${image_tag_first} | awk -F\u0026#39;:\u0026#39; \u0026#39;{print $1}\u0026#39;) # 判断标签属于哪种格式 if [[ ${image_tag_first_delete_ver} =~ \u0026#34;/\u0026#34; ]]; then # 镜像的第一个完整标签的第一部分（\u0026#39;/\u0026#39;分割后的$1） image_tag_first_repo=$(echo ${image_tag_first_delete_ver}| awk -F\u0026#39;/\u0026#39; \u0026#39;{print $1}\u0026#39;) if [[ \u0026#34;${image_tag_first_repo}\u0026#34; =~ \u0026#34;.\u0026#34; ]]; then # 格式一 image_tag_harbor=\u0026#34;${harbor_url}/$(echo ${image_tag_first} | awk -F\u0026#39;/\u0026#39; \u0026#39;{print $2}\u0026#39;)/$(echo ${image_tag_first} | awk -F\u0026#39;/\u0026#39; \u0026#39;{print $3}\u0026#39;)\u0026#34; echo \u0026#34;${image_tag_first} \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;tag to\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; ${image_tag_harbor}\u0026#34; image_tag_and_push $i ${image_tag_harbor} else # 格式二 image_tag_harbor=\u0026#34;${harbor_url}/${image_tag_first}\u0026#34; echo \u0026#34;${image_tag_first} \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;tag to\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; ${image_tag_harbor}\u0026#34; image_tag_and_push $i ${image_tag_harbor} fi else # 格式三 image_tag_harbor=\u0026#34;${harbor_url}/library/${image_tag_first}\u0026#34; echo \u0026#34;${image_tag_first} \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;tag to\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; ${image_tag_harbor}\u0026#34; image_tag_and_push $i ${image_tag_harbor} fi fi done 腾讯云搬迁声明\n我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=3ielzwnut2qsg\n","permalink":"https://www.lvbibir.cn/posts/tech/shell-push-harbor/","summary":"流程图 代码示例 使用前需要登录harbor 确保镜像的项目名在harbor中已存在 格式三类型的镜像会推送到harbor的library项目中 #!/bin/bash # author: Amadeus Liu # date: 2022-10-11 17:02:13 # version: 1.0 harbor_url=\u0026#34;local.harbor.com\u0026#34; log_file=\u0026#34;/var/log/push-harbor.log\u0026#34; image_id=$(docker images -q | sort -u) ls ${log_file} || touch ${log_file} echo \u0026#34;############# $(date \u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34;) #############\u0026#34; \u0026gt;\u0026gt; ${log_file} get_image_tags () { docker inspect $1 --format=\u0026#39;{{.RepoTags}}\u0026#39; | sed \u0026#39;s/\\[//g\u0026#39; | sed \u0026#39;s/\\]//g\u0026#39; } image_tag_and_push () { docker tag $1 $2 \u0026amp;\u0026amp; echo \u0026#34;docker tag $1 $2\u0026#34; \u0026gt;\u0026gt; ${log_file} docker push $2 \u0026amp;\u0026amp; echo \u0026#34;docker pull $1 $2\u0026#34; \u0026gt;\u0026gt;","title":"shell | 将本地镜像批量推送到harbor"},{"content":"之前本地做一些测试的时候多次修改过hosts文件，导致hosts文件出现了某些问题，按照网上很多方式自建hosts文件、修改编码格式、包括使用一些第三方工具修复都没有作用，记录一下成功修复hosts文件的步骤\n使用管理员权限打开命令提示符 执行如下代码 for /f %P in (\u0026#39;dir %windir%\\WinSxS\\hosts /b /s\u0026#39;) do copy %P %windir%\\System32\\drivers\\etc \u0026amp; echo %P \u0026amp; Notepad %P ","permalink":"https://www.lvbibir.cn/posts/tech/windows-fix-hosts/","summary":"之前本地做一些测试的时候多次修改过hosts文件，导致hosts文件出现了某些问题，按照网上很多方式自建hosts文件、修改编码格式、包括使用一些第三方工具修复都没有作用，记录一下成功修复hosts文件的步骤 使用管理员权限打开命令提示符 执行如下代码 for /f %P in (\u0026#39;dir %windir%\\WinSxS\\hosts /b /s\u0026#39;) do copy %P %windir%\\System32\\drivers\\etc \u0026amp; echo %P \u0026amp;","title":"windows | hosts文件修复"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\nConfigMap 创建ConfigMap后，数据实际会存储在k8s中的Etcd中，然后通过创建pod时引用该数据。\n应用场景：应用程序配置\npod使用ConfigMap数据有两种方式：\n变量注入 数据卷挂载 yaml示例\napiVersion: v1 kind: ConfigMap metadata: name: configmap-demo data: abc: \u0026#34;123\u0026#34; cde: \u0026#34;456\u0026#34; redis.properties: | port: 6379 host: 1.1.1.4 password: 123456 --- apiVersion: v1 kind: Pod metadata: name: pod-configmap spec: containers: - name: demo image: nginx:1.19 env: - name: ABCD valueFrom: configMapKeyRef: name: configmap-demo key: abc - name: CDEF valueFrom: configMapKeyRef: name: configmap-demo key: cde volumeMounts: - name: config mountPath: \u0026#34;/config\u0026#34; readOnly: true volumes: - name: config configMap: name: configmap-demo items: - key: \u0026#34;redis.properties\u0026#34; path: \u0026#34;redis.properties\u0026#34; # 挂载文件名 容器内验证\n[root@k8s-node1 ~]# kubectl exec -it pod-configmap -- bash root@pod-configmap:/# echo $ABCD 123 root@pod-configmap:/# echo $CDEF 456 root@pod-configmap:/# cat /config/redis.properties port: 6379 host: 1.1.1.4 password: 123456 Secret 与ConfigMap类似，区别在于Secret主要存储敏感数据，所有的数据都会经过base64编码。\nSecret支持三种数据类型：\ndocker-registry：存储镜像仓库认证信息 generic：从文件、目录或者字符串创建，例如存储用户名密码 tls：存储证书，例如HTTPS证书 示例\n将用户名和密码进行编码\n[root@k8s-node1 ~]# echo -n \u0026#39;admin\u0026#39; | base64 YWRtaW4= [root@k8s-node1 ~]# echo -n \u0026#39;123.com\u0026#39; | base64 MTIzLmNvbQ== secret.yaml\napiVersion: v1 kind: Secret metadata: name: db-pass type: Opaque data: username: YWRtaW4= password: MTIzLmNvbQ== pod-secret.yaml\napiVersion: v1 kind: Pod metadata: name: pod-secret-demo spec: containers: - name: demo image: nginx:1.19 env: - name: USER # 变量名 valueFrom: secretKeyRef: name: db-pass key: username - name: PASS # 变量名 valueFrom: secretKeyRef: name: db-pass key: password volumeMounts: - name: config mountPath: \u0026#34;/config\u0026#34; readOnly: true volumes: - name: config secret: secretName: db-pass items: - key: password path: my-password # 挂载文件名 验证\n[root@k8s-node1 ~]# kubectl apply -f secret.yaml secret/db-pass created [root@k8s-node1 ~]# kubectl apply -f pod-secret.yaml pod/pod-secret-demo created [root@k8s-node1 ~]# kubectl exec -it pod-secret-demo -- bash root@pod-secret-demo:/# echo $USER admin root@pod-secret-demo:/# echo $PASS 123.com root@pod-secret-demo:/# cat /config/my-password 123.com ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-configmap-secret/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 ConfigMap 创建ConfigMap后，数据实际会存储在k8s中的Etcd中，然后通过创建pod时引用该数据。 应用场景：应用程序配置 pod使用ConfigMap数据有两种方式： 变量注入 数据卷挂载","title":"kubernetes | configmap \u0026 secret"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\nkubernetes安全框架 客户端要想访问K8s集群API Server，一般需要证书、Token或者用户名+密码；如果Pod访问，需要ServiceAccount\nK8S安全控制框架主要由下面3个阶段进行控制，每一个阶段都支持插件方式，通过API Server配置来启用插件。\nAuthentication（鉴权） Authorization（授权） Admission Control（准入控制） 鉴权(Authentication)\n三种客户端身份认证：\nHTTPS 证书认证：基于CA证书签名的数字证书认证\nHTTP Token认证：通过一个Token来识别用户\nHTTP Base认证：用户名+密码的方式认证\nRBAC（Role-Based Access Control，基于角色的访问控制）：负责完成授权（Authorization）工作。\nRBAC根据API请求属性，决定允许还是拒绝。\n比较常见的授权维度：\nuser：用户名\ngroup：用户分组\n资源，例如pod、deployment\n资源操作方法：get，list，create，update，patch，watch，delete\n命名空间\nAPI组\n准入控制(Admission Control)\nAdminssion Control实际上是一个准入控制器插件列表，发送到API Server的请求都需要经过这个列表中的每个准入控制器插件的检查，检查不通过，则拒绝请求\nRBAC 基础概念 RBAC（Role-Based Access Control，基于角色的访问控制），允许通过Kubernetes API动态配置策略。\n角色\nRole：授权特定命名空间的访问权限\nClusterRole：授权所有命名空间的访问权限\n角色绑定\nRoleBinding：将角色绑定到主体（即subject）\nClusterRoleBinding：将集群角色绑定到主体\n主体（subject）\nUser：用户\nGroup：用户组\nServiceAccount：服务账号\n示例 为Amadeus用户授权default命名空间Pod读取权限\n用k8s ca签发客户端证书 下载cfssl工具\nwget --no-check-certificate https://github.com/cloudflare/cfssl/releases/download/1.2.0/cfssl_linux-amd64 wget --no-check-certificate https://github.com/cloudflare/cfssl/releases/download/1.2.0/cfssljson_linux-amd64 wget --no-check-certificate https://github.com/cloudflare/cfssl/releases/download/1.2.0/cfssl-certinfo_linux-amd64 chmod a+x cfssl* mv cfssl_linux-amd64 /usr/bin/cfssl mv cfssljson_linux-amd64 /usr/bin/cfssljson mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo 创建ca-config.json 证书文件\n{ \u0026#34;signing\u0026#34;: { \u0026#34;default\u0026#34;: { \u0026#34;expiry\u0026#34;: \u0026#34;87600h\u0026#34; }, \u0026#34;profiles\u0026#34;: { \u0026#34;kubernetes\u0026#34;: { \u0026#34;usages\u0026#34;: [ \u0026#34;signing\u0026#34;, \u0026#34;key encipherment\u0026#34;, \u0026#34;server auth\u0026#34;, \u0026#34;client auth\u0026#34; ], \u0026#34;expiry\u0026#34;: \u0026#34;87600h\u0026#34; } } } } Amadeus-csr.json 证书文件\n{ \u0026#34;CN\u0026#34;: \u0026#34;Amadeus\u0026#34;, \u0026#34;hosts\u0026#34;: [], \u0026#34;key\u0026#34;: { \u0026#34;algo\u0026#34;: \u0026#34;rsa\u0026#34;, \u0026#34;size\u0026#34;: 2048 }, \u0026#34;names\u0026#34;: [ { \u0026#34;C\u0026#34;: \u0026#34;CN\u0026#34;, \u0026#34;ST\u0026#34;: \u0026#34;BeiJing\u0026#34;, \u0026#34;L\u0026#34;: \u0026#34;BeiJing\u0026#34;, \u0026#34;O\u0026#34;: \u0026#34;k8s\u0026#34;, \u0026#34;OU\u0026#34;: \u0026#34;System\u0026#34; } ] } 生成证书\n[root@k8s-node1 ~]# cfssl gencert -ca=/etc/kubernetes/pki/ca.crt -ca-key=/etc/kubernetes/pki/ca.key -config=ca-config.json -profile=kubernetes Amadeus-csr.json | cfssljson -bare Amadeus # 生成时会有警告，可以忽略，是因为提供的信息不是很全 [root@k8s-node1 ~]# ls Amadeus* # 生成如下三个文件 Amadeus.csr Amadeus-key.pem Amadeus.pem 生成kubeconfig授权文件 kubectl config set-cluster kubernetes \\ --certificate-authority=/etc/kubernetes/pki/ca.crt \\ --embed-certs=true \\ --server=https://1.1.1.1:6443 \\ --kubeconfig=Amadeus.kubeconfig # --embed-certs=true 表示将证书写入etcd 设置客户端证书\nkubectl config set-credentials Amadeus \\ --client-key=Amadeus-key.pem \\ --client-certificate=Amadeus.pem \\ --embed-certs=true \\ --kubeconfig=Amadeus.kubeconfig 设置默认上下文\nkubectl config set-context kubernetes \\ --cluster=kubernetes \\ --user=Amadeus \\ --kubeconfig=Amadeus.kubeconfig 设置将配置的授权文件添加到集群\nkubectl config use-context kubernetes --kubeconfig=Amadeus.kubeconfig 创建RBAC权限策略 yaml示例：使Amadeus用户仅有查看default命名空间下的pod\napiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: namespace: default name: pod-reader rules: - apiGroups: [\u0026#34;\u0026#34;] # api组，置空为核心组 resources: [\u0026#34;pods\u0026#34;] # 资源 verbs: [\u0026#34;get\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;list\u0026#34;] # 对资源的操作 --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: read-pods namespace: default subjects: - kind: User name: Amadeus # 绑定的用户名 apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io 测试验证\n[root@k8s-node1 ~]# kubectl apply -f rbac.yaml role.rbac.authorization.k8s.io/pod-reader created rolebinding.rbac.authorization.k8s.io/read-pods created # pod可以正常查看 [root@k8s-node1 ~]# kubectl --kubeconfig=/root/Amadeus.kubeconfig get pods NAME READY STATUS RESTARTS AGE nfs-client-provisioner-66d6cb77fd-k2n9l 1/1 Running 7 (4h53m ago) 30h pod-configmap 1/1 Running 0 3h6m pod-secret-demo 1/1 Running 0 127m # 其他资源都没有权限 [root@k8s-node1 ~]# kubectl --kubeconfig=/root/Amadeus.kubeconfig get nodes Error from server (Forbidden): nodes is forbidden: User \u0026#34;Amadeus\u0026#34; cannot list resource \u0026#34;nodes\u0026#34; in API group \u0026#34;\u0026#34; at the cluster scope [root@k8s-node1 ~]# kubectl --kubeconfig=/root/Amadeus.kubeconfig get deployment Error from server (Forbidden): deployments.apps is forbidden: User \u0026#34;Amadeus\u0026#34; cannot list resource \u0026#34;deployments\u0026#34; in API group \u0026#34;apps\u0026#34; in the namespace \u0026#34;default\u0026#34; 给该用户增加查看和删除deployment的权限，但pod的权限依旧只有查看\n[root@k8s-node1 ~]# vim rbac.yaml # 在rbac.yaml中增加如下规则 - apiGroups: [\u0026#34;apps\u0026#34;] resources: [\u0026#34;deployments\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;list\u0026#34;, \u0026#34;delete\u0026#34;] [root@k8s-node1 ~]# kubectl apply -f rbac.yaml role.rbac.authorization.k8s.io/pod-reader configured rolebinding.rbac.authorization.k8s.io/read-pods unchanged [root@k8s-node1 ~]# kubectl --kubeconfig=/root/Amadeus.kubeconfig get deployment NAME READY UP-TO-DATE AVAILABLE AGE nfs-client-provisioner 1/1 1 1 30h 网络策略(Network Policy) 基础概念 网络策略（Network Policy），用于限制Pod出入流量，提供Pod级别和Namespace级别网络访问控制。\n一些应用场景：\n应用程序间的访问控制。例如微服务A允许访问微服务B，微服务C不能访问微服务A\n开发环境命名空间不能访问测试环境命名空间Pod\n当Pod暴露到外部时，需要做Pod白名单\n多租户网络环境隔离\nPod网络入口方向隔离：\n基于Pod级网络隔离：只允许特定对象访问Pod（使用标签定义），允许白名单上的IP地址或者IP段访问Pod\n基于Namespace级网络隔离：多个命名空间，A和B命名空间Pod完全隔离。\nPod网络出口方向隔离：\n拒绝某个Namespace上所有Pod访问外部\n基于目的IP的网络隔离：只允许Pod访问白名单上的IP地址或者IP段\n基于目标端口的网络隔离：只允许Pod访问白名单上的端\n实际应用 示例一：只允许default命名空间中携带run=client1标签的Pod访问default命名空间携带app=web标签的Pod的80端口，无法ping通\n[root@k8s-node1 ~]# kubectl create deployment web --image=nginx:1.19 [root@k8s-node1 ~]# kubectl run client1 --image=busybox -- sleep 36000 [root@k8s-node1 ~]# kubectl run client2 --image=busybox -- sleep 36000 [root@k8s-node1 ~]# kubectl get pods --show-labels NAME READY STATUS RESTARTS AGE LABELS client1 1/1 Running 0 69s run=client1 client2 1/1 Running 0 62s run=client2 web-bc7cc9f65-5mg9d 1/1 Running 0 2m3s app=web,pod-template-hash=bc7cc9f65 networkpolicy.yaml示例\napiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: test-network-policy namespace: default spec: podSelector: matchLabels: app: web policyTypes: - Ingress ingress: - from: - namespaceSelector: matchLabels: project: default - podSelector: matchLabels: run: client1 ports: - protocol: TCP port: 80 测试验证\n[root@k8s-node1 ~]# kubectl apply -f networkpolicy.yaml [root@k8s-node1 ~]# kubectl get networkpolicy [root@k8s-node1 ~]# kubectl get pods web-bc7cc9f65-hdhr2 -o jsonpath=\u0026#39;{.metadata.annotations.cni\\.projectcalico\\.org\\/podIP}\u0026#39; 10.244.169.169/32 [root@k8s-node1 ~]# kubectl exec -it client1 -- telnet 10.244.169.169 80 Connected to 10.244.169.169 [root@k8s-node1 ~]# kubectl exec -it client2 -- telnet 10.244.169.169 80 # 超时无法联通 [root@k8s-node1 ~]# kubectl delete -f networkpolicy.yaml 示例二：ns1命名空间下所有pod可以互相访问，也可以访问其他命名空间Pod，但其他命名空间不能访问ns1命名空间Pod。\n[root@k8s-node1 ~]# kubectl create ns ns1 [root@k8s-node1 ~]# kubectl run ns1-client1 --image=busybox -n ns1 -- sleep 36000 [root@k8s-node1 ~]# kubectl run ns1-client2 --image=busybox -n ns1 -- sleep 36000 [root@k8s-node1 ~]# kubectl get pods -n ns1 -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES ns1-client1 1/1 Running 0 78s 10.244.169.168 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ns1-client2 1/1 Running 0 70s 10.244.107.212 k8s-node3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; [root@k8s-node1 ~]# kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES client1 1/1 Running 0 51s 10.244.169.171 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; client2 1/1 Running 0 26m 10.244.107.238 k8s-node3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; networkpolicy.yaml\napiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: deny-from-other-namespaces namespace: ns1 spec: podSelector: {} # 置空表示默认所有Pod policyTypes: - Ingress ingress: - from: - podSelector: {} # 置空表示拒绝所有 验证\n[root@k8s-node1 ~]# kubectl apply -f networkpolicy.yaml [root@k8s-node1 ~]# kubectl get networkpolicy -n ns1 # ns1命名空间内pod可以互通 [root@k8s-node1 ~]# kubectl exec -it ns1-client1 -n ns1 -- ping 10.244.107.212 # ns1-client2 PING 10.244.107.212 (10.244.107.212): 56 data bytes 64 bytes from 10.244.107.212: seq=0 ttl=62 time=0.900 ms 64 bytes from 10.244.107.212: seq=1 ttl=62 time=0.651 ms # default命名空间的pod无法访问ns1命名空间的pod [root@k8s-node1 ~]# kubectl exec -it client1 -- ping 10.244.107.212 # ns1-client2 # ns1命名空间的pod可以正常访问default命名空间的pod [root@k8s-node1 ~]# kubectl exec -it ns1-client1 -n ns1 -- ping 10.244.169.171 # client1 PING 10.244.169.171 (10.244.169.171): 56 data bytes 64 bytes from 10.244.169.171: seq=0 ttl=63 time=0.119 ms 64 bytes from 10.244.169.171: seq=1 ttl=63 time=0.067 ms [root@k8s-node1 ~]# kubectl delete -f networkpolicy.yaml ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-rbac-networkpolicy/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 kubernetes安全框架 客户端要想访问K8s集群API Server，一般需要证书、Token或者用户名+密码；如果Pod访问，需要ServiceAccount K8S安全控制框架主","title":"kubernetes | RBAC鉴权和PodAcl"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\nservice 基本概念 service存在的意义\n服务发现：防止Pod失联\n负载均衡：定义一组Pod的访问策略\nservice通过label-selector关联pod\nservice的三种类型\nClusterIP：集群内部使用\n默认**，**分配一个稳定的IP地址，即VIP，只能在集群内部访问（同Namespace内的Pod）\nNodePort：对外暴露应用\n在每个节点上启用一个端口(30000-32767)来暴露服务，可以在集群外部访问。也会分配一个稳定内部集群IP地址。访问地址：[NodeIP]:[NodePort]\nLoadBalancer：对外暴露应用，适用公有云\n与NodePort类似，在每个节点上启用一个端口来暴露服务。除此之外，Kubernetes会请求底层云平台上的负载均衡器，将每个Node（[NodeIP]:[NodePort]）作为后端添加进去。\n示例\napiVersion: v1 kind: Service metadata: name: nginx labels: app: nginx spec: selector: app: nginx type: NodePort ports: - protocol: TCP port: 80 # service端口，内部访问端口 targetPort: 80 # 代理的业务端口 nodePort: 30002 # 内部访问端口映射到节点端口 --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.19 ports: - containerPort: 80 service代理模式 Iptables：\n灵活，功能强大\n规则遍历匹配和更新，呈线性时延\nIPVS：\n工作在内核态，有更好的性能\n调度算法丰富：rr，wrr，lc，wlc，ip hash\u0026hellip;\nk8s默认采用的代理模式是iptables，可以通过查看kube-proxy组件的日志可得\n[root@k8s-node1 ~]# kubectl logs kube-proxy-qqdq4 -n kube-system ...... I1005 00:27:19.907705 1 node.go:172] Successfully retrieved node IP: 1.1.1.2 I1005 00:27:19.907801 1 server_others.go:140] Detected node IP 1.1.1.2 W1005 00:27:19.907939 1 server_others.go:565] Unknown proxy mode \u0026#34;\u0026#34;, assuming iptables proxy I1005 00:27:20.845559 1 server_others.go:206] kube-proxy running in dual-stack mode, IPv4-primary I1005 00:27:20.845678 1 server_others.go:212] Using iptables Proxier. I1005 00:27:20.845803 1 server_others.go:219] creating dualStackProxier for iptables. ...... 创建一个nodeport类型的service，查看iptables规则\n[root@k8s-node1 ~]# kubectl get svc nginx NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx NodePort 10.109.98.33 \u0026lt;none\u0026gt; 80:30002/TCP 17m # SVC当前共关联三个POD [root@k8s-node1 ~]# kubectl get pod -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES nginx-7cf55fb7bb-5fjcn 1/1 Running 0 37m 10.244.169.136 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; nginx-7cf55fb7bb-bts6p 1/1 Running 0 37m 10.244.107.252 k8s-node3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; nginx-7cf55fb7bb-qm4vl 1/1 Running 0 37m 10.244.169.135 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; [root@k8s-node1 ~]# iptables-save |grep nginx |grep 30002 ...... # 流量转发到SVC链 -A KUBE-NODEPORTS -p tcp -m comment --comment \u0026#34;default/nginx\u0026#34; -m tcp --dport 30002 -j KUBE-SVC-2CMXP7HKUVJN7L6M ...... [root@k8s-node1 ~]# iptables-save |grep KUBE-SVC-2CMXP7HKUVJN7L6M ...... # ClusterIP相关 -A KUBE-SERVICES -d 10.109.98.33/32 -p tcp -m comment --comment \u0026#34;default/nginx cluster IP\u0026#34; -m tcp --dport 80 -j KUBE-SVC-2CMXP7HKUVJN7L6M ...... # 转发到具体POD链 -A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment \u0026#34;default/nginx\u0026#34; -m statistic --mode random --probability 0.33333333349 -j KUBE-SEP-ONLOYCYPTBL5FQH5 -A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment \u0026#34;default/nginx\u0026#34; -m statistic --mode random --probability 0.50000000000 -j KUBE-SEP-JABTJNSPARJARZOW -A KUBE-SVC-2CMXP7HKUVJN7L6M -m comment --comment \u0026#34;default/nginx\u0026#34; -j KUBE-SEP-TZBGLRHUI2CFM5CU # POD链中定义了转发到具体的POD地址， [root@k8s-node1 ~]# iptables-save |grep KUBE-SEP-ONLOYCYPTBL5FQH5 ...... -A KUBE-SEP-ONLOYCYPTBL5FQH5 -s 10.244.107.252/32 -m comment --comment \u0026#34;default/nginx\u0026#34; -j KUBE-MARK-MASQ -A KUBE-SEP-ONLOYCYPTBL5FQH5 -p tcp -m comment --comment \u0026#34;default/nginx\u0026#34; -m tcp -j DNAT --to-destination 10.244.107.252:80 ...... [root@k8s-node1 ~]# iptables-save |grep KUBE-SEP-JABTJNSPARJARZOW ...... -A KUBE-SEP-JABTJNSPARJARZOW -s 10.244.169.135/32 -m comment --comment \u0026#34;default/nginx\u0026#34; -j KUBE-MARK-MASQ -A KUBE-SEP-JABTJNSPARJARZOW -p tcp -m comment --comment \u0026#34;default/nginx\u0026#34; -m tcp -j DNAT --to-destination 10.244.169.135:80 ...... [root@k8s-node1 ~]# iptables-save |grep KUBE-SEP-TZBGLRHUI2CFM5CU ...... -A KUBE-SEP-TZBGLRHUI2CFM5CU -s 10.244.169.136/32 -m comment --comment \u0026#34;default/nginx\u0026#34; -j KUBE-MARK-MASQ -A KUBE-SEP-TZBGLRHUI2CFM5CU -p tcp -m comment --comment \u0026#34;default/nginx\u0026#34; -m tcp -j DNAT --to-destination 10.244.169.136:80 ...... ipvs模式（所有节点都要配置）\n[root@k8s-node1 ~]# yum install ipvsadm [root@k8s-node1 ~]# cat \u0026gt; /etc/sysconfig/modules/ipvs.modules \u0026lt;\u0026lt; EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF [root@k8s-node1 ~]# chmod 755 /etc/sysconfig/modules/ipvs.modules [root@k8s-node1 ~]# source /etc/sysconfig/modules/ipvs.modules # 修改mode [root@k8s-node1 ~]# kubectl edit configmap kube-proxy -n kube-system mode: \u0026#34;ipvs\u0026#34; ipvs: scheduler: \u0026#34;rr\u0026#34; #rr, wrr, lc, wlc, ip hash等 # 删除所有节点的kube-proxy，k8s会再自动拉起一个 [root@k8s-node1 ~]# kubectl delete pod kube-proxy-92rd4 -n kube-system [root@k8s-node1 ~]# kubectl delete pod kube-proxy-bgzhk -n kube-system [root@k8s-node1 ~]# kubectl delete pod kube-proxy-n57zw -n kube-system [root@k8s-node1 ~]# kubectl logs kube-proxy-245vq -n kube-system ...... I1005 05:42:48.379343 1 server_others.go:274] Using ipvs Proxier. ...... 查看iptables规则\n[root@k8s-node1 ~]# ipvsadm -L -n IP Virtual Server version 1.2.1 (size=4096) Prot LocalAddress:Port Scheduler Flags -\u0026gt; RemoteAddress:Port Forward Weight ActiveConn InActConn TCP 172.17.0.1:30002 rr -\u0026gt; 10.244.107.252:80 Masq 1 0 0 -\u0026gt; 10.244.169.135:80 Masq 1 0 0 -\u0026gt; 10.244.169.136:80 Masq 1 0 0 TCP 1.1.1.1:30002 rr -\u0026gt; 10.244.107.252:80 Masq 1 0 0 -\u0026gt; 10.244.169.135:80 Masq 1 0 0 -\u0026gt; 10.244.169.136:80 Masq 1 0 0 TCP 10.244.36.64:30002 rr -\u0026gt; 10.244.107.252:80 Masq 1 0 0 -\u0026gt; 10.244.169.135:80 Masq 1 0 0 -\u0026gt; 10.244.169.136:80 Masq 1 0 0 TCP 10.109.98.33:80 rr -\u0026gt; 10.244.107.252:80 Masq 1 0 0 -\u0026gt; 10.244.169.135:80 Masq 1 0 0 -\u0026gt; 10.244.169.136:80 Masq 1 0 0 Ingress NodePort的不足\n一个端口只能一个服务使用，端口需提前规划 只支持4层负载均衡 Ingress是什么？\nIngress 公开了从集群外部到集群内服务的HTTP和HTTPS路由。流量路由由Ingress资源上定义的规则控制。\n下面是一个将所有流量都发送到同一Service的简单Ingress示例：\nIngress Controller\nIngress管理的负载均衡器，为集群提供全局的负载均衡能力。\nIngress Contronler怎么工作的？\nIngress Contronler通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，应用到管理的Nginx服务，然后热加载生效。\n以此来达到Nginx负载均衡器配置及动态更新的问题\n使用流程：\n部署Ingress Controller\n创建Ingress规则\nIngress Contorller主流控制器：\ningress-nginx-controller: 官方维护的基于nginx的控制器\nTraefik： HTTP反向代理、负载均衡工具\nIstio：服务治理，控制入口流量\n这里使用官方维护的基于Nginx实现的，Github：https://github.com/kubernetes/ingress-nginx\n部署\n[root@k8s-node1 ~]# wget https://github.com/kubernetes/ingress-nginx/raw/controller-v1.1.0/deploy/static/provider/baremetal/deploy.yaml --no-check-certificate [root@k8s-node1 ~]# vim deploy.yaml kind: DaemonSet # 将原先的Deployment修改为DaemontSet，实现所有物理节点访问 hostNetwork: true # 新增hostNetwork将ingress-nginx-controller的端口直接暴露在宿主机上，不然还需要创建一个sevice用于暴露ingress-nginx-controller的端口 containers: - name: controller # 镜像地址 image: registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:v1.1.0 image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1 image: registry.cn-hangzhou.aliyuncs.com/google_containers/kube-webhook-certgen:v1.1.1 [root@k8s-node1 ~]# kubectl apply -f deploy.yaml # 只有两个节点上有ingress-nginx-controller控制器，因为master节点有污点 [root@k8s-node1 ~]# kubectl get pods -n ingress-nginx -o wide | grep controller ingress-nginx-controller-h6hl5 1/1 Running 0 2m36s 1.1.1.3 k8s-node3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; ingress-nginx-controller-rwbjx 1/1 Running 0 2m36s 1.1.1.2 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; # 如果出现内部访问报错：failed calling webhook \u0026#34;validate.nginx.ingress.kubernetes.io\u0026#34; [root@k8s-node1 ~]# kubectl get ValidatingWebhookConfiguration [root@k8s-node1 ~]# kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission 示例（http）\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: ingress-nginx annotations: kubernetes.io/ingress.class: nginx spec: rules: - host: foo.bar.com http: paths: - path: / pathType: Prefix backend: service: name: nginx port: number: 80 curl访问\n[root@k8s-node1 ~]# curl -I http://1.1.1.2 -H \u0026#34;Host: foo.bar.com\u0026#34; HTTP/1.1 200 OK [root@k8s-node1 ~]# curl -I http://1.1.1.3 -H \u0026#34;Host: foo.bar.com\u0026#34; HTTP/1.1 200 OK ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-service-ingress/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 service 基本概念 service存在的意义 服务发现：防止Pod失联 负载均衡：定义一组Pod的访问策略 service通过label-selector关联pod service的三种类型 Clust","title":"kubernetes | service \u0026 ingress"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\n为什么需要数据卷\n启动时需要的初始数据，录入配置文件\n启动过程中产生的临时数据，该临时数据需要多个容器间共享\n启动过程中产生的持久化数据，例如mysql的data\n数据卷概述\nkubernetes中的volume提供了在容器中挂载外部存储的能力 Pod需要设置卷来源（spec.volume）和挂载点（spec.containers.volumeMounts）两个信息后才可以使用相应的Volume 常用的数据卷：\n本地（hostPath，emptyDir）\n网络（NFS，Ceph，GlusterFS）\n公有云（AWS EBS）\nK8S资源（configmap，secret）\nemptyDir（临时存储卷） emptyDir卷：是一个临时存储卷，与Pod生命周期绑定一起，如果Pod删除了卷也会被删除。\n应用场景：Pod中容器之间数据共享\nemptyDir的实际存储路径在pod所在节点的/var/lib/kubelet/pods/\u0026lt;pod-id\u0026gt;/volumes/kubernetes.io~empty-dir目录下\n查看pod的uid\nkubectl get pod \u0026lt;pod-name\u0026gt; -o jsonpath=\u0026#39;{.metadata.uid}\u0026#39; 示例yaml\napiVersion: v1 kind: Pod metadata: name: pod-emptydir spec: containers: - name: write image: centos command: [\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;for i in {1..100}; do echo $i \u0026gt;\u0026gt; /data/hello; sleep 1; done\u0026#34;] volumeMounts: - name: data mountPath: /data - name: read image: centos command: [\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;tail -f /data/hello\u0026#34;] volumeMounts: - name: data mountPath: /data volumes: - name: data emptyDir: {} hostPath（节点存储卷） hostPath卷：挂载Node文件系统（Pod所在节点）上文件或者目录到Pod中的容器。\n应用场景：Pod中容器需要访问宿主机文件\n示例yaml\napiVersion: v1 kind: Pod metadata: name: pod-hostpath spec: containers: - name: busybox image: busybox args: - /bin/sh - -c - sleep 36000 volumeMounts: - name: data mountPath: /data volumes: - name: data hostPath: path: /tmp type: Directory NFS（网络存储卷） NFS卷提供对NFS挂载支持，可以自动将NFS共享路径挂载到Pod中\n配置nfs服务端，nfs-utils包每个节点都需安装\nyum install nfs-utils mkdir -p /ifs/kubernetes echo \u0026#34;/ifs/kubernetes *(rw,no_root_squash)\u0026#34; \u0026gt;\u0026gt; /etc/exports systemctl start nfs \u0026amp;\u0026amp; systemctl enable nfs 客户端测试\n[root@k8s-node1 ~]# mount -t nfs k8s-node1:/ifs/kubernetes /mnt/ [root@k8s-node1 ~]# df -hT | grep k8s-node1 k8s-node1:/ifs/kubernetes nfs4 29G 4.8G 25G 17% /mnt 示例yaml\napiVersion: v1 kind: Service metadata: name: nginx-nfs labels: app: nginx-nfs spec: selector: app: nginx-nfs ports: - protocol: TCP port: 80 targetPort: 80 nodePort: 30003 type: NodePort --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-nfs labels: app: nginx-nfs spec: replicas: 3 selector: matchLabels: app: nginx-nfs template: metadata: labels: app: nginx-nfs spec: containers: - name: nginx-nfs image: nginx:1.14.2 ports: - containerPort: 80 volumeMounts: - name: www mountPath: /usr/share/nginx/html/ volumes: - name: www nfs: server: k8s-node1 path: /ifs/kubernetes/ 验证\n[root@k8s-node1 ~]# echo \u0026#34;The NFS server is successfully connected.\u0026#34; \u0026gt; /ifs/kubernetes/index.html [root@k8s-node1 ~]# kubectl get svc nginx-nfs NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx-nfs NodePort 10.105.95.228 \u0026lt;none\u0026gt; 80:30003/TCP 2m41s [root@k8s-node1 ~]# curl 10.105.95.228 The NFS server is successfully connected. pv和pvc（持久存储卷） 基础概念 PersistentVolume（PV）：对存储资源创建和使用的抽象，使得存储作为集群中的资源管理\nPersistentVolumeClaim（PVC）：让用户不需要关心具体的Volume实现细节\npvc如何匹配到pv\n存储空间的请求 匹配最接近的pv，如果没有满足条件的pv，则pod处于pending状态\n访问模式的设置 存储空间字段能否限制实际可用容量\n不能，存储空间字段只用于匹配到pv，具体可用容量取决于网络存储 pv生命周期 AccessModes（访问模式）：\nAccessModes 是用来对 PV 进行访问模式的设置，用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：\nReadWriteOnce（RWO）：读写权限，但是只能被单个POD挂载\nReadOnlyMany（ROX）：只读权限，可以被多个POD挂载\nReadWriteMany（RWX）：读写权限，可以被多个POD挂载\nRECLAIM POLICY（回收策略）：\n目前 PV 支持的策略有三种：\nRetain（保留）： 保留数据，需要管理员手工清理数据\nRecycle（回收）：清除 PV 中的数据，效果相当于执行 rm -rf /ifs/kuberneres/*\nDelete（删除）：与 PV 相连的后端存储同时删除\nSTATUS（状态）：\n一个 PV 的生命周期中，可能会处于4中不同的阶段：\nAvailable（可用）：表示可用状态，还未被任何 PVC 绑定\nBound（已绑定）：表示 PV 已经被 PVC 绑定\nReleased（已释放）：PVC 被删除，但是资源还未被集群重新声明\nFailed（失败）： 表示该 PV 的自动回收失败\npv示例\napiVersion: v1 kind: PersistentVolume metadata: name: my-pv spec: capacity: storage: 5Gi accessModes: - ReadWriteMany nfs: server: k8s-node1 path: /ifs/kubernetes pvc示例\napiVersion: v1 kind: PersistentVolumeClaim metadata: name: my-pvc spec: accessModes: - ReadWriteMany resources: requests: storage: 5Gi deployment示例\napiVersion: v1 kind: Service metadata: name: nginx-pvc labels: app: nginx-pvc spec: selector: app: nginx-pvc ports: - protocol: TCP port: 80 targetPort: 80 --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-pvc labels: app: nginx-pvc spec: replicas: 3 selector: matchLabels: app: nginx-pvc template: metadata: labels: app: nginx-pvc spec: containers: - name: nginx-pvc image: nginx:1.14.2 ports: - containerPort: 80 volumeMounts: - name: www-pvc mountPath: /usr/share/nginx/html/ volumes: - name: www-pvc persistentVolumeClaim: claimName: my-pvc 验证\n[root@k8s-node1 ~]# echo \u0026#34;pvc for NFS is successful\u0026#34; \u0026gt; /ifs/kubernetes/index.html [root@k8s-node1 ~]# kubectl get svc nginx-pvc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx-pvc ClusterIP 10.97.241.64 \u0026lt;none\u0026gt; 80/TCP 3m35s [root@k8s-node1 ~]# curl 10.97.241.64 pvc for NFS is successful pv动态供给 之前的PV使用方式称为静态供给，需要K8s运维工程师提前创建一堆PV，供开发者使用\n因此，K8s开始支持PV动态供给，使用StorageClass对象实现。\n查看k8s原生支持的共享存储：https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner\n基于NFS实现自动创建pv插件\n自动创建的pv挂载路径为\u0026lt;nfs-path\u0026gt;/\u0026lt;namespace\u0026gt;-\u0026lt;pvc-name\u0026gt;-\u0026lt;pv-name\u0026gt;\npvc-name：默认情况下为yaml中自定义的pvc-name，使用statefulset控制器时pvc的名字为\u0026lt;volumeClaimTemplates-name\u0026gt;-\u0026lt;pod-name\u0026gt; pv-name：pv的名字为pvc-\u0026lt;pvc-uid\u0026gt; k8s-1.20版本后默认禁止使用selfLink，需要打开一下\n修改k8s的apiserver参数\n[root@k8s-node1 ~]# vi /etc/kubernetes/manifests/kube-apiserver.yaml apiVersion: v1 ··· - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key - --feature-gates=RemoveSelfLink=false # 添加这个配置 部署NFS插件 下载插件\ngit clone https://github.com/kubernetes-incubator/external-storage cd external-storage/nfs-client/deploy deployment.yaml\n- name: NFS_SERVER value: 1.1.1.1 # 修改ip地址，nfs服务器 volumes: - name: nfs-client-root nfs: server: 1.1.1.1 # 修改ip地址，nfs服务器 path: /ifs/kubernetes class.yaml\napiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: managed-nfs-storage provisioner: fuseim.pri/ifs parameters: archiveOnDelete: \u0026#34;true\u0026#34; # 默认是flase，设置为true可以使pv自动删除后保留数据，数据挂载目录会重命名为archived-\u0026lt;name\u0026gt; 部署插件\n# 授权访问apiserver kubectl apply -f rbac.yaml # 部署插件 kubectl apply -f deployment.yaml # 创建存储类 kubectl apply -f class.yaml # 查看创建的存储类 kubectl get storageclasses | sc 示例 部署使用自动pv的pod（deployment）\napiVersion: apps/v1 kind: Deployment metadata: name: nginx-auto-pv labels: app: nginx-auto-pv spec: replicas: 3 selector: matchLabels: app: nginx-auto-pv template: metadata: labels: app: nginx-auto-pv spec: containers: - name: nginx-auto-pv image: nginx:1.14.2 ports: - containerPort: 80 volumeMounts: - name: www mountPath: /usr/share/nginx/html/ volumes: - name: www persistentVolumeClaim: claimName: pvc-auto --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc-auto spec: storageClassName: \u0026#34;managed-nfs-storage\u0026#34; accessModes: - ReadWriteOnce resources: requests: storage: 2Gi 测试验证\n[root@k8s-node1 ~]# kubectl apply -f nginx-auto-pv.yaml [root@k8s-node1 ~]# kubectl get pods nginx-auto-pv-69ccf66bfd-2xx6q 1/1 Running 0 12m nginx-auto-pv-69ccf66bfd-fdlbt 1/1 Running 0 12m nginx-auto-pv-69ccf66bfd-v92nm 1/1 Running 0 12m [root@k8s-node1 ~]# [root@k8s-node1 ~]# kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE pvc-auto Bound pvc-0278b4c6-9fd9-4c07-a3f3-fe5ba47a0f1c 2Gi RWO managed-nfs-storage 13m [root@k8s-node1 ~]# [root@k8s-node1 ~]# kubectl get pv NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE pvc-0278b4c6-9fd9-4c07-a3f3-fe5ba47a0f1c 2Gi RWO Delete Bound default/pvc-auto managed-nfs-storage 6m20s [root@k8s-node1 ~]# [root@k8s-node1 ~]# ls -l /ifs/kubernetes/ drwxrwxrwx 2 root root 6 Oct 6 01:08 default-pvc-auto-pvc-0278b4c6-9fd9-4c07-a3f3-fe5ba47a0f1c StatefulSet控制器 StatefulSet应用场景：分布式应用、数据库集群\n部署有状态应用\n解决Pod独立生命周期，保持Pod启动顺序和唯一性\n稳定，唯一的网络标识符，持久存储\n有序，优雅的部署和扩展、删除和终止\n有序，滚动更新\nStatefulSet控制器的优势\n稳定的网络ID 使用Headless Service（相比普通Service只是将spec.clusterIP定义为None）来维护Pod网络身份。并且添加serviceName: “nginx”字段指定StatefulSet控制器要使用这个Headless Service。\nDNS解析名称：\u0026lt;statefulsetName-index\u0026gt;.\u0026lt;service\u0026gt;\u0026lt;namespace\u0026gt;.svc.cluster.local\n稳定的存储 StatefulSet的存储卷使用VolumeClaimTemplate创建，称为卷申请模板，当StatefulSet使用VolumeClaimTemplate创建一个PersistentVolume时，同样也会为每个Pod分配并创建一个编号的PVC。该PVC和PV不会随着StatefulSet的删除而删除\n示例yaml\napiVersion: v1 kind: Service metadata: name: statefulset-nginx labels: app: statefulset-nginx spec: ports: - port: 80 name: web clusterIP: None selector: app: statefulset-nginx --- apiVersion: apps/v1 kind: StatefulSet metadata: name: statefulset-nginx spec: serviceName: \u0026#34;statefulset-nginx\u0026#34; replicas: 2 selector: matchLabels: app: statefulset-nginx template: metadata: labels: app: statefulset-nginx spec: containers: - name: statefulset-nginx image: nginx:1.19 ports: - containerPort: 80 name: web volumeMounts: - name: www mountPath: /usr/share/nginx/html volumeClaimTemplates: - metadata: name: www spec: accessModes: [ \u0026#34;ReadWriteOnce\u0026#34; ] storageClassName: \u0026#34;managed-nfs-storage\u0026#34; resources: requests: storage: 1Gi 测试验证\n稳定的存储 可以看到与deployment不同，statefulset中的每个pod都分配到了独立的pv，且重启pod后存储对应关系不变\n[root@k8s-node1 ~]# kubectl get pod,pvc,pv | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39; # POD NAME pod/statefulset-nginx-0 pod/statefulset-nginx-1 # PVC NAME persistentvolumeclaim/www-statefulset-nginx-0 persistentvolumeclaim/www-statefulset-nginx-1 # PV NAME persistentvolume/pvc-098ab1c2-fd72-45d2-86e5-387950f05278 persistentvolume/pvc-b06ce47f-2839-48e7-9999-3cbb8978494a [root@k8s-node1 ~]# ls /ifs/kubernetes/ default-www-statefulset-nginx-0-pvc-098ab1c2-fd72-45d2-86e5-387950f05278 default-www-statefulset-nginx-1-pvc-b06ce47f-2839-48e7-9999-3cbb8978494a 稳定的网络ID 手动删除pod后除了pod的ip会变动，主机名和dns解析都正常\n# POD名字固定 [root@k8s-node1 ~]# kubectl get pods -l app=statefulset-nginx NAME READY STATUS RESTARTS AGE statefulset-nginx-0 1/1 Running 0 5m18s statefulset-nginx-1 1/1 Running 0 5m17s # 主机名固定 [root@k8s-node1 ~]# for i in 0 1; do kubectl exec \u0026#34;statefulset-nginx-$i\u0026#34; -- sh -c \u0026#39;hostname\u0026#39;; done statefulset-nginx-0 statefulset-nginx-1 # dns解析固定 [root@k8s-node1 ~]# kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm nslookup statefulset-nginx Server: 10.96.0.10 Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local Name: statefulset-nginx Address 1: 10.244.169.152 statefulset-nginx-1.statefulset-nginx.default.svc.cluster.local Address 2: 10.244.107.222 statefulset-nginx-0.statefulset-nginx.default.svc.cluster.local ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-storage/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 为什么需要数据卷 启动时需要的初始数据，录入配置文件 启动过程中产生的临时数据，该临时数据需要多个容器间共享 启动过程中产生的持久化数据，例如mysql的data 数据卷概述 kubernet","title":"kubernetes | 存储"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\n滚动升级 滚动升级的实现机制\n两个replicaset控制器分别控制旧版本的pod和新版本pod，replicaset2启动一个新版版本pod，相应的replicaset1停止一个旧版本pod，从而实现滚动升级。在这过程中，无法保证业务流量完全不丢失。\n升级\nkubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N [options] # 示例 kubectl set image deployment/nginx-deployment nginx=nginx:1.15 --record=true # --record=true 表示将升级的命令记录到升级记录中 回滚\n# 上次升级状态 kubectl rollout status deployment/nginx-deployment # 升级记录 kubectl rollout history deployment/nginx-deployment # 回滚至上个版本 kubectl rollout undo deployment/nginx-deployment # 回滚至指定版本 kubectl rollout undo deployment/nginx-deployment --to-revision=2 自动伸缩 手动扩容\nkubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME) [options] # 示例 kubectl scale deployment nginx-deployment --replicas=10 自动扩容\nHPA：pod水平扩容，k8s中的一个api资源，使用autoscale时会创建一个hpa资源\n实现自动扩容还需满足两个条件：\n运行了metric-server\nHPA对应的pod设置了request资源\n示例：\nmetrics-server部署\nkubectl get pods -n kube-system | grep metrics-server pod中设置request资源\ncontainers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 resources: requests: cpu: 0.3 创建hpa\nkubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU] [options] # 基于cpu指标进行扩容 kubectl autoscale deployment nginx-deployment --min=3 --max=10 --cpu-percent=10 # 查看hpa kubectl get hpa # replicaset控制器记录了pod的详细伸缩记录 kubectl get rs kubectl describe rs nginx-deployment-54fdcc5676 ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-auto-scale/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 滚动升级 滚动升级的实现机制 两个replicaset控制器分别控制旧版本的pod和新版本pod，replicaset2启动一个新版版本pod，相应的replicaset1停止一个旧版本","title":"kubernetes | 滚动升级和自动伸缩"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\ncontrollers作用：\n管理pod对象 使用标签与pod关联 负责滚动更新、伸缩、副本管理、维持pod状态等 daemonset ingress statefulset replicaset ReplicaSet：副本集\n协助Deployment做事\nPod副本数量管理，不断对比当前Pod数量与期望Pod数量\nDeployment每次发布都会创建一个RS作为记录，用于实现回滚\ndeployment deployment用于网站、API、微服务等，功能特性：\n管理pod和replicaset 具有上线部署、副本设定、滚动升级、回滚等功能 提供声明式更新，例如只更新一个新的image 示例\napiVersion: apps/v1 kind: Deployment metadata: name: nginx labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.19 ports: - containerPort: 80 ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-controllers/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 controllers作用： 管理pod对象 使用标签与pod关联 负责滚动更新、伸缩、副本管理、维持pod状态等 daemonset ingress statefulset replicaset ReplicaSet：副本集 协助Deployment做事 Pod副本","title":"kubernetes | 控制器"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\nkubelet logs命令的流程\nkubectl logs ----请求----\u0026gt; apiserver ----请求----\u0026gt; kubelet ----读取----\u0026gt; container日志 k8s日志包含两大类：\nk8s系统的组件日志\nk8s集群中部署的应用程序的日志\n标准输出\n日志文件\n组件日志 journalctl -u kubelet kubectl logs kube-proxy -n kube-system /var/log/messages 应用日志 标准输出 实时查看pod标准输出日志\nkubectl logs -f \u0026lt;podname\u0026gt; kubectl logs -f \u0026lt;podname\u0026gt; -c \u0026lt;containername\u0026gt; 标准输出文件的路径\n/var/lib/docker/containers/\u0026lt;container-id\u0026gt;/\u0026lt;container-id\u0026gt;-json.log 日志文件 比如nginx应用的日志一般保存在accesss.log和error.log日志中，这些日志是不会输出到标准输出的，可以采用如下两种方式进行采集\nemptyDir数据卷 创建pod时挂载emptyDIr类型的数据卷，用以持久化自定义的日志文件\n需要先找到pod分配的节点\nKubectl get pods -o wide 再查看pod的id\ndocker ps | grep pod-name pod日志文件路径\n/var/lib/kubelet/pods/\u0026lt;pod-id\u0026gt;/volumes/kubernetes.io~empty-dir 示例\napiVersion: v1 kind: Pod metadata: name: web2 spec: containers: - name: web image: lizhenliang/nginx-php volumeMounts: - name: logs mountPath: /usr/local/nginx/logs volumes: - name: logs emptyDir: {} sidebar边车容器 通过创建边车容器实现将应用原本的日志文件输出到标准输出\n示例：\napiVersion: v1 kind: Pod metadata: name: sidebar spec: containers: - name: web image: lizhenliang/nginx-php volumeMounts: - name: logs mountPath: /usr/local/nginx/logs - name: log image: busybox args: [/bin/sh, -c, \u0026#39;tail -f /opt/access.log\u0026#39;] volumeMounts: - name: logs mountPath: /opt volumes: - name: logs emptyDir: {} ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-logs/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 kubelet logs命令的流程 kubectl logs ----请求----\u0026gt; apiserver ----请求----\u0026gt; kubelet ----读取----\u0026gt; container日志 k8s日志包含两大类： k8s系统的组件日志 k8s","title":"kubernetes | 日志收集分析"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\n创建pod的工作流程 kubectl run nginx \u0026ndash;image=nginx kubectl将创建pod的请求发送到apiserver apiserver将请求信息写入etcd apiserver通知scheduler，收到请求信息后根据调度算法将pod分配到合适节点 scheduler给pod标记调度结果，并返回给apiserver apiserver收到后写入etcd 对应节点的kubelet收到创建pod的事件，从apiserver获取到pod的相关信息 kubelet调用docker api创建pod所需的容器 创建完成之后将pod状态汇报给apiserver apiserver将收到的pod状态写入apiserver kubectl get pods即可收到相关信息 资源限制对pod调度的影响 容器资源限制：\nresources.limits.cpu\nresources.limits.memory\n容器使用的最小资源需求，并不是实际占用，是预留资源：\nresources.requests.cpu\nresources.requests.memory\napiVersion: v1 kind: Pod metadata: name: nginx spec: containers: - name: web image: nginx resources: requests: memory: \u0026#34;64Mi\u0026#34; cpu: \u0026#34;250m\u0026#34; #cpu单位也可以写浮点数，例如0.25=250m，代表四分之一核cpu limits: memory: \u0026#34;128Mi\u0026#34; cpu: \u0026#34;500m\u0026#34; nodeSelector nodeSelector用于将Pod调度到匹配Label的Node上，如果没有匹配的标签会调度失败。\n先创建pod后打标签，起始出于pending状态，打好标签后，pod会正常分配\n给节点打标签：\nkubectl label nodes [node] key=value kubectl label nodes [node] key- # 示例 kubectl label nodes k8s-node1 disktype=ssd kubectl label nodes k8s-node1 disktype- yaml\napiVersion: v1 kind: Pod metadata: name: pod-nodeselector spec: containers: - name: nginx image: nginx:1.19 nodeSelector: disktype: \u0026#34;ssd\u0026#34; nodeAffinity nodeAffinity：节点亲和类似于nodeSelector，可以根据节点上的标签来约束Pod可以调度到哪些节点。\n相比nodeSelector：\n匹配有更多的逻辑组合，不只是字符串的完全相等\n调度分为软策略和硬策略，而不是硬性要求\n硬（required）：必须满足 软（preferred）：尝试满足，但不保证 操作符：In、NotIn、Exists、DoesNotExist、Gt、Lt\n先创建pod后打标签，起始出于pending状态，打好标签后，pod会正常分配\n示例\napiVersion: v1 kind: Pod metadata: name: pod-nodeaffinity spec: containers: - name: with-node-affinity image: nignx:1.19 affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: # 硬策略 nodeSelectorTerms: - matchExpressions: - key: disktype operator: In values: - ssd preferredDuringSchedulingIgnoredDuringExecution: # 软策略 - weight: 1 preference: matchExpressions: - key: disktype operator: In values: - ssd Taint (污点) Taints：避免Pod调度到特定Node上\n应用场景：\n专用节点，例如配备了特殊硬件的节点\n基于Taint的驱逐\n设置污点：\nkubectl taint node [node] key=value:[effect] 其中[effect]可取值： - NoSchedule ：一定不能被调度。 - PreferNoSchedule：尽量不要调度。 - NoExecute：不仅不会调度，还会驱逐Node上已有的Pod。 去掉污点：\nkubectl taint node [node] key:[effect]- 示例\n[root@k8s-node1 ~]# kubectl label node k8s-node2 disktype=ssd node/k8s-node2 labeled [root@k8s-node1 ~]# kubectl describe node k8s-node2 | grep Taint Taints: disktype=ssd:NoSchedule Tolerations（污点容忍）\n允许Pod调度到持有Taints的Node上，但不是绝对分配到指定的标签，搭配nodeSelector或者nodeAffinity使用，实现将pod分配到特定污点的节点上\n示例\n[root@k8s-node1 ~]# kubectl label node k8s-node2 disktype=ssd node/k8s-node2 labeled [root@k8s-node1 ~]# kubectl describe node k8s-node2 | grep Taint Taints: disktype=ssd:NoSchedule [root@k8s-node1 ~]# kubectl apply -f pod-tolerations.yaml [root@k8s-node1 ~]# kubectl get pods pod-tolerations -o wide pod-tolerations 1/1 Running 0 13s 10.244.169.183 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; yaml\napiVersion: v1 kind: Pod metadata: name: pod-tolerations spec: containers: - name: nginx image: nginx:1.19 nodeSelector: disktype: \u0026#34;ssd\u0026#34; tolerations: - key: \u0026#34;disktype\u0026#34; operator: \u0026#34;Equal\u0026#34; value: \u0026#34;ssd\u0026#34; effect: \u0026#34;NoSchedule\u0026#34; nodeName 指定节点名称，用于将Pod调度到指定的Node上，不经过调度器scheduler，所以无视污点\n示例\n[root@k8s-node1 ~]# kubectl describe node k8s-node2| grep Taint Taints: disktype=ssd:NoSchedule [root@k8s-node1 ~]# kubectl apply -f pod-nodename.yaml pod/pod-nodename created [root@k8s-node1 ~]# kubectl get pod pod-nodename -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod-nodename 1/1 Running 0 27s 10.244.169.184 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; yaml\napiVersion: v1 kind: Pod metadata: name: pod-nodename spec: containers: - name: nginx image: nginx nodeName: k8s-node2 DaemonSet控制器 DaemonSet功能：\n在每一个Node上运行一个Pod\n新加入的Node也同样会自动运行一个Pod\n应用场景：网络插件、监控Agent、日志Agent，比如k8s的calico-node和kube-proxy组件\n示例\n[root@k8s-node1 ~]# kubectl apply -f daemonset-filebeat.yaml [root@k8s-node1 ~]# kubectl get pods -n kube-system -o wide |grep filebeat filebeat-2c6p4 1/1 Running 0 90s 10.244.107.246 k8s-node3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; filebeat-4ffcx 1/1 Running 0 90s 10.244.36.65 k8s-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; filebeat-h7959 1/1 Running 0 90s 10.244.169.186 k8s-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; yaml\napiVersion: apps/v1 kind: DaemonSet metadata: name: filebeat namespace: kube-system spec: selector: matchLabels: name: filebeat template: metadata: labels: name: filebeat spec: containers: - name: log image: elastic/filebeat:7.3.2 volumeMounts: - mountPath: /log/ name: log volumes: - name: log hostPath: path: /var/lib/docker/containers/ type: Directory tolerations: - key: \u0026#34;node-role.kubernetes.io/master\u0026#34; operator: \u0026#34;Exists\u0026#34; effect: \u0026#34;NoSchedule\u0026#34; ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-scheduler/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 创建pod的工作流程 kubectl run nginx \u0026ndash;image=nginx kubectl将创建pod的请求发送到apiserver apiserver将请求信息写入etcd apiserver通知scheduler，收到请求信息后根","title":"kubernetes | 调度"},{"content":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\n基本概念 最小部署单元\n一组容器的集合\n一个Pod中的容器共享网络命名空间\nPod是短暂的\n存在意义 Pod为亲密性应用而存在。\n亲密性应用场景：\n两个应用之间发生文件交互\n两个应用需要通过127.0.0.1或者socket通信（典型组合：nginx+php）\n两个应用需要发生频繁的调用\n容器分类 Infrastructure Container：基础容器，维护整个Pod网络空间\nInitContainers：初始化容器，先于业务容器开始执行\nContainers：业务容器，并行启动\nInfrastructure Container\npod中总会多一个pause容器，这个容器就是实现将pod中的所有容器的网络命名空间进行统一，a容器在localhost或者127.0.0.1的某个端口提供了服务，b容器访问localhost或者127.0.0.1加端口也可以访问到\nInit container：\n基本支持所有普通容器特征\n优先普通容器执行\n应用场景：\n控制普通容器启动，初始容器完成后才会启动业务容器\n初始化配置，例如下载应用配置文件、注册信息等\n示例\napiVersion: v1 kind: Pod metadata: name: init-demo spec: containers: - name: nginx image: nginx ports: - containerPort: 80 volumeMounts: - name: workdir mountPath: /usr/share/nginx/html initContainers: - name: install image: busybox command: - wget - \u0026#34;-O\u0026#34; - \u0026#34;/work-dir/index.html\u0026#34; - http://www.baidu.com/index.html volumeMounts: - name: workdir mountPath: \u0026#34;/work-dir\u0026#34; dnsPolicy: Default volumes: - name: workdir emptyDir: {} 静态pod 静态Pod特点：\nPod由特定节点上的kubelet管理\n不能使用控制器\nPod名称标识当前节点名称\n在kubelet配置文件启用静态Pod：\nvi /var/lib/kubelet/config.yaml ... staticPodPath: /etc/kubernetes/manifests ... 将部署的pod yaml放到该目录会由kubelet自动创建\n重启策略 Always：当容器终止退出后，总是重启容器，默认策略。\nOnFailure：当容器异常退出（退出状态码非0）时，才重启容器。\nNever：当容器终止退出，从不重启容器。\n健康检查 健康检查有以下两种类型：\nlivenessProbe（存活检查）：如果检查失败，将杀死容器，根据Pod的restartPolicy来操作。\nreadinessProbe（就绪检查）：如果检查失败，Kubernetes会把Pod从service endpoints中剔除。\n支持以下三种检查方法：\nhttpGet：发送HTTP请求，返回200-400范围状态码为成功。\nexec：执行Shell命令返回状态码是0为成功。\ntcpSocket：发起TCP Socket建立成功。\n示例\napiVersion: v1 kind: Pod metadata: labels: test: liveness name: liveness-exec spec: containers: - name: liveness image: busybox args: - /bin/sh - -c - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 600 livenessProbe: exec: command: - cat - /tmp/healthy initialDelaySeconds: 5 periodSeconds: 5 ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-pod/","summary":"前言 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0 基本概念 最小部署单元 一组容器的集合 一个Pod中的容器共享网络命名空间 Pod是短暂的 存在意义 Pod为亲密性应用而存在。 亲密性应用场景： 两个应用之间发生文件交互 两个应用需要通过127.0","title":"kubernetes | pod"},{"content":"kubectl命令的自动补全\nyum install bash-completion source /usr/share/bash-completion/bash_completion source \u0026lt;(kubectl completion bash) 用于控制是否优先本地寻找镜像\nimagePullPolicy: IfNotPresent 常见报错 1.1 NodeNotReady 1.2 Image garbage collection failed once 参考地址\n报错：\n# kubectl describe node k8s-node01 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Starting 11m kubelet Starting kubelet. Normal NodeHasSufficientMemory 11m kubelet Node k8s-node01 status is now: NodeHasSufficientMemory Normal NodeHasNoDiskPressure 11m kubelet Node k8s-node01 status is now: NodeHasNoDiskPressure Normal NodeHasSufficientPID 11m kubelet Node k8s-node01 status is now: NodeHasSufficientPID Normal NodeAllocatableEnforced 11m kubelet Updated Node Allocatable limit across pods # journalctl -u kubelet | grep garbage Mar 06 09:50:33 k8s-node01 kubelet[45471]: E0306 09:50:33.106476 45471 kubelet.go:1343] \u0026#34;Image garbage collection failed once. Stats initialization may not have completed yet\u0026#34; err=\u0026#34;failed to get imageFs info: unable to find data in memory cache\u0026#34; 解决：\n未部署CNI组件\ndocker镜像或容器未能正确删除导致的\ndocker system prune systemctl stop kubelet systemctl stop docker systemctl start docker systemctl start kubelet kubectl命令 一些常用命令\n# 查看某个资源的详细信息 kubectl describe \u0026lt;type\u0026gt; \u0026lt;name\u0026gt; -n \u0026lt;namespace\u0026gt; # 查看pod的日志 kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; # 查看当前支持的api版本 kubectl api-versions kubectl get # 查看所有支持的资源 kubectl api-resources # 查看集群健康状态 kubectl get cs # 查看service资源 kubectl get svc/services # 查看service映射的pod的端口和ip kubectl get cp/endpoints kubectl get ns/namespace # 查看pod kubectl get pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; -w/--watch: # 实时更新，类似tail的-f选项 -o wide: # 查看更为详细的信息，比如ip和分配的节点 -o jsonpath=\u0026#39;{.metadata.uid}\u0026#39; # 查看pod的id kubectl create kubectl create \u0026lt;resource\u0026gt; [Options] --dry-run=client: 仅尝试运行，不实际运行 -o, --output=\u0026#39;\u0026#39;: 输出为指定的格式 namespace k8s与docker的namespace不同\ndocker中的namespace用于容器间的资源隔离\nk8s中的namespace用于\nk8s的抽象资源间的资源隔离，比如pods、控制器、service等\n资源隔离后，对这一组资源进行权限控制\n创建命名空间及一系列资源\n[root@k8s-node1 ~]# kubectl create namespace test namespace/test created [root@k8s-node1 ~]# kubectl create deployment my-dep --image=lizhenliang/java-demo --replicas=3 -n test deployment.apps/my-dep created [root@k8s-node1 ~]# kubectl expose deployment my-dep --port=80 --target-port=8080 --type=NodePort -n test service/my-dep exposed [root@k8s-node1 ~]# kubectl get pods,deployment,svc -n test NAME READY STATUS RESTARTS AGE pod/my-dep-5f8dfc8c78-7w5nz 1/1 Running 0 41s pod/my-dep-5f8dfc8c78-gt65r 1/1 Running 0 41s pod/my-dep-5f8dfc8c78-n4vjd 1/1 Running 0 41s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/my-dep 3/3 3 3 41s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/my-dep NodePort 10.110.205.138 \u0026lt;none\u0026gt; 80:31890/TCP 17s yaml编写 通过创建资源获取yaml\nkubectl create deployment web --image=nginx:1.19 --dry-run=client -o yaml \u0026gt; deploy.yaml 通过已有资源获取yaml\nkubectl get deployment nginx-deployment -o yaml \u0026gt; deploy2.yaml 查看api中的资源及解释\nkubectl explain pods.spec.container kubectl explain deployment yaml报错排查\nerror: error parsing pod-configmap.yaml: error converting YAML to JSON: yaml: line 19: did not find expected \u0026#39;-\u0026#39; indicator 解决\n由于yaml文件列表对齐不统一导致的\nyaml文件格式要对齐，同一级别的对象要放在同一列，几个空格不重要，不要用tab制表符\n# 格式1 ports: - port: 80 # 格式2 ports: - port: 80 ","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes/","summary":"kubectl命令的自动补全 yum install bash-completion source /usr/share/bash-completion/bash_completion source \u0026lt;(kubectl completion bash) 用于控制是否优先本地寻找镜像 imagePullPolicy: IfNotPresent 常见报错 1.1 NodeNotReady 1.2 Image garbage collection failed once 参考地址 报错： # kubectl describe node k8s-node01 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Starting 11m kubelet Starting kubelet. Normal NodeHasSufficientMemory 11m kubelet Node k8s-node01 status is now: NodeHasSufficientMemory Normal NodeHasNoDiskPressure 11m kubelet Node k8s-node01 status is now: NodeHasNoDiskPressure Normal NodeHasSufficientPID 11m kubelet Node k8s-node01 status is now: NodeHasSufficientPID Normal NodeAllocatableEnforced 11m kubelet Updated Node Allocatable limit across pods # journalctl -u kubelet | grep garbage Mar 06 09:50:33 k8s-node01 kubelet[45471]: E0306 09:50:33.106476 45471 kubelet.go:1343] \u0026#34;Image garbage collection failed","title":"kubernetes | 杂记"},{"content":"Bash有一个内置的set命令，可以用来查看、设置、取消shell选项\nset设置的选项无法被继承，仅对当前的bash环境有效，bash命令也可以直接使用set的单字符选项来开启一个自定义参数的子bash环境，比如执行的脚本\n查看： echo $- 和 set -o 和 echo ${SHELLOPTS} 设置： set -abefhkmnptuvxBCHP 和 set -o options-name 取消： set +abefhkmnptuvxBCHP 和 set +o options-name set -和set +设置单字符选项，使用echo $-查看当前shell开启的单字符选项\nset -o 和set +o 设置多字符选项，使用set -o查看当前shell所有的多字符选项的状态(开启或关闭)\n使用echo ${SHELLOPTS}查看当前shell开启的长格式选项\n所有的短格式选项都可以找到对应的长格式选项，长格式选项多了emacs、history、ignoreeof、nolog、pipefail、posix、vi。详见set命令的man手册\n例如 set -B 和set -o braceexpand 是等效的，注意这里的设置和取消有点反常识：设置用 -，关闭反而是用 +\n[root@lvbibir ~]# echo $- himBH # set + 方式去除B选项，相应的 set -o 中的 braceexpand 选项也关闭了 [root@lvbibir ~]# set +B [root@lvbibir ~]# echo $- himH [root@lvbibir ~]# set -o | grep braceexpand braceexpand off # set -o 开启 braceexpand 选项，相应的 echo $- 中的 B 选项也开启了 [root@lvbibir ~]# set -o braceexpand [root@lvbibir ~]# echo $- himBH [root@lvbibir ~]# set -o | grep braceexpand braceexpand on ","permalink":"https://www.lvbibir.cn/posts/tech/linux-command-set/","summary":"Bash有一个内置的set命令，可以用来查看、设置、取消shell选项 set设置的选项无法被继承，仅对当前的bash环境有效，bash命令也可以直接使用set的单字符选项来开启一个自定义参数的子bash环境，比如执行的脚本 查看： echo $- 和 set -o 和 echo ${SHELLOPTS} 设置： set -abefhkmnptuvxBCHP 和 set -o options-name 取消： set +abefhkmnptuvxBCHP 和 set +o options-name","title":"set命令详解"},{"content":"前言 安装过程中会替换相当一部分系统内置的软件包，不建议用于生产环境\ncephadm依赖python3.6，而此版本的openeuler内置版本为3.7，且不支持platform-python\n参考：openeuler的gitee社区issue\nceph：v16.2（pacific）\n操作系统：openEuler-20.03-LTS-SP3\n内核版本：4.19.90-2112.8.0.0131.oe1.x86_64\n集群角色：\nip 主机名 角色 1.1.1.101 ceph-node1 cephadm,mgr,mon,osd 1.1.1.102 ceph-node2 osd,mgr,mon 1.1.1.103 ceph-node3 osd,mgr,mon 基础环境配置(所有节点) 防火墙 systemctl stop firewalld systemctl disable firewalld 修改主机名 hostnamectl set-hostname ceph-node1 hostnamectl set-hostname ceph-node2 hostnamectl set-hostname ceph-node3 vi /etc/hosts # 添加 1.1.1.101 ceph-node1 1.1.1.102 ceph-node2 1.1.1.103 ceph-node3 配置 yum\u0026amp;epel 源 rpm -e openEuler-release-20.03LTS_SP3-52.oe1.x86_64 wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo yum install epel-release rm -f /etc/yum.repos.d/CentOS-Linux-* yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装 python3.6 yum install python3-pip-wheel python3-setuptools-wheel wget http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/x86_64/os/Packages/python3-libs-3.6.8-41.el8.x86_64.rpm wget http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/x86_64/os/Packages/libffi-3.1-22.el8.x86_64.rpm rpm -ivh libffi-3.1-22.el8.x86_64.rpm --force cp /usr/lib64/libpython3.so /usr/lib64/libpython3.so-3.7.4 rpm -ivh python3-libs-3.6.8-41.el8.x86_64.rpm --force --nodeps mv /lib64/libpython3.so /lib64/python3.so-3.6.8 ln -s /usr/lib64/libpython3.so /lib64/libpython3.so yum install platform-python yum install python3-pip vi /usr/bin/yum # 将 #!/usr/bin/python3 改成 #!/usr/bin/python3.7 yum install python3-prettytable-0.7.2-14.el8 yum install python3-gobject-base-3.28.3-2.el8 rpm -e --nodeps firewalld-doc-0.6.6-4.oe1.noarch yum install firewalld-0.9.3-7.el8 安装 docker yum install docker-ce systemctl start docker systemctl status docker systemctl enable docker 安装 cephadm \u0026amp; ceph-common curl --silent --remote-name --location https://github.com/ceph/ceph/raw/pacific/src/cephadm/cephadm chmod +x cephadm ./cephadm add-repo --release pacific yum install cephadm rpm -e --nodeps libicu-62.1-6.oe1.x86_64 yum install ceph-common-16.2.9-0.el8 ceph集群配置 集群初始化 cephadm bootstrap --mon-ip 1.1.1.101 出现如下提示说明安装成功\n...... Generating a dashboard self-signed certificate... Creating initial admin user... Fetching dashboard port number... Ceph Dashboard is now available at: URL: https://ceph-node1:8443/ User: admin Password: dkk08l0czz Enabling client.admin keyring and conf on hosts with \u0026#34;admin\u0026#34; label Enabling autotune for osd_memory_target You can access the Ceph CLI as following in case of multi-cluster or non-default config: sudo /usr/sbin/cephadm shell --fsid aac4d9ba-3be0-11ed-b415-000c29211f5f -c /etc/ceph/ceph.conf -k /etc/ceph/ceph.client.admin.keyring Or, if you are only running a single cluster on this host: sudo /usr/sbin/cephadm shell Please consider enabling telemetry to help improve Ceph: ceph telemetry on For more information see: https://docs.ceph.com/en/pacific/mgr/telemetry/ Bootstrap complete. 访问：https://1.1.1.101:8443/\n第一次访问 dashboard 需要修改初始账号密码\n添加主机 ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-node2 ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-node3 ceph orch host add ceph-node2 1.1.1.102 --labels _admin ceph orch host add ceph-node3 1.1.1.103 --labels _admin 添加磁盘 # 单盘添加 ceph orch daemon add osd ceph-node1:/dev/vdb # 查看所有可用设备 ceph orch device ls # 自动添加所有可用设备 ceph orch apply osd --all-available-devices ","permalink":"https://www.lvbibir.cn/posts/tech/ceph-v16-cpehadm-openeuler/","summary":"前言 安装过程中会替换相当一部分系统内置的软件包，不建议用于生产环境 cephadm依赖python3.6，而此版本的openeuler内置版本为3.7，且不支持platform-python 参考：openeuler的gitee社区issue ceph：v16.2（pacific） 操作","title":"cephadm 安装 ceph-v16 (pacific) (openeuler)"},{"content":"前言 适用于 Centos8/openeuler + docker\n安装 cephadm、ceph-common 的过程就不赘述了，主要探讨如何实现 cephadm 离线安装 ceph v16.2.8\n一、离线 rpm 包和 docker 镜像的获取 找一台有外网的测试机（尽量跟生产系统的环境一致）通过 yum 安装 cephadm、ceph-common、docker 等需要的 rpm 包，注意使用 downloadonly 参数先下载好 rpm 包和对应的依赖，然后再通过 yum localinstall 安装\n使用 cephadm bootstrap 初始化单节点 ceph 集群，过程中会下载好需要的 docker 镜像\n初始化完成后就可以使用 cephadm rm-cluster --force --zap-osds --fsid \u0026lt;fsid\u0026gt; 把现在的集群删除了，暂时用不到\n二、修改 docker 镜像 我们需要修改的镜像只有 quay.io/ceph/ceph:v16 这个镜像，采用 docker commit 的方式修改\n先运行一个容器用于修改文件\n[root@node-128 ~]# docker run -itd --name test quay.io/ceph/ceph:v16 520af9cf98688d1eb1f572c28c4c60db4f231e4dbf6b3594c54c3892494e5d6c [root@node-128 ~]# docker exec -it test /bin/bash # 容器操作 [root@520af9cf9868 /]# find /usr/ -name serve.py /usr/share/ceph/mgr/cephadm/serve.py /usr/lib/python3.6/site-packages/pecan/commands/serve.py [root@520af9cf9868 /]# vi /usr/share/ceph/mgr/cephadm/serve.py 如下，注释三行，大约 937 行\n如下，三处修改大约位于 1342 行\n注释 if 语句\n修改 cepadm 命令的 pull 为 inspect-image\n获取 container 数据改为直接写死\n至此，已修改完毕，将容器提交为新的镜像\ndocker commit -m \u0026#34;修改 /usr/share/ceph/mgr/cephadm/serve.py 文件\u0026#34; -a \u0026#34;lvbibir\u0026#34; test ceph:v16 [root@node-128 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE ceph v16 c654e94b4c3f 3 days ago 1.23GB quay.io/ceph/ceph v16 e8311b759ac3 3 months ago 1.23GB quay.io/ceph/ceph-grafana 8.3.5 dad864ee21e9 4 months ago 558MB quay.io/prometheus/prometheus v2.33.4 514e6a882f6e 5 months ago 204MB quay.io/prometheus/node-exporter v1.3.1 1dbe0e931976 8 months ago 20.9MB quay.io/prometheus/alertmanager v0.23.0 ba2b418f427c 11 months ago 57.5MB 然后将原先的镜像删除，将修改后的镜像改为原先的镜像 tag\ndocker rmi quay.io/ceph/ceph:v16 docker tag ceph:v16 quay.io/ceph/ceph:v16 docker rmi ceph:v16 [root@ceph-x86-node3 ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE quay.io/ceph/ceph v16 c654e94b4c3f 4 days ago 1.23GB quay.io/ceph/ceph-grafana 8.3.5 dad864ee21e9 4 months ago 558MB quay.io/prometheus/prometheus v2.33.4 514e6a882f6e 5 months ago 204MB quay.io/prometheus/node-exporter v1.3.1 1dbe0e931976 8 months ago 20.9MB quay.io/prometheus/alertmanager v0.23.0 ba2b418f427c 11 months ago 57.5MB 在 本博客另一篇文章 有脚本可以方便的批量导入导出镜像\n三、测试 将之前下载的 rpm 包和导出的 docker 镜像进行归档压缩，上传至无法访问外网的环境，之后就与在线部署 ceph 集群的步骤一样了\n","permalink":"https://www.lvbibir.cn/posts/tech/ceph-v16-cpehadm-openuler-offline/","summary":"前言 适用于 Centos8/openeuler + docker 安装 cephadm、ceph-common 的过程就不赘述了，主要探讨如何实现 cephadm 离线安装 ceph v16.2.8 一、离线 rpm 包和 docker 镜像的获取 找一台有外网的测试机（尽量跟生产系统的环境一致）通过 yum 安装 cephadm、ceph-common、docker 等需要的 rpm 包，注意使用 downloadonly 参数先下载好 rpm","title":"cephadm 离线安装 ceph-v16 (Pacific) (openeuler)"},{"content":"前言 在 pxe 的一般场景下，通常在只需要在 dhcp 服务中配置一个通用的 filename 来指定客户端在 tftp 服务端获取的引导程序，但是在略微复杂的场景中，比如可能有些服务器默认是 legacy 模式，而有些服务器是 UEFI 模式，这两种模式使用的引导程序是不同的，但我们又不想频繁的去修改 dhcp 配置文件。本文主要探讨的就是这个问题，如何配置 dhcp 来应对复杂的服务器环境\n难点主要有两个，一个是区分某些 dhcp 客户端是否需要 pxe 引导程序，另外一个是如何区分不同的模式和架构来去分配对应的 pxe 引导程序\nRFC Request For Comments（RFC），是一系列以编号排定的文件。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件。RFC文件是由Internet Society（ISOC）赞助发行。基本的互联网通信协议都有在RFC文件内详细说明。RFC文件还额外加入许多在标准内的论题，例如对于互联网新开发的协议及发展中所有的记录。因此几乎所有的互联网标准都有收录在RFC文件之中。\ndhcp option 60 DHCP Option 60 Vendor class identifier为厂商类标识符。这个选项作用于客户端可选地识别客户端厂商类型和配置。这个信息是N个8位编码，由DHCP服务端解析。厂商可能会为客户端选择定义特殊的厂商类标识符信息，以便表达特殊的配置或者其他关于客户端的信息。比如：这个标识符可能编码了客户端的硬件配置。客户端发送过来的服务器不能解析的类规范信息必须被忽略（尽管可能会有报告）。\ndhcp option 93 dhcp-options 的 man 手册中有提到对于架构类型在 RFC 4578 中有一套标准，可通过 if 语句判断 dhcp 客户端的Arch代码来提供不同的PXE引导程序给客户端\n# man dhcp-options option pxe-system-type uint16 [, uint16 ... ]; A list of one ore more 16-bit integers which allows a client to specify its pre-boot architecture type(s). This option is included based on RFC 4578. 下述为 RFC 4578 标准中对 arch 代码制定的标准，name 字段包含启动模式和 cpu 架构信息（自己的猜测，这里没找到对于 name 更详细的解释）\nType Architecture Name ---- ----------------- 0 Intel x86PC 1 NEC/PC98 2 EFI Itanium 3 DEC Alpha 4 Arc x86 5 Intel Lean Client 6 EFI IA32 7 EFI BC 8 EFI Xscale 9 EFI x86-64 抓包获取arch代码 通过前文描述，我们得知 arch 代码主要是由硬件厂商定义好的，配置好 pxe 服务，arch 代码的获取至关重要，去咨询硬件厂商效率太慢，这里通过更为方便的抓包获取\n抓包主要获取提供 dhcp 服务的网卡的数据包，需服务端开启 dhcp 服务，客户端通过网卡启动\nwindows端通过 wireshark 来完成\nlinux服务端使用 tcpdump -i \u0026lt;interface\u0026gt; -w \u0026lt;file\u0026gt; 生成到文件然后用 wireshark 分析\n以下提供几个 dhcp option 60 和 dhcp option 93 报文示例：\nAMD Ryzen 7 4800U with Radeon Graphics (x86)\nvmware workstation v16 平台\nUEFI 模式下\n这里获取到的 arch 代码为 7\nAMD Ryzen 7 4800U with Radeon Graphics (x86)\nvmware workstation v16 平台\nlegacy 模式下\n这里获取到的 arch 代码为 0\nkunpeng 920 （aarch64）\nkvm 平台\nUEFI 模式下\n这里获取到的 arch 代码为 11\n以上抓包都是在网络引导的环境下进行的，在使用已安装操作系统中的网卡去发送 dhcp 请求时，整个数据包传输过程都没有 option 60 和 option 93 这两个选项的参与，我猜测这两个选项只有在网络引导的环境下才会去参与\ndhcp 配置文件示例 在上述论证基础之上，我们就可以通过配置 dhcp 服务来使 pxe 足以应对复杂的网络环境和硬件环境\n解决前言中提到的两个难点分别通过 option 60 和 option 93 分别解决\n# 这里应该是将 option 93 的值格式化成 16 进制，用于下面的 if 判断（猜测） option arch code 93 = unsigned integer 16; class \u0026#34;pxeclients\u0026#34; { # 这里判断 option 60 选项的值的前9个字符是否是 PXEClient match if substring (option vendor-class-identifier, 0, 9) = \u0026#34;PXEClient\u0026#34;; next-server 10.17.25.17; # 这里通过 if 判断 arch 代码来决定如何去分配对应的 pxe 引导程序 if option arch = 00:07 { filename \u0026#34;/BOOTX64.efi\u0026#34;; } else if option arch = 00:09 { filename \u0026#34;/BOOTX64.efi\u0026#34;; } else { filename \u0026#34;/pxelinux.0\u0026#34;; } } 较为详细的配置文件示例，后面有简化版\n# 启用 PXE 支持 allow booting; allow bootp; # PXE 定义命名空间 option space PXE; option PXE.mtftp-ip code 1 = ip-address; option PXE.mtftp-cport code 2 = unsigned integer 16; option PXE.mtftp-sport code 3 = unsigned integer 16; option PXE.mtftp-tmout code 4 = unsigned integer 8; option PXE.mtftp-delay code 5 = unsigned integer 8; option arch code 93 = unsigned integer 16; # RFC4578 authoritative; one-lease-per-client true; # 不使用DNS动态更新 ddns-update-style none; # 忽略客户端DNS更新 ignore client-updates; # 不使用 PXE 的网络 shared-network main { subnet 10.17.25.0 netmask 255.255.255.0 { option routers 10.17.25.254; option subnet-mask 255.255.255.0; option domain-name \u0026#34;zhijie-liu.com\u0026#34;; # 在此网络关闭PXE支持 deny bootp; pool { range 10.17.25.200 10.17.25.210; host nagios-test { hardware ethernet 00:0d:56:66:82:c3; fixed-address 10.17.25.200; } } } } # 使用 PXE 的网络 shared-network pxe { subnet 10.17.15.0 netmask 255.255.255.0 { option routers 10.17.15.254; option subnet-mask 255.255.255.0; option domain-name \u0026#34;xiyang-liu.com\u0026#34;; option domain-name-servers 10.17.26.88, 8.8.8.8; default-lease-time 86400; max-lease-time 172800; pool { range 10.17.15.1 10.17.15.20; class \u0026#34;pxeclient\u0026#34; { match if substring (option vendor-class-identifier, 0, 9) = \u0026#34;PXEClient\u0026#34;; next-server 10.17.25.17; if option arch = 00:07 { filename \u0026#34;/BOOTX64.efi\u0026#34;; } else if option arch = 00:09 { filename \u0026#34;/BOOTX64.efi\u0026#34;; } else { filename \u0026#34;/pxelinux.0\u0026#34;; } } # 根据 MAC 地址单独分配地址和指定的 PXE 引导程序 host gpxelinux { option host-name \u0026#34;gpxelinux.zhijie-liu.com\u0026#34;; hardware ethernet 00:50:56:24:0B:30; fixed-address 10.17.15.8; filename \u0026#34;/gpxelinux.0\u0026#34; } } } } 简化版（仅kvm平台测试通过）\noption domain-name \u0026#34;example.org\u0026#34;; option domain-name-servers 8.8.8.8, 114.114.114.114; default-lease-time 84600; max-lease-time 100000; log-facility local7; option arch code 93 = unsigned integer 16; subnet 1.1.1.0 netmask 255.255.255.0 { range 1.1.1.100 1.1.1.200; option routers 1.1.1.253; class \u0026#34;pxeclients\u0026#34; { match if substring (option vendor-class-identifier, 0, 9) = \u0026#34;PXEClient\u0026#34;; next-server 1.1.1.21; if option arch = 00:11 { filename \u0026#34;/grubaa64.efi\u0026#34;; } } } 参考 https://blog.csdn.net/u012145252/article/details/125405273\nhttps://www.cnblogs.com/boowii/p/6475921.html\nhttps://www.rfc-editor.org/rfc/rfc4578.html\n","permalink":"https://www.lvbibir.cn/posts/tech/pxe-dhcp-legacy-uefi-archs/","summary":"前言 在 pxe 的一般场景下，通常在只需要在 dhcp 服务中配置一个通用的 filename 来指定客户端在 tftp 服务端获取的引导程序，但是在略微复杂的场景中，比如可能有些服务器默认是 legacy 模式，而有些服务器是 UEFI 模式，这两种模式使用的引导程序是不同的，但我们又不想频繁的去修改 dhcp 配置文件。本文主要探讨的就是这个问题，如何配","title":"pxe 如何应对复杂的服务器硬件环境"},{"content":"示例代码\nimport os # 输入文件夹地址 path = \u0026#34;C://Users//lvbibir//Desktop//lvbibir.github.io//content//posts//read//\u0026#34; files = os.listdir(path) # 输出所有文件名，只是为了确认一下 for file in files: print(file) # 获取旧名和新名 i = 0 for file in files: # 旧名称的信息 old = path + os.sep + files[i] # 新名称的信息 new = path + os.sep + file.replace(\u0026#39;_\u0026#39;,\u0026#39;-\u0026#39;) # 新旧替换 print(new) os.rename(old,new) i+=1 ","permalink":"https://www.lvbibir.cn/posts/tech/python-rename-file/","summary":"示例代码 import os # 输入文件夹地址 path = \u0026#34;C://Users//lvbibir//Desktop//lvbibir.github.io//content//posts//read//\u0026#34; files = os.listdir(path) # 输出所有文件名，只是为了确认一下 for file in files: print(file) # 获取旧名和新名 i = 0 for file in files: # 旧名称的信息 old = path + os.sep + files[i] # 新名称的信息 new = path + os.sep + file.replace(\u0026#39;_\u0026#39;,\u0026#39;-\u0026#39;) # 新旧替换 print(new) os.rename(old,new) i+=1","title":"python批量修改目录下文件名"},{"content":"前言 书名《微习惯》，作者斯提芬·盖斯[美]，江西人民出版社，译者桂君\n微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。微习惯太小，小到不可能失败。正是因为这个特性，它不会给你造成任何负担，而且具有超强的“欺骗性”，它因此成了极具优势的习惯养成策略。\n微习惯策略的科学原理表明了人们无法长期坚持大多数主流成长策略的原因，也解释了人们长期坚持微习惯策略的可能性。人们无法让改变的效果持久时，往往认为原因在于自己，但其实有问题的并不是他们本身，而是他们采用的策略。当你开始用微习惯策略教你的方法按照大脑的规律做事情时，持久改变其实很容易。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n一 微习惯是什么 千里之行，始于足下。 ——老子\n欢迎来到微习惯的世界，首先陈述两个事实：\n哪怕是一点点行动，也比毫不作为强无数倍（在数学意义上如此，实际生活中也是如此）。 相比某一天做很多事，每天做一点事的影响力会更大。 几乎每个人都经历过瓶颈期，竭尽全力想提升自己却最终失败，然后无数次尝试并遭遇失败后很久不敢重新开始。\n很多时候，我们没能实施行动，也没能实现计划，但有没有可能这并不是我们的错，而是我们采用并认可的策略出了问题呢？\n只为培养好习惯\n微习惯不会直接帮你戒烟、戒酒或者控制赌瘾，微习惯策略只会帮你培养你认可的好习惯，给你的生活增添积极行为，持续丰富你的生活。消除坏习惯和建立好习惯有着共同的目标——用更好的行为方式取代原有的行为方式。\n如果你有好习惯，你改变自己的主要动力是靠近这些积极的东西；如果你有坏习惯，你改变自己的主要动力是远离这些消极的东西。\n微习惯简介\n如果你想培养一个新习惯，微习惯基本就是它经过大幅缩减的版本——把“每天做100个俯卧撑”缩减成每天1个，把“每天写3000字”缩减成每天写50字，把“始终保持积极思考”缩减成每天想两件好事。\n微习惯体系的基础在于“微步骤”，那些“小到不可思议的一小步”。\n一家银行可能因为规模太大而不至于失败，而微习惯是因为太小而不至于无法完成，因为，你不会有机会体验未完成目标导致的常见消极情绪，比如愧疚和挫败感。\n习惯还与压力有关\n现在试想一下：如果坏习惯让你压力过大，你会怎么做。压力是负反馈循环的绝佳导火索，它会触发一个坏习惯，坏习惯又会触发内疚感、内心的焦虑和更多压力，这些消极因素会再次触发这个坏习惯。\n但是，如果习惯本身就能缓解压力会怎样？拿锻炼来说，你的压力会把你拽到健身房，锻炼会帮你缓解焦虑。\n养成新习惯需要多长时间\n不是21天，也不是30天。“21天”谬论可能源自整形外科医生麦克斯韦尔·马尔茨（Maxwell Maltz）。据说马尔茨医生发现接受截肢手术的患者需要大约21天来适应肢体残缺的事实，因此，他认为21天是人们适应任何生活变化所需要的时间长度。\n不同行为所需要的时间差别很大，从18天到254天不等，甚至在某些案例中，这些时间可能惊人的长。\n二 大脑的工作原理 大脑是我的一切，华生。身体只是附件而已。 ——阿瑟·柯南·道尔，《福尔摩斯探案集》\n大脑是变化缓慢且状态稳定的\n人类大脑有一套对外部世界做出反应的固定体系。有时我们觉得不易改变的大脑令人感到沮丧，但总体来说，好处还是相当多的\n一旦成功养成健康的新习惯，一切都会变得轻松起来。我们无需跟大脑持久战斗就可以自然的执行这些习惯。\n大脑中的两个核心角色\n愚蠢的重复者——基底神经节\n聪明的管理者——前额皮层\n基底神经节是愚蠢的，你抽烟的时候，它不会考虑到肺癌的可能性；你锻炼的时候，它也不会幻想健康身体的好处。但是它可以高效率地重复模式，节省精力，它的工作几乎无需我们消耗额外的意志力或者动力即可完成。\n前额皮层则相当聪明，是个可以理解长远利益和结果的管理者，它拥有抑制基底神经节的能力，同时它还负责处理短期思维和决策。\n前额皮层的功能这么强大，所以会消耗相当的精力，从而使你感到疲劳。这个时候，掌管重复部分的基底神经节就会接管大脑。\n让大脑的其他部分喜欢上前额皮层想要的东西，是建立新习惯的唯一方式\n三 动力 v.s. 意志力 情绪要么顺服你，要么支配你，这要看谁说了算。 ——吉米·罗恩\n当动力处于峰值时，意志力消耗量为0或可以忽略不计，这是因为你无需强迫自己做你本来就愿意做的事情，可以当动力降为0时，强烈的内心抵触意味着我们必须消耗非常大的意志力\n做事缺乏动力，意志力的消耗猛涨，这种方式很难维持一个行为并将其培养成习惯\n“激发动力”策略的诸多问题\n激发动力有效果吗？答案并不是那么确定。偶尔我们可以激发强烈的动力做某件事，比如锻炼身体，比如阅读，比如学习某项技能，但是扪心自问我们无法确保下次是否还有如此强烈的动力。\n动力是一种能带来诸多好处的重要感觉，但是当它出现时，请把它看作一个额外的奖励，一件美好的事物。我们可以享受它带来的好处，但不要尝试去依赖动力。\n动力并不可靠 动力之所以不可靠，是因为它是以人的感受为基础的，而人类的感受容易改变且无法预测已经是几百年来公认的事实了。几乎所有东西都能改变你的感受，所以我们不要把希望放在如此不稳定的东西上。任何事物能成为基础的第一原则就是它必须牢固可靠。\n我们无法做到每次都愿意激发动力 问题在于，动力是很难或者说几乎不可能按需培养的。我们只有在精力充沛、思维模式健康、没有受到其他强烈诱惑的时候，我们才能依靠动力成功。\n你根本不想让自己想让自己想锻炼。很多时候，你积聚动力只是为了让自己有动力激发动力而已。生活中总有那么几次，你不愿意为了激发动力而激发动力。\n“热情递减法则” “热情递减法则”不是一条真正的法则，是作者创造的术语。它比对应的“边际效用递减法则”更好理解。这条经济法则认为，吃第五块披萨的时候愉悦感略低于吃第四块的时候，吃第四块的时候又略低于吃第三块的时候。可能下面这个例子更形象，一瓶三块钱的冰可乐第一口至少值两块五。甚至我觉得感情生活中的新鲜感同样适用这个法则，新鲜感就是一种动力，然而大部分情侣新鲜感也只能维持几个月而已。\n习惯是一个我们选择做一件事而做一件事的行为，行动开始前和结束后不会出现剧烈波动。有热情是好事，但我们应该把这种动力看作一种额外奖励，而不是实施行动的信号。即表现更稳定和自动的基底神经节掌握控制权。\n为什么意志力能打败动力？\n有必要重申一遍，动力是好东西，只是不可靠而已。借助意志力，动力会变得更加可靠；而且如果先采取行动，继续行动的动力会被迅速激发。\n意志力很可靠\n意志力可以被强化\n意志力可以通过计划执行\n意志力的工作原理\n做决定也会消耗意志力 在同一天里做过艰难决定的人在后来面对诱惑时屈服的可能性更高，这体现了自控力的下降。重大决定和意志力似乎需要消耗同样的能量。比如你上午强迫自己学习了几个小时，在吃晚饭时在炸鸡和更为健康的饮食之间会非常偏向前者，前提是学习和控制饮食你都没有养成习惯的前提下。\n意志力损耗的五个最重要的因素 元分析是从指定主题的相关文献中提取出重要结论的过程。\n2010年的一项针对自我损耗的元分析中发现了引起自我损耗的五个最重要的因素：努力程度、感知难度、消极情绪、主观疲劳和血糖水平。\n总结一下上述的本章内容\n我们是用动力或者意志力开启新的行为的（非习惯性）。 动力不可靠，所以不能充当建立习惯的策略。 意志力可靠，但前提是你没有把它耗尽。 引发意志力损耗的五大重要因素：努力程度、感知难度、消极情绪、主观疲劳和血糖水平。 如果我们能克服这五项障碍，我们就应该能走向成功。 四 微习惯策略 塑造你生活的不是你偶尔做的一两件事，而是你一贯坚持做的事。 ——安东尼·罗宾\n以微习惯方式运用意志力\n微习惯是怎样有效消除意志力的五大威胁的\n努力程度 微习惯需要非常少的实际努力，自我损耗极少。\n感知难度 微习惯的本质决定它几乎不会让你在还没做的时候就感受到困难。一旦你开始做且能随心所欲地继续下去，“已经开始”带来的心理影响会让感知难度明显降低。正如从物理学角度来看，物体的惯性在运动开始时最大，一旦物体处于运动状态，因为存在动量，一切都会变得简单。\n很多时候我们无法坚持做某件事的时候都是因为在一开始就感受到了很大的难度，所以有了这样的想法：如果最终做不到，我们宁可不开始。\n消极情绪 即使微习惯占用了一件本应使你快乐的事情的时间，你要做的努力也非常少，所以几乎感受到消极情绪。何况通常情况下，我们都会用有益的行为取代浪费时间的行为，这个过程本身就会带来积极情绪。\n主观疲劳 这个因素很有意思，不是“疲劳”，而是“主观疲劳”，就是说我们在评估自己的疲劳程度时并不是完全客观的。通常更难的任务在开始前就会感受到很大的压迫感。\n采用微习惯策略的结果：主管疲劳无法彻底消除，但是微习惯可以有效缓解主观疲劳。\n血糖水平 葡萄糖是人体首要的能量来源。如果血液中葡萄糖的含量变低，你会感觉疲惫。\n采用微习惯策略，你无需动用前额皮层去做一些重大决定，或者消耗很多意志力，这有助于保持我们的血糖水平。\n微习惯如何拓宽你的舒适区\n你现在有一个心理舒适区（comfort zone），把它想象成一个圆圈。圆圈内是当下的我们，圆圈外则是我们想要达到的目标，也许是身材变好，读完了几本书，学会了某项技能。但是这些目标都要经历一些不太舒适的过程才能实现（因为脱离了基底神经节目前的模式）。\n通常我们采取“只要能成功怎么做都行”，然后开始大量行动，我们全力冲刺到舒适区外边，拼命挣扎想要留在那里，此时我们的潜意识：“有意思，但是这么剧烈的变化让我很不舒服”，当我们的动力和意志力不足以支撑时，我们会被拽回到舒适圈内。\n而微习惯就像是走到圆圈的边缘，轻轻往外走一小步，我们完全可以走一小步后退回到舒适圈，潜意识不会对这么微小的改变的做出太大反应，但是长此以往，舒适圈就会被我们扩大。\n我们偶尔会超额完成目标，可以用基础物理学知识来解释。牛顿第一运动定律的内容包括：\n除非受到外力作用，否则静止的物体总保持静止状态 除非受到外力作用。否则出于运动状态中的物体的速度不会改变。 我们可以得到一个新等式：一小步+想做的事=较高的进一步行动的可能性\n五 微习惯的独特之处 是故胜兵先胜而后求战，败兵先战而后求胜。 ——孙子，《孙子兵法》\n微习惯能与现有习惯一较高下\n培养一个新习惯也是对之前我们养成的一些习惯的挑战，我们需要摒弃一些曾经不好的习惯，以让更好的行为代替它。大脑会抗拒大幅度的改变，所以我们要以极其微小的行为做出一点点改变，潜移默化的影响我们的大脑，让新的行为成为基底神经节的一种模式。\n微习惯没有截止时间\n很多将心理学、行为学或者其他尝试帮助你养成好习惯的书籍都是基于“习惯是21天或者30天养成的”这个理论，而微习惯没有明确的截止时间，它要求尽可能一天都不能落下，长久地坚持。但是不像其他方法要求你每天健身一小时或者读一个小时的书，我们要做的只是很小很小的一部分，例如读2页书就好，只是这样。\n微习惯可以提升自我效能感\n大多数人都成尝试过把一个良好的行为养成习惯，然后由于各种各样的原因没有坚持下来，这会使我们缺乏基本的自我效能感。\n微习惯正是重新开始的完美方法。你不会再被巨大的目标打垮，也不会因为目标未实现带来的内疚感感到焦虑煎熬。这一次，你每天都能成功。这些胜利也许微不足道，但是对于一颗心灰意冷的心来说是至关重要的。\n微习惯帮你培养正念和意志力\n正念是一个非常重要的技能，它指的是我们对于自己的思维和行动有清醒的认知。正念是目标清晰地活着和敷衍活着之间的区别。如果你的微习惯是每天起床后喝一杯水，那么你就会对自己总共喝了多少水有所认知，如果是每天看两页书，那么你就会时常想自己已经看完了多少书。\n前文提过意志力是一项非常宝贵的资源，而微习惯是一项频繁重复小任务的行为，这是锻炼意志力的一个绝佳方法。\n六 彻底改变只需要八步 一个得不到执行的念头只会消亡 ——罗杰·冯·欧克\n第一步：选择适合自己的微习惯和计划\n选择适合自己的微习惯\n可以是一个每天都要做的事情，也可以是一个时间段的弹性计划，比如一周跑步三次\n把习惯变成一个小到不可思议的一步\n比如把每天做20个俯卧撑改成1个\n我给自己制定的微习惯有两项：每天读两页书、每周换好跑步的装备然后走到小区门口三次（天）。\n第二步：挖掘每个微习惯的内在价值\n我们很多时候无法养成习惯的原因在于我们想做一件事，但为要不要做这件事而苦恼。可以反思一下我们在第一步制定的习惯，一般都是我们长期以来潜意识里觉得正确的事情，却一直缺乏动力或者不那么理解这项行为能给我们带来什么。\n用“为什么钻头”来挖掘一下：\n我想每天读两页书。为什么？ 因为读书几乎一直以来都是成功人士的标配。为什么？ 因为读书是人们汲取知识、拓宽视野极好的途径。为什么？ 因为读书可以练就腹有诗书气自华和沉稳的气质，而这两点正是目前的我极其渴求的。 第三步：明确习惯依据，将其纳入日程\n培养习惯的常见依据有两个：时间和行为方式。对于朝九晚五时间比较规律的人群，更推荐根据时间方式作为依据，日程比较灵活的可以使用行为方式作为依据。\n时间：每周一三五的下午3点锻炼 行为方式：吃完晚饭后半个小时开始读书 也有第三种自由度更高的方式，我们在当天任意时间完成都可以，最低限度是睡觉前。\n第四步：建立回报机制，以奖励提升成就感\n一个有趣的现象：一个申请假释的犯人，假释听证会的最佳时间是在假释官吃完东西、结束休息之后，因为研究发现假释官在吃饱睡好之后做出的判决对被告更有利（大概是因为他们更愿意倾听）。\n拿锻炼来举例，锻炼可以让你获得健康的体魄，良好的身材。但是你刚开始锻炼的时候，锻炼结束后回到家里你收获到的回报是什么？汗水？于此同时，你的大脑却现在就想吃炸鸡，因为糖会刺激味蕾并激活大脑的回报中心，所以炸鸡是一种感官（首要）回报，而锻炼带来的是抽象（次要）回报，比如拥有好身材在沙滩上漫步、对付出的努力感到满意。次级回报需要更长的时间才能在大脑站稳脚跟。\n在一开始锻炼产生的内啡肽和期望产生的回报差距过大时，我们可以给自己一些奖励策略，比如挑选一个想买的东西加入购物车，在跑步一个月后把它买下来、如果能坚持到两个月就给自己买一块专业的运动手表（比如我给自己买的高驰pace2）。\n这像是教小孩骑自行车，一开始我们需要向孩子保证会扶着自行车，可是在某个时候我们把手松开后，孩子不需要扶持也能继续骑车了\n第五步：记录与追踪情况\n遗忘是人类的天性。在一项习惯的前期阶段，遗忘也是一个阻力，我们偶尔会忘记我们给自己制定的计划。所以采取一些策略来提醒我们还是很有必要的。\n方式不重要，重要的是可以有效地提醒我们。如果你有看日历的习惯，就把要做的事情写到便签上放到日历旁边；如果你每天都使用电脑，可以把便签粘到显示器下面。手机闹钟、一些带有提醒功能的APP等等都可以。\n第六步：微量开始，超额完成\n我们在完成微习惯时消耗的是意志力，但是我们在达成目标后继续努力时动力就会开始起作用了。\n当你一旦开始，就会希望多完成一些。到那个时候，继续做和停下来一样容易。\n第七步：服从计划安排，拜托高期待值\n在第一步中，我们已经把习惯的难度定的非常低了，所以超额完成是很平常的事情，正如之前说到的，请把它作为一个奖励，不要把超额完成的部分作为你今后每天的目标，这是一个很危险的行为。读完两页书就是成功，句号！\n举个例子：你连续半个月每天都读了30页书，而不是2页书，于是理所当然的把微习惯改为了每天读30页书，但是一旦某天状态不佳或者因为一些其他因素导致没有完成30页书的目标，你建立起来的自信会受挫。不要嘴上说着读2页书就好，心里却把30页书作为目标。不要忘记你是如何做到读30页书的（是从每天2页书开始的）。\n坚持做一件小事，比偶尔做一件大事能从根本上改变更多。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n微习惯策略的所有益处、力量和优势都取决与你在纸面上和心里始终都将目标保持在微小状态的能力。\n第八步：习惯养成的标志\n代表行为已经成为习惯的信号：\n没有抵触情绪：该行为似乎做起来容易，不做反而更难 身份：你打心底认同该行为，可以信心十足地说“我是个跑者” 行动时无需考虑：不需要做任何决定，自然而然地去做。 你不再担心：你知道你会一直做这件事。 常态化：习惯是非情绪化的。你开始你的微习惯时没有任何情绪波动，而不会因为你正在做这件事而“激动不已” 它很无聊：好的习惯并不会让人很兴奋，它只是对你有好处而已。你会因为它们对生活更有激情，但不是对行为本身。 七 微习惯策略的八大规则 1. 绝对不要自欺欺人\n比如觉得某项微习惯太小，觉得偶尔一天不做也没什么；或者给自己制定的微习惯是每天一个俯卧撑，却在心里偷偷要求自己完成更多。\n2. 满意每一个进步\n对小小的进步感到满意和标准低不是一回事。李小龙有一句名言可以很好地总结这一点：“要满意，但别满足”。\n微习惯策略的核心是一个很简单的大脑错觉，同时也是一种重视开始的生活哲理，一种认为行动优于动力的生活哲理，一种相信将每一小步积累起来便能让量变转为质变的生活哲理。\n3. 经常回报自己，尤其在完成微习惯之后\n哪怕在完成微习惯之后对自己说“你很棒”这一点小小的激励，最终都会建立一个正反馈循环。\n4. 保持头脑清醒\n可能坚持几个月的微习惯后你能看到比较大的变化，进而过度兴奋，但别让这种兴奋成为你实施行动的原动力。变得依赖动力或情绪正是导致很多习惯没有养成的原因。\n在完成目标的过程中，无聊才是常态。使用冷静的头脑分析你的行为。\n5. 感到强烈抵触时，后退并缩小目标\n常识告诉我们，突破才能获得进步，然而这只适用于短期目标，比如项目的deadline，你需要逼一逼自己才能完成。但是对于养成一个习惯来说，保证我们可以长时间的坚持才是最重要的。\n如果你给自己制定的计划让你感到很痛苦，你需要考虑是这项行为本身的问题还是目标设立的太大了。养成习惯过程中有抵触情绪是正常的，但采用微习惯策略时假如你能感受到明显的抵触情绪，那一定要缩小目标。\n6. 提醒自己这件事很轻松\n在微习惯策略中，你对实施行动的抵触行为很多时候都是因为考虑的太宽泛，比如健身，这是一个听起来就比较有压力的行为。但是你想想你今天要做的仅仅是做一个俯卧撑，自然而然会感受到轻松。\n7. 绝不要小看微步骤\n每一个大的工程都是由无数个小步骤做成的。持续做一件很小的小事，坚持一段时间，反正又花不了你多长时间，大部分微习惯两分钟之内就能完成，你会慢慢看到效果的。\n8. 用多余精力超额完成任务，而不是制定更大的目标\n大目标在纸面上看着漂亮，但只有行动才算数。\n目标渺小、结果丰满。你是想要这样的结果，还是反过来？\n","permalink":"https://www.lvbibir.cn/posts/read/wei-xi-guan/","summary":"前言 书名《微习惯》，作者斯提芬·盖斯[美]，江西人民出版社，译者桂君 微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。微习惯太小，小到不可能失败。正是因为这个特性，它不会给你造成任何负担，而且具有超强的“欺骗性”，它因此成了极具优势的习惯养成策略。 微习惯策略的科学原理表明","title":"《微习惯》"},{"content":"前言 安装过程中会替换相当一部分系统内置的软件包，不建议用于生产环境\ncephadm依赖python3.6，而此版本的openeuler内置版本为3.7，且不支持platform-python\n参考：openeuler的gitee社区issue\nceph：v16.2（pacific）\n操作系统：icloudos_v1.0_aarch64（openEuler-20.03-LTS-aarch64）\n内核版本：4.19.90-2003.4.0.0037.aarch64\n集群角色：\nip 主机名 角色 192.168.47.133 ceph-aarch64-node1 cephadm，mgr，mon，osd 192.168.47.135 ceph-aarch64-node2 osd 192.168.47.130 ceph-aarch64-node3 osd 基础环境配置(所有节点) 关闭 node_exporter systemctl stop node_exporter systemctl disable node_exporter 修改主机名 hostnamectl set-hostname ceph-aarch64-node1 hostnamectl set-hostname ceph-aarch64-node2 hostnamectl set-hostname ceph-aarch64-node3 vi /etc/hosts # 添加 192.168.47.133 ceph-aarch64-node1 192.168.47.135 ceph-aarch64-node2 192.168.47.130 ceph-aarch64-node3 添加 yum 源 wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/docker-ce.repo 添加 epel 源 yum install epel-release # 修改 $releasever sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/epel-modular.repo sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/epel-playground.repo sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/epel.repo sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/epel-testing-modular.repo sed -i \u0026#39;s/$releasever/8/g\u0026#39; /etc/yum.repos.d/epel-testing.repo 修改 /etc/os-release sed -i \u0026#39;s/ID=\u0026#34;isoft\u0026#34;/ID=\u0026#34;centos\u0026#34;/g\u0026#39; /etc/os-release sed -i \u0026#39;s/VERSION_ID=\u0026#34;1.0\u0026#34;/VERSION_ID=\u0026#34;8.0\u0026#34;/g\u0026#39; /etc/os-release 安装 python3.6 yum install python3-pip-wheel python3-setuptools-wheel wget http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/aarch64/os/Packages/python3-libs-3.6.8-41.el8.aarch64.rpm wget http://mirrors.aliyun.com/centos-vault/8.5.2111/BaseOS/aarch64/os/Packages/libffi-3.1-22.el8.aarch64.rpm rpm -ivh libffi-3.1-22.el8.aarch64.rpm --force cp /usr/lib64/libpython3.so /usr/lib64/libpython3.so-3.7.4 rpm -ivh python3-libs-3.6.8-41.el8.aarch64.rpm --force --nodeps mv /lib64/libpython3.so /lib64/python3.so-3.6.8 ln -s /usr/lib64/libpython3.so /lib64/libpython3.so yum install platform-python yum install python3-pip-9.0.3-20.el8.noarch vim /usr/bin/yum # 将 #!/usr/bin/python3 改成 #!/usr/bin/python3.7 yum install python3-prettytable-0.7.2-14.el8 yum install python3-gobject-base-3.28.3-2.el8.aarch64 yum install firewalld-0.9.3-7.el8 安装 docker yum install docker-ce systemctl start docker systemctl status docker systemctl enable docker 安装 cephadm \u0026amp; ceph-common curl --silent --remote-name --location https://github.com/ceph/ceph/raw/pacific/src/cephadm/cephadm chmod +x cephadm ./cephadm add-repo --release pacific yum install cephadm yum install ceph-common-16.2.9-0.el8 ceph集群配置 集群初始化 cephadm bootstrap --mon-ip 192.168.47.133 访问：https://192.168.47.133:8443/\n第一次访问 dashboard 需要修改初始账号密码\n添加主机 ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-aarch64-node2 ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph-aarch64-node3 ceph orch host add ceph-aarch64-node2 192.168.47.135 --labels _admin ceph orch host add ceph-aarch64-node3 192.168.47.130 --labels _admin 添加磁盘 # 单盘添加 ceph orch daemon add osd ceph-aarch64-node1:/dev/vdb # 查看所有可用设备 ceph orch device ls # 自动添加所有可用设备 ceph orch apply osd --all-available-devices 其他 清除ceph集群 # 暂停集群，避免部署新的 ceph 守护进程 ceph orch pause # 验证集群 fsid ceph fsid # 清除集群所有主机的 ceph 守护进程 cephadm rm-cluster --force --zap-osds --fsid \u0026lt;fsid\u0026gt; no active mgr cephadm ls cephadm run --name mgr.ceph-aarch64-node3.ipgtzj --fsid 17136806-0735-11ed-9c4f-52546f3387f3 ceph orch apply mgr label:_admin osd误删除 https://blog.csdn.net/cjfcxf010101/article/details/100411984\n删除 osd 后引起的 cephadm_failed_daemon 错误 https://www.cnblogs.com/st2021/p/15026526.html\n禁用自动添加osd ceph orch apply osd --all-available-devices --unmanaged=true ","permalink":"https://www.lvbibir.cn/posts/tech/ceph-v16-cpehadm-openeuler-aarch64/","summary":"前言 安装过程中会替换相当一部分系统内置的软件包，不建议用于生产环境 cephadm依赖python3.6，而此版本的openeuler内置版本为3.7，且不支持platform-python 参考：openeuler的gitee社区issue ceph：v16.2（pacific） 操作","title":"cephadm 安装 ceph-v16 (pacific) (openeuler) (aarch64)"},{"content":"起因 在使用 cephadm 安装 ceph v16.2 时升级了 python，系统默认版本是 3.7.4 ，升级后版本是 3.8.5，glibc 作为依赖同时进行了升级，系统默认版本是 2.28 ，升级后版本是 2.31，幸好记录及时，截图留存了软件包升级信息，如下\n在没有十分把握的情况下不要用 yum install -y，使用 yum install 先判断好依赖安装带来的影响\n升级过程未出任何问题，便没在意，可是后续 openssh 由于 glibc 的升级导致连接失败，一番 baidu 加 google 未解决 openssh 连接问题，于是便着手开始降级 glibc 至系统默认版本，从系统镜像中找到 glibc 相关的三个软件包\n由于是版本降级，脑子一热便采用 rpm -Uvh --nodeps glibc* 方式强制安装，至此，系统崩溃\n系统几乎所有命令都无法使用，报错如下\n出现这个问题的原因大致是因为强制安装并未完全成功，lib64 一些相关的库文件软链接丢失\n[root@localhost ~]# ls -l /lib64/libc.so.6 lrwxrwxrwx 1 root root 12 7月 14 14:43 /lib64/libc.so.6 -\u0026gt; libc-2.28.so # 恢复前这里是 libc-2.31.so 在强制安装 glibc-2.28 时， libc-2.31.so 已经被替换成了 libc-2.28.so ，由于安装失败 libc.so.6 链接到的还是 libc-2.31.so，自然会报错 no such file\n恢复 系统绝大部分命令都是依赖 libc.so.6 的，我们可以通过 export LD_PRELOAD=\u0026quot;库文件路径\u0026quot; 设置优先使用的库\nexport LD_PRELOAD=/lib64/libc-2.28.so 此时 ls 、cd、mv 等基础命令以及最重要的 ln 链接命令已经可以使用了，接下来就是恢复软链接\nrm -f /lib64/libc.so.6 ln -s /lib64/libc-2.28.so /lib64/libc.so.6 但是 yum 命令依赖的几个库软链接还没有恢复，按照报错提示跟上述步骤一样，先删除掉依赖的库文件，再重新软链接过去\n之后就是重新 yum localinstall 安装一下未安装成功的 glic ，之前强制安装时已经将高版本的 glibc 清理掉了，这里重新安装很顺利\n也许之前使用 yum localinstall 安装可能就不会出现这个问题了，rpm \u0026ndash;nodeps 也要少用~\nyum localinstall glibc* 软件包安装过程中没有报错，经测试系统一切正常，openssh 也可以正常连接了\n以上，系统恢复正常\n","permalink":"https://www.lvbibir.cn/posts/tech/glibc-wu-sheng-ji/","summary":"起因 在使用 cephadm 安装 ceph v16.2 时升级了 python，系统默认版本是 3.7.4 ，升级后版本是 3.8.5，glibc 作为依赖同时进行了升级，系统默认版本是 2.28 ，升级后版本是 2.31，幸好记录及时，截图留存了软件包升级信息，如下 在没有十分把握的情况下不要用 yum install -y，使用 yum install 先判断好依赖安装带来的影响 升级过","title":"glibc 误升级后修复"},{"content":"前言 测试环境：\nx86_64（amd ryzen 7 4800u）：vmware workstation V16.1.2\naarch64（kunpeng 920）： kvm-2.12\n注意测试的网络环境中不要存在其他的dhcp服务\n注意测试虚拟机内存尽量大于4G，否则会报错 no space left 或者测试机直接黑屏\n注意 ks.cfg 尽量在当前环境先手动安装一台模板机，使用模板机生成的 ks 文件来进行修改，否则可能会有一些清理磁盘分区的破坏性操作，基本只需要将安装方式从cdrom 修改成 install 和 url --url=http://......\n服务端配置 基础环境 系统版本：iSoft-ServerOS-V6.0-rc1\nip地址：1.1.1.21\n网卡选择nat模式，注意关闭一下 workstation 自带的 dhcp，也可使用自定义的 lan区段\n关闭防火墙及selinux iptables -F systemctl stop firewalld systemctl disable firewalld setenforce 0 sed -i \u0026#39;/SELINUX/s/enforcing/disabled/\u0026#39; /etc/selinux/config 安装相关的软件包 这里由于 HW 行动的原因，外网 yum 源暂不可用，使用本地 yum 源安装相关软件包\nmount -o loop /root/iSoft-Taiji-Server-OS-6.0-x86_64-rc1-202112311623.iso /mnt mkdir /etc/yum.repos.d/bak mv /etc/yum.repos.d/isoft* /etc/yum.repos.d/bak/ cat \u0026gt; /etc/yum.repos.d/local.repo \u0026lt;\u0026lt;EOF [local] name=local baseurl=file:///mnt gpgcheck=0 enabled=1 EOF dnf clean all dnf makecache cenots8安装syslinux时需要加 \u0026ndash;nonlinux后缀，centos7则不需要\ndnf install dhcp-server tftp-server httpd syslinux-nonlinux http服务配置 mkdir /var/www/html/ks/ chmod 755 -R /var/www/html/ systemctl start httpd systemctl enable httpd 能访问到 httpd 即可\ntftp服务配置 systemctl start tftp systemctl enable tftp dhcp服务配置 x86_64 架构和 aarch64 架构的 dhcp 的配置略有不同，按照下文分别配置\nsystemctl enable dhcpd x86_64 服务端配置 dhcp 服务配置 vim /etc/dhcp/dhcpd.conf\noption domain-name \u0026#34;example.org\u0026#34;; option domain-name-servers 8.8.8.8, 114.114.114.114; default-lease-time 84600; max-lease-time 100000; log-facility local7; subnet 1.1.1.0 netmask 255.255.255.0 { range 1.1.1.100 1.1.1.200; option routers 1.1.1.253; next-server 1.1.1.21; # 本机ip（tftpserver的ip） filename \u0026#34;pxelinux.0\u0026#34;; } systemctl restart dhcpd isoft_4.2_x86 http服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/isoft_4.2/isos/x86_64/ # 挂载镜像文件 mount -o loop /root/iSoft-Server-OS-4.2-x86_64-201907051149.iso /var/www/html/isoft_4.2/isos/x86_64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-isoft-4.2-x86.cfg chmod -R 755 /var/www/html ks.cfg文件内容\n#version=DEVEL # System authorization information auth --enableshadow --passalgo=sha512 # Use CDROM installation media install url --url=http://1.1.1.21/isoft_4.2/isos/x86_64/ # Use graphical install graphical # Run the Setup Agent on first boot firstboot --enable ignoredisk --only-use=sda # Keyboard layouts keyboard --vckeymap=cn --xlayouts=\u0026#39;cn\u0026#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=dhcp --device=ens32 --onboot=off --ipv6=auto --no-activate network --hostname=localhost.localdomain # Root password rootpw --iscrypted $6$9yXT2.jd8oofY89W$q1nVQ4rRfAE937KeG5bHCAP3iI3GgyVJJF/MN5Ipe9omdXIEjelaTQSPplr9E9aFOGG17F3GkzIzNnifvjdO20 # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc # X Window System configuration information xconfig --startxonboot # System bootloader configuration bootloader --append=\u0026#34; crashkernel=auto\u0026#34; --location=mbr --boot-drive=sda autopart --type=lvm # Partition clearing information clearpart --all --initlabel %packages @^gnome-desktop-environment @base @core @desktop-debugging @dial-up @directory-client @fonts @gnome-desktop @guest-agents @guest-desktop-agents @input-methods @internet-browser @java-platform @multimedia @network-file-system-client @networkmanager-submodules @print-client @x11 chrony kexec-tools %end %addon com_redhat_kdump --enable --reserve-mb=\u0026#39;auto\u0026#39; %end %anaconda pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* rm -rf /root/usr mkdir /var/lib/tftpboot/pxelinux.cfg # 提取 menu.c32 和 pxelinux.0 cp /var/www/html/icloud_1.0/isos/x86_64/Packages/syslinux-nonlinux-6.04-4.el8.isoft.noarch.rpm /root/ rpm2cpio syslinux-4.05-15.el7.isoft.x86_64.rpm | cpio -idv ./usr/share/syslinux/menu.c32 rpm2cpio syslinux-4.05-15.el7.isoft.x86_64.rpm | cpio -idv ./usr/share/syslinux/pxelinux.0 cp /root/usr/share/syslinux/menu.c32 /var/lib/tftpboot/ cp /root/usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ # 拷贝内核启动文件 cp /var/www/html/isoft_4.2/isos/x86_64/isolinux/vmlinuz /var/lib/tftpboot/ cp /var/www/html/isoft_4.2/isos/x86_64/isolinux/initrd.img /var/lib/tftpboot/ cp /var/www/html/isoft_4.2/isos/x86_64/isolinux/vesamenu.c32 /var/lib/tftpboot/ # 拷贝菜单配置文件 cp /var/www/html/isoft_4.2/isos/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/pxelinux.cfg/default\ndefault vesamenu.c32 timeout 30 menu title iSoft-Taiji Server OS 6.0 label linux menu label ^Install iSoft-Taiji Server OS 6.0 menu default kernel vmlinuz append initrd=initrd.img ks=http://1.1.1.21/ks/ks-isoft-6.0-x86.cfg isoft_6.0-rc1_x86 http服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/isoft_6.0/isos/x86_64/ # 挂载镜像文件 mount -o loop /root/iSoft-Taiji-Server-OS-6.0-x86_64-rc1-202112311623.iso /var/www/html/isoft_6.0/isos/x86_64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-isoft-6.0-x86.cfg chmod -R 755 /var/www/html ks.cfg文件内容\n# Use graphical install graphical install url --url=http://1.1.1.21/isoft_6.0/isos/x86_64/ %packages @^graphical-server-environment %end # Keyboard layouts keyboard --xlayouts=\u0026#39;cn\u0026#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=static --device=ens33 --bootproto=dhcp --ipv6=auto --activate network --hostname=localhost.localdomain # Run the Setup Agent on first boot firstboot --enable ignoredisk --only-use=sda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # System timezone timezone Asia/Shanghai --isUtc # Root password rootpw --iscrypted $6$w6X5WYQDyMeAizfs$TFKls9Kuj4Jv6PNKcMZ2BmB1Z/dvRCRkGD9uzm0n8te2UwDgdPCPGkUxCPvExKGenCMINTMcjSH55bCWYDiHx. %addon com_redhat_kdump --disable --reserve-mb=\u0026#39;128\u0026#39; %end %anaconda pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* rm -rf /root/usr mkdir /var/lib/tftpboot/pxelinux.cfg # 提取 menu.c32 和 pxelinux.0 cp /var/www/html/isoft_6.0/isos/x86_64/Packages/syslinux-nonlinux-6.04-7.oe1.isoft.noarch /root/ rpm2cpio syslinux-nonlinux-6.04-7.oe1.isoft.noarch | cpio -idv ./usr/share/syslinux/menu.c32 rpm2cpio syslinux-nonlinux-6.04-7.oe1.isoft.noarch | cpio -idv ./usr/share/syslinux/pxelinux.0 cp /root/usr/share/syslinux/menu.c32 /var/lib/tftpboot/ cp /root/usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ # 拷贝内核启动文件 cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/vmlinuz /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/initrd.img /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/vesamenu.c32 /var/lib/tftpboot/ # 拷贝菜单配置文件 cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/ldlinux.c32 /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/libutil.c32 /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/x86_64/isolinux/libcom32.c32 /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/pxelinux.cfg/default\ndefault vesamenu.c32 timeout 30 menu title iSoft-Taiji Server OS 6.0 label linux menu label ^Install iSoft-Taiji Server OS 6.0 menu default kernel vmlinuz append initrd=initrd.img ks=http://1.1.1.21/ks/ks-isoft-6.0-x86.cfg icloud_1.0_x86 http服务配置 mkdir -p /var/www/html/icloud_1.0/isos/x86_64/ # 挂载镜像 mount -o loop /root/i-CloudOS-1.0-x86_64-202108131137.iso /var/www/html/icloud_1.0/isos/x86_64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-icloud-1.0-x86.cfg chmod -R 755 /var/www/html ks-icloud-1.0-x86.cfg 文件内容\n#version=RHEL8 ignoredisk --only-use=sda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # Use graphical install graphical # Use CDROM installation media install url --url=http://1.1.1.21/icloud_1.0/isos/x86_64/ # Keyboard layouts keyboard --vckeymap=us --xlayouts=\u0026#39;\u0026#39; # System language lang zh_CN.UTF-8 # Root password rootpw --iscrypted 123.com # Run the Setup Agent on first boot firstboot --enable # Do not configure the X Window System skipx # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc %packages @^vmserver-compute-node %end %anaconda pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* rm -rf /root/usr mkdir /var/lib/tftpboot/pxelinux.cfg # 提取 menu.c32 和 pxelinux.0 cp /var/www/html/icloud_1.0/isos/x86_64/Packages/syslinux-nonlinux-6.04-4.el8.isoft.noarch.rpm /root/ rpm2cpio syslinux-nonlinux-6.04-4.el8.isoft.noarch.rpm | cpio -idv ./usr/share/syslinux/menu.c32 rpm2cpio syslinux-nonlinux-6.04-4.el8.isoft.noarch.rpm | cpio -idv ./usr/share/syslinux/pxelinux.0 cp /root/usr/share/syslinux/menu.c32 /var/lib/tftpboot/ cp /root/usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ # 拷贝内核启动文件 cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/vmlinuz /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/initrd.img /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/vesamenu.c32 /var/lib/tftpboot/ # 拷贝菜单配置文件 cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default # 下面这三个文件centos7可以不要，centos8对于这三个文件有一定依赖性 cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/ldlinux.c32 /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/libutil.c32 /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/x86_64/isolinux/libcom32.c32 /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/pxelinux.cfg/default\ndefault menu.c32 timeout 30 menu title i-CloudOS 1.0 label linux menu label ^Install i-CloudOS 1.0 menu default kernel vmlinuz append initrd=initrd.img ks=http://1.1.1.21/icloud_1.0/isos/x86_64/ks-icloud-1.0-x86.cfg openeuler_20.03-LTS-SP1_x86 http服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/ # 挂载镜像文件 mount -o loop /root/iSoft-Taiji-Server-OS-6.0-x86_64-rc1-202112311623.iso /var/www/html/isoft_6.0/isos/x86_64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-openeuler-20.03-LTS-x86.cfg chmod -R 755 /var/www/html /var/www/html/ks/ks-openeuler-20.03-LTS-x86.cfg 文件内容\n# Use graphical install graphical install url --url=http://1.1.1.21/openeuler_20.03-LTS-SP1/isos/x86_64/ %packages @^minimal-environment %end # Keyboard layouts keyboard --xlayouts=\u0026#39;cn\u0026#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=static --device=ens33 --bootproto=dhcp --ipv6=auto --activate network --hostname=localhost.localdomain # Run the Setup Agent on first boot firstboot --enable ignoredisk --only-use=sda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # System timezone timezone Asia/Shanghai --isUtc # Root password rootpw --iscrypted $6$w6X5WYQDyMeAizfs$TFKls9Kuj4Jv6PNKcMZ2BmB1Z/dvRCRkGD9uzm0n8te2UwDgdPCPGkUxCPvExKGenCMINTMcjSH55bCWYDiHx. %addon com_redhat_kdump --disable --reserve-mb=\u0026#39;128\u0026#39; %end %anaconda pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* rm -rf /root/usr mkdir /var/lib/tftpboot/pxelinux.cfg # 提取 menu.c32 和 pxelinux.0 cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/Packages/syslinux-nonlinux-6.04-5.oe1.noarch.rpm /root/ rpm2cpio syslinux-nonlinux-6.04-5.oe1.noarch.rpm | cpio -idv ./usr/share/syslinux/menu.c32 rpm2cpio syslinux-nonlinux-6.04-5.oe1.noarch.rpm | cpio -idv ./usr/share/syslinux/pxelinux.0 cp /root/usr/share/syslinux/menu.c32 /var/lib/tftpboot/ cp /root/usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/ # 拷贝内核启动文件 cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/vmlinuz /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/initrd.img /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/vesamenu.c32 /var/lib/tftpboot/ # 拷贝菜单配置文件 cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/ldlinux.c32 /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/libutil.c32 /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS-SP1/isos/x86_64/isolinux/libcom32.c32 /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/pxelinux.cfg/default\ndefault vesamenu.c32 timeout 30 menu title iSoft-Taiji Server OS 6.0 label linux menu label ^Install iSoft-Taiji Server OS 6.0 menu default kernel vmlinuz append initrd=initrd.img ks=http://1.1.1.21/ks/ks-isoft-6.0-x86.cfg aarch64 服务端配置 dhcp服务配置 vim /etc/dhcp/dhcpd.conf\noption domain-name \u0026#34;example.org\u0026#34;; option domain-name-servers 8.8.8.8, 114.114.114.114; default-lease-time 84600; max-lease-time 100000; log-facility local7; subnet 1.1.1.0 netmask 255.255.255.0 { range 1.1.1.100 1.1.1.200; option routers 1.1.1.253; next-server 1.1.1.21; # 本机ip（tftpserver的ip） filename \u0026#34;grubaa64.efi\u0026#34;; } systemctl restart dhcpd isoft_6.0_aarch64 http服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/isoft_6.0/isos/aarch64/ # 挂载镜像文件 mount -o loop /root/iSoft-Taiji-Server-OS-6.0-aarch64-202201240952.iso /var/www/html/isoft_6.0/isos/aarch64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-isoft-6.0-aarch64.cfg chmod -R 755 /var/www/html ks-isoft-6.0-aarch64.cfg 文件内容\n#version=DEVEL ignoredisk --only-use=vda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # Use graphical install graphical # Use CDROM installation media install url --url=http://1.1.1.21/isoft_6.0/isos/aarch64 # Keyboard layouts keyboard --vckeymap=cn --xlayouts=\u0026#39;cn\u0026#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=static --device=enp3s0 --bootproto=dhcp --ipv6=auto --activate network --hostname=localhost.localdomain # Root password rootpw --iscrypted $6$x94MGsfCoFdE/G4O$MEakgOwtq0O5i4pRIVzXntKQuMJVh9CJ3anhZKl8YZhZDtSXhzuMk5mpDr3wu..rDareWgy5tjsepCaGiPK3g/ # X Window System configuration information xconfig --startxonboot # Run the Setup Agent on first boot firstboot --enable # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc %packages @^mate-desktop-environment %end %anaconda pwpolicy root --minlen=8 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=8 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=8 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* cp /var/www/html/isoft_6.0/isos/aarch64/EFI/BOOT/grub.cfg /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/aarch64/EFI/BOOT/grubaa64.efi /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/aarch64/images/pxeboot/vmlinuz /var/lib/tftpboot/ cp /var/www/html/isoft_6.0/isos/aarch64/images/pxeboot/initrd.img /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/grub.cfg\nset default=\u0026#34;1\u0026#34; function load_video { if [ x$feature_all_video_module = xy ]; then insmod all_video else insmod efi_gop insmod efi_uga insmod ieee1275_fb insmod vbe insmod vga insmod video_bochs insmod video_cirrus fi } load_video set gfxpayload=keep insmod gzio insmod part_gpt insmod ext2 set timeout=6 ### END /etc/grub.d/00_header ### search --no-floppy --set=root -l \u0026#39;iSoft-Taiji-Server-OS-6.0\u0026#39; ### BEGIN /etc/grub.d/10_linux ### menuentry \u0026#39;Install iSoft-Taiji-Server-OS 6.0 with GUI mode\u0026#39; --class red --class gnu-linux --class gnu --class os { set root=(tftp,1.1.1.21) linux /vmlinuz ro inst.geoloc=0 console=ttyAMA0 console=tty0 rd.iscsi.waitnet=0 inst.repo=http://1.1.1.21/isoft_6.0/isos/aarch64/ inst.ks=http://1.1.1.21/ks/ks-isoft-6.0-aarch64.cfg initrd /initrd.img } } icloud_1.0_aarch64 这里 iso 没有直接挂载到 apache 目录，是因为该 iso 文件 Packages 目录中有个别软件包没有读取权限，直接挂载无法修改权限\nhttp服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/icloud_1.0/isos/aarch64/ # 挂载镜像文件 mount -o loop /root/iCloudOS-1.0-aarch64-2021-0805-1423-test-1.iso /mnt/ cp -r /mnt/* /var/www/html/icloud_1.0/isos/aarch64/ # 上传 ks.cfg 应答文件 vim /var/www/html/ks/ks-icloud-1.0-aarch64.cfg chmod -R 755 /var/www/html ks-icloud-1.0-aarch64.cfg 文件内容\n#version=RHEL8 ignoredisk --only-use=vda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # Use graphical install graphical # Use CDROM installation media install url --url=http://1.1.1.21/icloud_1.0/isos/aarch64/ # Keyboard layouts keyboard --vckeymap=us --xlayouts=\u0026#39;\u0026#39; # System language lang zh_CN.UTF-8 # Root password rootpw --iscrypted 123.com # Run the Setup Agent on first boot firstboot --enable # Do not configure the X Window System skipx # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc %packages @^vmserver-compute-node %end %anaconda pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* cp /var/www/html/icloud_1.0/isos/aarch64/EFI/BOOT/grub.cfg /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/aarch64/EFI/BOOT/grubaa64.efi /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/aarch64/images/pxeboot/vmlinuz /var/lib/tftpboot/ cp /var/www/html/icloud_1.0/isos/aarch64/images/pxeboot/initrd.img /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/grub.cfg\nset default=\u0026#34;1\u0026#34; function load_video { if [ x$feature_all_video_module = xy ]; then insmod all_video else insmod efi_gop insmod efi_uga insmod ieee1275_fb insmod vbe insmod vga insmod video_bochs insmod video_cirrus fi } load_video set gfxpayload=keep insmod gzio insmod part_gpt insmod ext2 set timeout=6 ### END /etc/grub.d/00_header ### search --no-floppy --set=root -l \u0026#39;iCloudOS-1.0-aarch64\u0026#39; ### BEGIN /etc/grub.d/10_linux ### menuentry \u0026#39;Install iCloudOS 1.0 with GUI mode\u0026#39; --class red --class gnu-linux --class gnu --class os { set root=(tftp,1.1.1.21) linux /vmlinuz ro inst.geoloc=0 console=ttyAMA0 console=tty0 rd.iscsi.waitnet=0 inst.repo=http://1.1.1.21/icloud_1.0/isos/aarch64 inst.ks=http://1.1.1.21/ks/ks-icloud-1.0-aarch64.cfg initrd /initrd.img } openeuler_20.03-LTS_aarch64 http服务配置 创建目录\n# 创建目录 mkdir -p /var/www/html/openeuler_20.03-LTS/isos/aarch64/ # 挂载镜像文件 mount -o loop /root/openEuler-20.03-LTS-aarch64-dvd.iso /var/www/html/openeuler_20.03-LTS/isos/aarch64/ # 创建ks.cfg应答文件 vim /var/www/html/ks/ks-openeuler-20.03-LTS-aarch64.cfg chmod -R 755 /var/www/html ks-openeuler-20.03-LTS-aarch64.cfg 文件内容\n#version=DEVEL ignoredisk --only-use=vda autopart --type=lvm # Partition clearing information clearpart --all --initlabel # Use graphical install graphical # Use CDROM installation media install url --url=http://1.1.1.21/openeuler_20.03-LTS/isos/aarch64 # Keyboard layouts keyboard --vckeymap=cn --xlayouts=\u0026#39;cn\u0026#39; # System language lang zh_CN.UTF-8 # Network information network --bootproto=static --device=enp3s0 --bootproto=dhcp --ipv6=auto --activate network --hostname=localhost.localdomain # Root password rootpw --iscrypted $6$x94MGsfCoFdE/G4O$MEakgOwtq0O5i4pRIVzXntKQuMJVh9CJ3anhZKl8YZhZDtSXhzuMk5mpDr3wu..rDareWgy5tjsepCaGiPK3g/ # X Window System configuration information xconfig --startxonboot # Run the Setup Agent on first boot firstboot --enable # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc %packages @^minimal-environment %end %anaconda pwpolicy root --minlen=8 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=8 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=8 --minquality=1 --notstrict --nochanges --notempty %end reboot tftp服务配置 rm -rf /var/lib/tftpboot/* cp /var/www/html/openeuler_20.03-LTS/isos/aarch64/EFI/BOOT/grub.cfg /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS/isos/aarch64/EFI/BOOT/grubaa64.efi /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS/isos/aarch64/images/pxeboot/vmlinuz /var/lib/tftpboot/ cp /var/www/html/openeuler_20.03-LTS/isos/aarch64/images/pxeboot/initrd.img /var/lib/tftpboot/ chmod -R 755 /var/lib/tftpboot/* systemctl restart tftp vim /var/lib/tftpboot/grub.cfg\nset default=\u0026#34;1\u0026#34; function load_video { if [ x$feature_all_video_module = xy ]; then insmod all_video else insmod efi_gop insmod efi_uga insmod ieee1275_fb insmod vbe insmod vga insmod video_bochs insmod video_cirrus fi } load_video set gfxpayload=keep insmod gzio insmod part_gpt insmod ext2 set timeout=60 ### END /etc/grub.d/00_header ### search --no-floppy --set=root -l \u0026#39;openEuler-20.03-LTS-aarch64\u0026#39; ### BEGIN /etc/grub.d/10_linux ### menuentry \u0026#39;Install openEuler 20.03 LTS\u0026#39; --class red --class gnu-linux --class gnu --class os { set root=(tftp,1.1.1.21) linux /vmlinuz ro inst.geoloc=0 console=ttyAMA0 console=tty0 rd.iscsi.waitnet=0 inst.repo=http://1.1.1.21/openeuler_20.03-LTS/isos/aarch64/ inst.ks=http://1.1.1.21/ks/ks-openeuler-20.03-LTS-aarch64.cfg initrd /initrd.img } } 参考 https://docs.openeuler.org/zh/docs/20.03_LTS_SP1/docs/Installation/%E4%BD%BF%E7%94%A8kickstart%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85.html\nhttps://blog.csdn.net/weixin_45651006/article/details/103067283\nhttps://blog.csdn.net/qq_44839276/article/details/106980334\n","permalink":"https://www.lvbibir.cn/posts/tech/pxe-install-scripts/","summary":"前言 测试环境： x86_64（amd ryzen 7 4800u）：vmware workstation V16.1.2 aarch64（kunpeng 920）： kvm-2.12 注意测试的网络环境中不要存在其他的dhcp服务 注意测试虚拟机内存尽量大于4G，否则会报错 no space left 或者测试机直接黑屏 注意 ks.cfg 尽量在当前环境先手动安装一台模板机，使用模板机生成的","title":"pxe 安装配置大全"},{"content":"前言 书名《人间失格》，北京燕山出版社，译者高艳\n语句摘录 人是不可能一边笑还一边紧紧攥着拳头的，只有猴子才会这样\n女人如果突然哭起来，只要让她们吃些好吃的东西，她们就会立刻好转\n越是对人感到恐惧的人，反倒越希望亲眼看到狰狞恐怖的怪物；越是胆小怯懦、神经兮兮的人，越是期盼暴风雨来的更猛烈一些\n世上所有人的说话方式，都喜欢这样绕圈子，不明说，也不说破，带着想逃避责任的心理，复杂又微妙\n我对死倒是不在乎，但如果因受伤变成残疾人，我是接受不了的\n“你喝太多酒了。”\n“不喝了！从明天起，我滴酒不沾了！”\n“真的？”\n“真的，我一定戒。假如我戒了，良子肯嫁给我吗？” 说要娶她的事，其实是一句玩笑话。\n“当然了。”\n“好，那我们就一言为定。我肯定戒酒”\n可第二天，我又照样从中午起便捏起酒盅来。傍晚时分，我摇摇晃晃走出酒馆，站在由子家的铺子前。\n“良子，对不起，我又喝酒了。”\n“哎呀，真讨厌，故意装成一副喝醉的样子。”\n我被她的话吓了一跳，酒一下子醒了许多。\n“不，是真的。我真喝酒了，不是故意装成喝醉的样子。”\n“别捉弄我，你真坏。” 她对我丝毫没有疑心。\n“你一看不就明白了？我今天又从中午开始喝酒了。原谅我！”\n“你演戏演得真像。”\n“不是演戏，你这个傻丫头！当心我亲你哦。”\n“亲呀！”\n“不，我没有资格亲你。要你嫁给我的事，就此作罢吧。你看我的脸，通红通红的是吧？我确实喝了。”\n“那是因为夕阳照在脸上的缘故，你骗我也没用的。因为我们昨天说定了，你不可能去喝酒的，你承诺过我，你却说自己喝酒了，肯定是在骗人、骗人、骗人！”\n","permalink":"https://www.lvbibir.cn/posts/read/ren-jian-shi-ge/","summary":"前言 书名《人间失格》，北京燕山出版社，译者高艳 语句摘录 人是不可能一边笑还一边紧紧攥着拳头的，只有猴子才会这样 女人如果突然哭起来，只要让她们吃些好吃的东西，她们就会立刻好转 越是对人感到恐惧的人，反倒越希望亲眼看到狰狞恐怖的怪物；越是胆小怯懦、神经兮兮的人，越是期盼暴风雨来的更猛烈一","title":"《人间失格》"},{"content":"11月_8_51.04km 10月_16_100.45km 9月_13_123.96km 月跑量123.96km，完成13次\n9月17日，第一次半程马拉松 8月_15_124.02km 月跑量124.02km，完成15次\n8月27日，第一次15公里 7月_15_78.64km 月跑量78.64km，完成15次\n7月28日，第一次10公里 7月6日，第一次5公里 目前总跑量37公里，第一次不休息完成了5公里\n存在问题：步频较慢，心率太高\n后续计划：尝试提高步频，继续坚持5公里\n6月_10_26km 月跑量26km，完成10次\n","permalink":"https://www.lvbibir.cn/posts/life/running/","summary":"11月_8_51.04km 10月_16_100.45km 9月_13_123.96km 月跑量123.96km，完成13次 9月17日，第一次半程马拉松 8月_15_124.02km 月跑量124.02km，完成15次 8月27日，第一次15公里 7月_15_78.64km 月跑量78.64km","title":"跑步日常"},{"content":"前言 cve 官网或者工信部会发布一些 cve 漏洞，可以看到该漏洞在某次 commit 提交代码后修复的。\n可以通过检索 kernel.org 中所有内核版本的 ChangeLog 文件中是否包含该 commit 来判断漏洞影响的内核版本（仅针对 linux 的 kernel 相关的漏洞）\n脚本 #!/bin/bash # author: lvbibir # date: 2022-06-23 # 检索 kernel.org 下的所有 ChangeLog 文件，是否包含某项特定的 commit 号 commit=\u0026#39;520778042ccca019f3ffa136dd0ca565c486cedd\u0026#39; version=4 number=0 curl -ks https://cdn.kernel.org/pub/linux/kernel/v$version\\.x/ \u0026gt; list_$version cat list_$version | grep Change | grep -v sign | awk -F\\\u0026#34; \u0026#39;{print $2}\u0026#39; \u0026gt; list_$version\\_cut total=`wc -l list_$version\\_cut | awk \u0026#39;{print $1}\u0026#39;` while read line; do let \u0026#39;number+=1\u0026#39; url=\u0026#34;https://cdn.kernel.org/pub/linux/kernel/v$version.x/$line\u0026#34; echo -e \u0026#34;\\033[31m---------------------正在检索$url----------------第$number 个文件，共$total 个文件\\033[0m\u0026#34; curl -ks $url | grep $commit if [ $? -eq 0 ]; then echo $url \u0026gt;\u0026gt; ./result_$version fi done \u0026lt; ./list_$version\\_cut echo -e \u0026#34;\\033[32m脚本执行完成，结果已保存至当前目录的 result_$version \\033[0m\u0026#34; ","permalink":"https://www.lvbibir.cn/posts/tech/shell-search-url-files/","summary":"前言 cve 官网或者工信部会发布一些 cve 漏洞，可以看到该漏洞在某次 commit 提交代码后修复的。 可以通过检索 kernel.org 中所有内核版本的 ChangeLog 文件中是否包含该 commit 来判断漏洞影响的内核版本（仅针对 linux 的 kernel 相关的漏洞） 脚本 #!/bin/bash # author: lvbibir # date: 2022-06-23 # 检索 kernel.org 下的所有 ChangeLog 文件，是否包含某项特定的 commit 号 commit=\u0026#39;520778042ccca019f3ffa136dd0ca565c486cedd\u0026#39; version=4 number=0 curl -ks https://cdn.kernel.org/pub/linux/kernel/v$version\\.x/ \u0026gt; list_$version cat list_$version | grep Change | grep -v sign | awk","title":"shell | 检索某url中所有文件的内容"},{"content":"git命令 submodule 当clone一个含有子模块的git仓库时可以使用如下命令安装所有子模块\ngit submodule init git submodule update git配置 查看 git 设置\n# 当前仓库 git config --list # 全局配置 git config --global --list 设置代理 设置全局代理，使用 http 代理\ngit config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 取消 github.com 代理\ngit config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy 设置全局代理，使用 socks5 代理\ngit config --global http.proxy socks5://127.0.0.1:1080 git config --global https.proxy socks5://127.0.0.1:1080 取消全局代理\ngit config --global --unset http.proxy git config --global --unset https.proxy 只对 github.com 使用代理\ngit config --global http.https://github.com.proxy http://127.0.0.1:7890 git config --global https.https://github.com.proxy http://127.0.0.1:7890 CRLF 和 LF # 提交时转换为LF，检出时转换为CRLF git config --global core.autocrlf true # 提交时转换为LF，检出时不转换 git config --global core.autocrlf input # 提交检出均不转换 git config --global core.autocrlf false # 拒绝提交包含混合换行符的文件 git config --global core.safecrlf true # 允许提交包含混合换行符的文件 git config --global core.safecrlf false # 提交包含混合换行符的文件时给出警告 git config --global core.safecrlf warn 常见问题 git clone 报错 fatal: early EOF\nfatal: fetch-pack: invalid index-pack output\n解决\ngit config --global http.sslVerify \u0026#34;false\u0026#34; git config --global core.compression -1 ","permalink":"https://www.lvbibir.cn/posts/tech/git/","summary":"git命令 submodule 当clone一个含有子模块的git仓库时可以使用如下命令安装所有子模块 git submodule init git submodule update git配置 查看 git 设置 # 当前仓库 git config --list # 全局配置 git config --global --list 设置代理 设置全局代理，使用 http 代理 git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 取消 github.com 代理 git config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy 设置全局代理，使用 socks5 代理 git config --global http.proxy socks5://127.0.0.1:1080 git config --global https.proxy socks5://127.0.0.1:1080 取消全","title":"git"},{"content":"shell 脚本通常有 sh filename、bash filename、./filename、source filename 这四种执行方式\nsource filename 可以使用 . filename 代替，在当前的 bash 环境下读取并执行脚本文件中的命令，且脚本文件的变量，在脚本执行完成后会保存下来 ./filename 和 sh filename 或者 bash filename 是等效的，都是开启一个子shell来运行脚本文件，脚本中设置的变量执行完毕后不会保存 除./filename 外，source filename 、. filename 、sh filename 、bash filename 都是不需要执行权限的\n变量和权限问题示例\n# 设置临时变量，仅在当前 bash 环境生效 [root@lvbibir ~]# name=lvbibir [root@lvbibir ~]# echo $name lvbibir [root@lvbibir ~]# [root@lvbibir ~]# cat test.sh #!/bin/bash echo $name # source 或者 . 可以获取到父 bash 环境的变量 [root@lvbibir ~]# source test.sh lvbibir [root@lvbibir ~]# . test.sh lvbibir # sh、bash、./三种方式都使用了子 bash 环境，所以无法获取父 bash 环境的变量 # ./ 方式需要脚本有执行权限 [root@lvbibir ~]# sh test.sh [root@lvbibir ~]# bash test.sh [root@lvbibir ~]# ./test.sh -bash: ./test.sh: Permission denied [root@lvbibir ~]# chmod a+x test.sh [root@lvbibir ~]# ./test.sh 同理，使用 source 或者 . 也可以在 bash 环境中获取到脚本中设置的变量\n[root@lvbibir ~]# cat \u0026gt; test.sh \u0026lt;\u0026lt; EOF \u0026gt; #!/bin/bash \u0026gt; number=22 \u0026gt; \u0026gt; EOF [root@lvbibir ~]# echo $number # sh bash ./ 三种方式无法获取脚本中的变量 [root@lvbibir ~]# [root@lvbibir ~]# sh test.sh [root@lvbibir ~]# echo $number [root@lvbibir ~]# bash test.sh [root@lvbibir ~]# echo $number [root@lvbibir ~]# ./test.sh [root@lvbibir ~]# echo $number # source 方式可以获取脚本中的变量 [root@lvbibir ~]# source test.sh [root@lvbibir ~]# echo $number 22 [root@lvbibir ~]# 其他问题 关于是否在子 bash 环境运行的区别出了变量问题还会存在一些其他影响，如下测试\n已知目前存在一个 mysqld 进程，其 pid 为 29426 ，写一个监控pid的脚本\n[root@lvbibir ~]# cat test.sh #!/bin/bash process=$1 pid=$(ps -elf | grep $process | grep -v grep | awk \u0026#39;{print $4}\u0026#39;) echo $pid 两种方式分别运行一下\n[root@lvbibir ~]# sh test.sh mysqld 27038 27039 29426 [root@lvbibir ~]# bash test.sh mysqld 27047 27048 29426 [root@lvbibir ~]# ./test.sh mysqld 27056 27057 29426 [root@lvbibir ~]# [root@lvbibir ~]# source test.sh mysqld 29426 [root@lvbibir ~]# . test.sh mysqld 29426 [root@lvbibir ~]# 问题出现了，由于某种原因导致子 bash 环境中执行的脚本监控到多个 pid ，给脚本添加个 sleep 来看下\n[root@lvbibir ~]# cat test.sh #!/bin/bash process=$1 pid=$(ps -elf | grep $process | grep -v grep | awk \u0026#39;{print $4}\u0026#39;) echo $pid sleep 30 [root@lvbibir ~]# ./test.sh mysqld 27396 27397 29426 新开一个终端，查看进程\n第一个pid是在子shell中执行监控脚本的进程号 第二个pid不太清楚哪里来的，也grep不到这个进程号，应该是脚本执行一瞬间就释放掉了 第三个pid是mysql实际运行中的进程号 实际中脚本的pid和mysqld的pid顺序不太一样，取决于pid的大小\n在脚本再添加个 grep 过滤掉脚本本身的进程来规避这个问题\n[root@lvbibir ~]# cat test.sh #!/bin/bash process=$1 pid=$(ps -elf | grep $process | grep -v grep | grep -v bash | awk \u0026#39;{print $4}\u0026#39;) echo $pid [root@lvbibir ~]# ./test.sh mysqld 29426 参考 https://blog.csdn.net/houxiaoni01/article/details/105161356\n","permalink":"https://www.lvbibir.cn/posts/tech/shell-different-execution-mode/","summary":"shell 脚本通常有 sh filename、bash filename、./filename、source filename 这四种执行方式 source filename 可以使用 . filename 代替，在当前的 bash 环境下读取并执行脚本文件中的命令，且脚本文件的变量，在脚本执行完成后会保存下来 ./filename 和 sh filename 或者 bash filename 是等效的，都是开启一个子shell来运行脚本文","title":"shell | 不同执行方式的区别"},{"content":"前言 shell脚本是没有debug模式的，不过可以通过 set 指令实现简单的debug功能\nshell脚本中默认每条指令都会从上到下依次执行，但是当某行指令报错时，我们大多数情况下是不希望继续执行后续指令的\n这时可以使用shell脚本中 set 指令的四个参数：-e、-u、-x、-o pipefail\n命令报错即返回值（$?）不为0\nset -e set -e 选项可以在脚本出现异常的时候立即退出，后续命令不再执行，相当于打上了一个断点\nif 判断条件里出现异常也会直接退出，如果不希望退出可以在判断语句后面加上 || true 来阻止退出\nbefore 脚本内容\nfoo是一个不存在的命令，用于模拟命令报错\n#!/bin/bash foo echo \u0026#34;hello\u0026#34; 执行结果\n./test.sh: line 3: foo: command not found hello after 脚本内容\n#!/bin/bash set -e foo echo \u0026#34;hello\u0026#34; 执行结果\n./test.sh: line 5: foo: command not found 阻止立即退出的例子 #!/bin/bash set -e foo || true echo \u0026#34;hello\u0026#34; ./test.sh: line 5: foo: command not found hello set -o pipefail 默认情况下 bash 只会检查管道（pipelie）操作的最后一个命令的返回值，即最后一个命令返回值为 0 则判断整条管道语句是正确的\n如下\nset -o pipefail 的作用就是管道中只要有一个命令失败，则整个管道视为失败\nbefore #!/bin/bash set -e foo | echo \u0026#34;a\u0026#34; echo \u0026#34;hello\u0026#34; ./test.sh: line 5: foo: command not found a hello after #!/bin/bash set -eo pipefail foo | echo \u0026#34;a\u0026#34; echo \u0026#34;hello\u0026#34; ./test.sh: line 5: foo: command not found a set -u set -u 的作用是将所有未定义的变量视为错误，默认情况下 bash 会将未定义的变量视为空\nbefore #!/bin/bash set -eo pipefail echo $a echo \u0026#34;hello\u0026#34; hello after #!/bin/bash set -euo pipefail echo $a echo \u0026#34;hello\u0026#34; ./test.sh: line 5: a: unbound variable set -x set -x 可以让 bash 把每个命令在执行前先打印出来，好处显而易见，可以快速方便的找到出问题的脚本位置，坏处就是 bash 的 log 会格外的乱\n另外，它在打印的时候会先把变量解析出来\n纵然 log 可能会乱一些，但也比debug的时候掉头发强\n#!/bin/bash set -euox pipefail a=2 echo $a echo \u0026#34;hello\u0026#34; + a=2 + echo 2 # 这里已经将变量 a 解析为 2 了 2 + echo hello hello 参考 https://zhuanlan.zhihu.com/p/107135290\n","permalink":"https://www.lvbibir.cn/posts/tech/shell-enable-debug-mode/","summary":"前言 shell脚本是没有debug模式的，不过可以通过 set 指令实现简单的debug功能 shell脚本中默认每条指令都会从上到下依次执行，但是当某行指令报错时，我们大多数情况下是不希望继续执行后续指令的 这时可以使用shell脚本中 set 指令的四个参数：-e、-u、-x、-o pipefail 命令报错即返","title":"shell | 开启debug模式"},{"content":"前言 在工作中需要连接公司内网（有线，不可联网），访问外网时需要连接无线\n同时接入这两个网络时，内网访问正常，外网无法访问。\n此时可以通过调整网络优先级及配置路由实现内外网同时访问\n一般来说，内网的网段数量较少，我们可以配置使默认路由走外网，走内网时通过配置的静态路由\ncentos8 在 linux 系统中网络优先级是通过 metric 控制的，值越小，优先级越高，通过route -n 查看路由\n可以通过修改配置文件实现，在网卡配置文件中添加或者修改 IPV4_ROUTE_METRIC=100 参数实现，之后重启网络服务\n# network systemctl restart network # NetworkManager nmcli c reload nmcli c down enp3s0 nmcli c up enp3s0 route -n 添加路由 临时添加静态路由命令如下（重启服务器或者重启网络服务后消失）\nroute add -net 192.168.45.0 netmask 255.255.255.0 dev enp4s0 metric 3 永久添加静态路由\n参照 /etc/init.d/network 中对 /etc/sysconfig/static-routes 是如何处理的\n/etc/sysconfig/static-routes 文件不存在的话，创建一个即可\n# Add non interface-specific static-routes. if [ -f /etc/sysconfig/static-routes ]; then if [ -x /sbin/route ]; then grep \u0026#34;^any\u0026#34; /etc/sysconfig/static-routes | while read ignore args ; do /sbin/route add -$args done else net_log $\u0026#34;Legacy static-route support not available: /sbin/route not found\u0026#34; fi fi 则，如果添加一条静态路由的路由如下\nroute add -net 192.168.45.0 netmask 255.255.255.0 dev enp4s0 metric 3 那么，在 /etc/sysconfig/static-routes 中对应的则应该写为\nany -net 192.168.45.0 netmask 255.255.255.0 dev enp4s0 metric 3 win10 调整网络优先级 查看默认路由\nroute print 0.0.0.0 这两个路由分别是内网和外网的默认路由，绝大部分情况网络都是走的默认路由，但这里有两条默认路由，默认路由的优先级是按照跃点数的多少决定的，跃点数越少，优先级越高\n将外网无线的跃点数调小\nroute print可以看到跃点数修改成功了，此时外网无线的跃点数更小，优先级更高\n配置路由 配置路由需要以管理员权限运行powershell或者cmd\n配置路由后，内网访问也没有问题了\nroute add 172.16.2.0 mask 255.255.255.0 172.30.4.254 metric 3 route add 172.16.3.0 mask 255.255.255.0 172.30.4.254 metric 3 route add 172.16.4.0 mask 255.255.255.0 172.30.4.254 metric 3 这里配置的路由重启系统后会消失，加 -p选项设置为永久路由\nroute add -p 172.16.2.0 mask 255.255.255.0 172.30.4.254 metric 3 ","permalink":"https://www.lvbibir.cn/posts/tech/network-priority/","summary":"前言 在工作中需要连接公司内网（有线，不可联网），访问外网时需要连接无线 同时接入这两个网络时，内网访问正常，外网无法访问。 此时可以通过调整网络优先级及配置路由实现内外网同时访问 一般来说，内网的网段数量较少，我们可以配置使默认路由走外网，走内网时通过配置的静态路由 centos8 在 linux 系统中网络优先","title":"windows \u0026 linux 多网卡时设置默认路由以及添加静态路由"},{"content":"前言 基础环境\n系统：Centos 7.9.2009 minimal 配置：4 cpus / 24G mem / 50G disk 网卡：1.1.1.4/24 我这里采用的是 all-in-one 的配置，即所有操作都在一台主机上，如资源充足可以将 jenkins和gitlab 与后续项目容器分开部署\n1. 系统配置 防火墙、selinux、yum\nsed -i \u0026#39;/SELINUX/s/enforcing/disabled/\u0026#39; /etc/sysconfig/selinux setenforce 0 iptables -F systemctl disable firewalld systemctl stop firewalld mkdir /etc/yum.repos.d/bak mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak/ curl http://mirrors.aliyun.com/repo/Centos-7.repo -o /etc/yum.repos.d/Centos-Base.repo sed -i \u0026#39;/aliyuncs.com/d\u0026#39; /etc/yum.repos.d/Centos-Base.repo yum clean all yum makecache fast yum install -y wget net-tools vim bash-completion unzip mkdir /mydata 2. docker 先安装docker-compose\nwget https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64 -O /usr/local/bin/docker-compose chmod a+x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose docker-compose version 安装docker\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo yum -y install docker-ce mkdir -p /etc/docker # 镜像加速器 tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://jc0srqak.mirror.aliyuncs.com\u0026#34;] } EOF 允许docker守护进程的tcp访问，为了后续jenkins构建时调用，以生成docker镜像\n[root@localhost ~]# vim /usr/lib/systemd/system/docker.service # 修改如下内容 # ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock systemctl daemon-reload systemctl restart docker \u0026amp;\u0026amp; systemctl enable docker 查看端口，确保修改正确\n[root@localhost ~]# ss -tnlp | grep 2375 LISTEN 0 128 [::]:2375 [::]:* users:((\u0026#34;dockerd\u0026#34;,pid=1124,fd=4)) 安装一系列后续需要的镜像，镜像文件比较大，这步比较耗时\ndocker pull jenkins/jenkins:lts docker pull gitlab/gitlab-ce:latest docker pull mysql:5.7 docker pull redis:7 docker pull nginx:1.22 docker pull rabbitmq:3.9-management docker pull elasticsearch:7.17.3 docker pull logstash:7.17.3 docker pull kibana:7.17.3 docker pull mongo:4 docker pull nacos/nacos-server:v2.1.0 3. jenkins 3.1 启动容器 docker run -d --restart=always \\ -p 8080:8080 -p 50000:5000 \\ --name jenkins -u root \\ -v /mydata/jenkins_home:/var/jenkins_home \\ jenkins/jenkins:lts # 获取初始管理员密码 [root@localhost ~]# cat /mydata/jenkins_home/secrets/initialAdminPassword bd5b64c7c8c8467985a0faa6fbe1848f 3.2 跳过在线验证 启动成功访问 http://1.1.1.4:8080 ，等出现密码界面后输入密码应该会进入一个离线页面，如下\n❗ 这个界面不要关，新开一个窗口访问 http://1.1.1.4:8080/pluginManager/advanced\n将 update site 的 url 修改为 http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json，这步是为了加速插件安装\n接下来跳过jenkins的在线验证，在终端再执行\ndocker exec -it jenkins /bin/sh -c \u0026#34;echo 127.0.0.1 www.google.com \u0026gt;\u0026gt; /etc/hosts\u0026#34; docker exec -it jenkins cat /etc/hosts 然后回到第一个离线页面刷新一下，应该可以看到离线状态消除了，这里是因为jenkins在 /mydata/jenkins_home/updates/default.json 中定义了通过访问 google 来判断 jenkins 节点是否是在线状态\n之后选择安装推荐的插件，进入插件安装界面，这个过程耗时会比较长，如果有插件安装失败可以重试\n之后创建管理员用户，一路确定后到主页\n3.3 插件配置 dashboard -\u0026gt; 系统管理 -\u0026gt; 插件管理中安装ssh插件和Role-based Authorization Strategy插件，安装完成后重启jenkins\n新增 ssh 凭据\n新增 ssh 配置，配置好之后右下角测试一下，连接正常后保存\n新增 maven 配置\n3.4 权限配置 我们可以使用Jenkins的角色管理插件来管理Jenkins的用户，比如我们可以给管理员赋予所有权限，运维人员赋予执行任务的相关权限，其他人员只赋予查看权限。\n在系统管理-\u0026gt;全局安全配置中启用基于角色的权限管理：\n关闭代理，保存\n分配管理员、运维和other三个角色，分别配置对应权限\n将用户和角色绑定\n4. gitlab 4.1 启动容器 docker run --detach --restart=always\\ -p 10443:443 -p 1080:80 -p 1022:22 \\ --name gitlab \\ --restart always \\ --volume /mydata/gitlab/config:/etc/gitlab \\ --volume /mydata/gitlab/logs:/var/log/gitlab \\ --volume /mydata/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:latest # 获取密码 docker exec -it gitlab grep \u0026#39;Password:\u0026#39; /etc/gitlab/initial_root_password 访问http://1.1.1.4:1080/，默认用户为root\n4.2 配置 配置中文，修改完后刷新网页即可\n修改默认密码\n4.3 上传项目 新建空白项目\n新建 mall-swarm 项目\nclone github上的原项目，我是windows系统，所以这里用的是git-bash\ngit clone https://github.com/macrozheng/mall-swarm.git cd mall-swarm # 重命名github远端仓库 git remote rename origin github # 添加gitlab仓库 git remote add gitlab http://1.1.1.4:1080/root/mall-swarm.git git remote -v 修改一下 docker.host 变量\n新建 commit 并提交到 gitlab 仓库，初次提交需要输入 gitlab 的用户名密码\ngit add . git commit -m \u0026#34;change docker.host -\u0026gt; 1.1.1.4\u0026#34; git push gitlab master 默认配置不合理，修改 docker-compose-env.yml 中 nginx 的配置文件挂载\n- /data/nginx/nginx.conf:/etc/nginx/nginx.conf #配置文件挂载 上传到gitlab\ngit add . git commit -m \u0026#34;update nginx volume config in document/docker/docker-compose.env.yml\u0026#34; git push gitlab master 5. 依赖服务部署 需要上传到服务器的配置文件准备，如下图所示，为了方便可以将整个document目录传到服务器\n5.1 前期配置 Elasticsearch\n设置内核参数，否则会因为内存不足无法启动\nsysctl -w vm.max_map_count=262144 sysctl -p 创建数据目录并设置权限，否则会报权限错误\nmkdir -p /mydata/elasticsearch/data/ chmod 777 /mydata/elasticsearch/data/ Nginx\n创建目录，上传配置文件 mkdir -p /mydata/nginx/conf/ cp /mydata/document/docker/nginx.conf /mydata/nginx/conf/ Logstash\n创建目录上传配置文件 mkdir /mydata/logstash cp /mydata/document/elk/logstash.conf /mydata/logstash/ 5.2 启动服务 docker-compose -f /mydata/document/docker/docker-compose-env.yml up -d docker-compose 会自动创建一个 docker_default 网络，所有容器都在这个网络下\n启动完成后 rabbitmq 由于权限问题未能正常启动，给 log 目录设置权限，再执行 docker-compose 启动异常的容器\nchmod 777 /mydata/rabbitmq/log/ docker-compose -f /mydata/document/docker/docker-compose-env.yml up -d 确保所有容器正常启动\ndocker ps | grep -v \u0026#34;Up\u0026#34; 5.3 服务配置 mysql\n需要创建 mall 数据库并授权给 reader 用户\n将 sql 文件拷贝到容器\ndocker cp /mydata/document/sql/mall.sql mysql:/ 进入mysql容器执行如下操作\n# 进入mysql容器 docker exec -it mysql /bin/bash # 连接到mysql服务 mysql -uroot -proot --default-character-set=utf8 # 创建远程访问用户 grant all privileges on *.* to \u0026#39;reader\u0026#39; @\u0026#39;%\u0026#39; identified by \u0026#39;123456\u0026#39;; # 创建mall数据库 create database mall character set utf8; # 使用mall数据库 use mall; # 导入mall.sql脚本 source /mall.sql; # 退出数据库 exit # 退出容器 ctrl + d Elasticsearch\n需要安装中文分词器 IKAnalyzer 下载地址\n注意版本需要与 elasticsearch 的版本一致\n上传到服务器并解压到 plugins 目录\nmkdir /mydata/elasticsearch/plugins/analysis-ik unzip /mydata/elasticsearch-analysis-ik-7.17.3.zip -d /mydata/elasticsearch/plugins/analysis-ik/ 重启容器\ndocker restart elasticsearch Logstash\n安装 json_lines 插件并重启\ndocker exec -it logstash /bin/bash logstash-plugin install logstash-codec-json_lines docker restart logstash rabbitmq\n需要创建一个mall用户并设置虚拟host为/mall\n访问管理页面: http://1.1.1.4:15672/ 默认账户密码: guest / guest\n创建管理员用户: mall / mall\n创建一个新的虚拟host为 /mall\n点击mall用户进入用户配置界面\n给mall账户配置虚拟host /mall 的权限\nnacos\n由于我们使用Nacos作为配置中心，统一管理配置，所以我们需要将项目config目录下的所有配置都添加到Nacos中 Nacos访问地址：http://1.1.1.4:8848/nacos/ 账号密码：nacos / nacos\n需要上传的配置\n上传配置\n全部上传完成\n6. jenkins手动发布项目 6.1 脚本配置 Jenkins自动化部署是需要依赖Linux执行脚本的\n添加执行权限\nchmod a+x /mydata/document/sh/*.sh 之前使用的是Docker Compose启动所有依赖服务，会默认创建一个网络，所有的依赖服务都会在此网络之中，不同网络内的服务无法互相访问。所以需要指定sh脚本中服务运行的的网络，否则启动的应用服务会无法连接到依赖服务。\n修改脚本内容，为每个脚本添加--network docker_default \\\nsed -i \u0026#39;/^docker run/ a\\--network docker_default \\\\\u0026#39; /mydata/document/sh/*.sh 确认修改是否成功\n6.2 jenkins配置 6.2.1 mall-admin工程配置 由于各个模块执行任务的创建都大同小异，下面将详细讲解mall-admin模块任务的创建，其他模块将简略讲解。\n源码管理\n创建一个构建，构建mall-swarm项目中的依赖模块，否则当构建可运行的服务模块时会因为无法找到这些模块而构建失败\n# 只install mall-common,mall-mbg两个模块 clean install -pl mall-common,mall-mbg -am 创建一个构建，单独构建并打包mall-admin模块\nclean package ${WORKSPACE}/mall-admin/pom.xml 再创建一个构建，通过SSH去执行sh脚本，这里执行的是mall-admin的运行脚本：\n6.2.2 其他模块工程配置 以 mall-gateway 为例\n输入任务名称，直接复制 mall-admin 工程配置\n修改第二步构建中的 pom 文件位置和第三步构建中的 sh 文件位置\n6.3 开始构建 单击开始构建即可开始构建任务，可以实时看到任务的控制台输出\n由于作为注册中心和配置中心的Nacos已经启动了，其他模块基本没有启动顺序的限制，但是最好还是按照下面的顺序启动。\n推荐启动顺序：\nmall-auth mall-gateway mall-monitor mall-admin mall-portal mall-search ","permalink":"https://www.lvbibir.cn/posts/tech/cicd-mall-swarm/","summary":"前言 基础环境 系统：Centos 7.9.2009 minimal 配置：4 cpus / 24G mem / 50G disk 网卡：1.1.1.4/24 我这里采用的是 all-in-one 的配置，即所有操作都在一台主机上，如资源充足可以将 jenkins和gitlab 与后续项目容器分开部署 1. 系统配置 防火墙、selinux、yum sed -i \u0026#39;/SELINUX/s/enforcing/disabled/\u0026#39; /etc/sysconfig/selinux setenforce 0 iptables -F systemctl disable firewalld systemctl stop firewalld mkdir /etc/yum.repos.d/bak mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak/ curl http://mirrors.aliyun.com/repo/Centos-7.repo","title":"cicd | jenkins部署mall-swarm项目"},{"content":"系统版本：isoft-serveros-v4.2（centos7）\n源码下载链接：\nhttps://dlcdn.apache.org//apr/apr-1.7.0.tar.bz2\nhttps://dlcdn.apache.org//apr/apr-util-1.6.1.tar.bz2\nhttps://dlcdn.apache.org//httpd/httpd-2.4.52.tar.bz2\n安装依赖\nyum install -y wget gcc rpm-build yum install -y autoconf zlib-devel libselinux-devel libuuid-devel apr-devel apr-util-devel pcre-devel openldap-devel lua-devel libxml2-devel openssl-devel yum install -y libtool doxygen yum install -y postgresql-devel mysql-devel sqlite-devel unixODBC-devel nss-devel libdb4-devel依赖需要使用epel源安装，这里使用阿里的epel源\n# 添加阿里yum源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 手动修改repo文件中的系统版本，因为本系统检测到的版本号是4 sed -i \u0026#39;s/$releasever/7/g\u0026#39; /etc/yum.repos.d/CentOS-Base.repo # 安装epel源 yum install -y epel-release # 安装libdb4-devel yum install -y libdb4-devel 编译准备\n[root@localhost ~]# mkdir -p /root/rpmbuild/{SPECS,SOURCES} [root@localhost ~]# cd /root/rpmbuild/SOURCES/ [root@localhost SOURCES]# wget --no-check-certificate https://dlcdn.apache.org//apr/apr-util-1.6.1.tar.bz2 [root@localhost SOURCES]# tar jxf apr-1.7.0.tar.bz2 [root@localhost SOURCES]# tar jxf apr-util-1.6.1.tar.bz2 [root@localhost SOURCES]# tar jxf httpd-2.4.52.tar.bz2 [root@localhost SOURCES]# cp apr-1.7.0/apr.spec ../SPECS/ [root@localhost SOURCES]# cp apr-util-1.6.1/apr-util.spec ../SPECS/ [root@localhost SOURCES]# cp httpd-2.4.52/httpd.spec ../SPECS/ 开始编译\n[root@localhost SOURCES]# cd ../SPECS/ # 修改spec文件 [root@localhost SPECS]# vim apr.spec Release: 1%dist [root@localhost SPECS]# vim apr-util.spec Release: 1%dist [root@localhost SPECS]# vim httpd.spec Release: 1%dist [root@localhost SPECS]# rpmbuild -ba apr.spec [root@localhost SPECS]# rpm -Uvh /root/rpmbuild/RPMS/x86_64/apr-* [root@localhost SPECS]# rpmbuild -ba apr-util.spec [root@localhost SPECS]# rpm -Uvh /root/rpmbuild/RPMS/x86_64/apr-util-* [root@localhost SPECS]# rpmbuild -ba httpd.spec [root@localhost SPECS]# rpm -Uvh /root/rpmbuild/RPMS/x86_64/httpd-* [root@localhost SPECS]# rpm -Uvh /root/rpmbuild/RPMS/x86_64/mod_* # 打包所有的软件包 [root@localhost ~]# tar zcf httpd-2.4.25.tar.gz x86_64/ 这里修改%dist是为了修改编译后生成的软件包的名字，dist具体代表什么可以在/etc/rpm/macros.dist文件中看到\n","permalink":"https://www.lvbibir.cn/posts/tech/httpd-src-build-rpm/","summary":"系统版本：isoft-serveros-v4.2（centos7） 源码下载链接： https://dlcdn.apache.org//apr/apr-1.7.0.tar.bz2 https://dlcdn.apache.org//apr/apr-util-1.6.1.tar.bz2 https://dlcdn.apache.org//httpd/httpd-2.4.52.tar.bz2 安装依赖 yum install -y wget gcc rpm-build yum install -y autoconf zlib-devel libselinux-devel libuuid-devel apr-devel apr-util-devel pcre-devel openldap-devel lua-devel libxml2-devel openssl-devel yum install -y libtool doxygen yum install -y postgresql-devel mysql-devel sqlite-devel unixODBC-devel nss-devel libdb4-devel依赖需要使用epel源安装，这里使用阿里的epel源 # 添加阿里yum源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 手动修改repo","title":"httpd源码打包编译成rpm包"},{"content":"环境 iSoftserver-v4.2(Centos-7)\nopenssl version：1.0.2k\n编译 从github上看到的编译脚本，本地修改后：\n#!/bin/bash set -e set -v mkdir ~/openssl \u0026amp;\u0026amp; cd ~/openssl yum -y install \\ curl \\ which \\ make \\ gcc \\ perl \\ perl-WWW-Curl \\ rpm-build # Get openssl tarball cp /root/openssl-1.1.1m.tar.gz ./ # SPEC file cat \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; \u0026gt; ~/openssl/openssl.spec Summary: OpenSSL 1.1.1m for Centos Name: openssl Version: %{?version}%{!?version:1.1.1m} Release: 1%{?dist} Obsoletes: %{name} \u0026lt;= %{version} Provides: %{name} = %{version} URL: https://www.openssl.org/ License: GPLv2+ Source: https://www.openssl.org/source/%{name}-%{version}.tar.gz BuildRequires: make gcc perl perl-WWW-Curl BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root %global openssldir /usr/openssl %description OpenSSL RPM for version 1.1.1m on Centos %package devel Summary: Development files for programs which will use the openssl library Group: Development/Libraries Requires: %{name} = %{version}-%{release} %description devel OpenSSL RPM for version 1.1.1m on Centos (development package) %prep %setup -q %build ./config --prefix=%{openssldir} --openssldir=%{openssldir} make %install [ \u0026#34;%{buildroot}\u0026#34; != \u0026#34;/\u0026#34; ] \u0026amp;\u0026amp; %{__rm} -rf %{buildroot} %make_install mkdir -p %{buildroot}%{_bindir} mkdir -p %{buildroot}%{_libdir} ln -sf %{openssldir}/lib/libssl.so.1.1 %{buildroot}%{_libdir} ln -sf %{openssldir}/lib/libcrypto.so.1.1 %{buildroot}%{_libdir} ln -sf %{openssldir}/bin/openssl %{buildroot}%{_bindir} %clean [ \u0026#34;%{buildroot}\u0026#34; != \u0026#34;/\u0026#34; ] \u0026amp;\u0026amp; %{__rm} -rf %{buildroot} %files %{openssldir} %defattr(-,root,root) /usr/bin/openssl /usr/lib64/libcrypto.so.1.1 /usr/lib64/libssl.so.1.1 %files devel %{openssldir}/include/* %defattr(-,root,root) %post -p /sbin/ldconfig %postun -p /sbin/ldconfig EOF mkdir -p /root/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS} cp ~/openssl/openssl.spec /root/rpmbuild/SPECS/openssl.spec mv openssl-1.1.1m.tar.gz /root/rpmbuild/SOURCES cd /root/rpmbuild/SPECS \u0026amp;\u0026amp; \\ rpmbuild \\ -D \u0026#34;version 1.1.1m\u0026#34; \\ -ba openssl.spec # Before Uninstall Openssl : rpm -qa openssl # Uninstall Current Openssl Vesion : yum -y remove openssl # For install: rpm -ivvh /root/rpmbuild/RPMS/x86_64/openssl-1.1.1m-1.el7.x86_64.rpm --nodeps # Verify install: rpm -qa openssl # openssl version 运行脚本\nchmod 755 install_openssl-1.1.1m.sh ./isntall_openssl-1.1.1m.sh tree rpmbuild/*RPMS 升级 rpm -e openssl --nodeps rpm -ivh openssl-1.1.1m-1.el7.isoft.x86_64.rpm --nodeps openssl version ","permalink":"https://www.lvbibir.cn/posts/tech/rpm-build-openssl/","summary":"环境 iSoftserver-v4.2(Centos-7) openssl version：1.0.2k 编译 从github上看到的编译脚本，本地修改后： #!/bin/bash set -e set -v mkdir ~/openssl \u0026amp;\u0026amp; cd ~/openssl yum -y install \\ curl \\ which \\ make \\ gcc \\ perl \\ perl-WWW-Curl \\ rpm-build # Get openssl tarball cp /root/openssl-1.1.1m.tar.gz ./ # SPEC file cat \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; \u0026gt; ~/openssl/openssl.spec Summary: OpenSSL 1.1.1m for Centos Name: openssl Version: %{?version}%{!?version:1.1.1m} Release: 1%{?dist} Obsoletes: %{name} \u0026lt;= %{version} Provides: %{name} = %{version} URL: https://www.openssl.org/ License: GPLv2+ Source: https://www.openssl.org/source/%{name}-%{version}.tar.gz BuildRequires: make gcc perl perl-WWW-Curl BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root %global openssldir /usr/openssl %description OpenSSL RPM for version 1.1.1m on Centos %package devel Summary: Development files for programs which will use the openssl library","title":"openssl源码打包编译成rpm包"},{"content":"前言 在使用 kolla-ansible 部署多节点 openstack 时，所有节点的外网网卡名称和管理网卡名称需要一样，其中两台是型号相同的物理机，网卡名无需变动，第三台是虚拟机，默认是 ens* 形式的网卡，需要改成 enp*s*f* 的格式\n修改配置文件 vim /etc/sysconfig/network-scripts/ifcfg-ens32 配置网络规则命名文件 vim /etc/udev/rules.d/70-persistent-ipoib.rules # 添加如下行，mac 地址自行修改 SUBSYSTEM==\u0026#34;net\u0026#34;, ACTION==\u0026#34;add\u0026#34;, DRIVERS==\u0026#34;?*\u0026#34;, ATTR{address}==\u0026#34;00:0c:29:bc:1e:01\u0026#34;, ATTR{type}==\u0026#34;1\u0026#34;, KERNEL==\u0026#34;eth*\u0026#34;, NAME=\u0026#34;enp11s0f0\u0026#34; 配置 grub 并重启 vim /etc/default/grub # 修改如下行 GRUB_CMDLINE_LINUX=\u0026#34;crashkernel=auto rd.lvm.lv=centos/root net.ifnames=0 rd.lvm.lv=centos/swap rhgb quiet\u0026#34; grub2-mkconfig -o /boot/grub2/grub.cfg 之后直接reboot重启系统\n参考 https://www.xmodulo.com/change-network-interface-name-centos7.html\n","permalink":"https://www.lvbibir.cn/posts/tech/centos7-change-network-card-name/","summary":"前言 在使用 kolla-ansible 部署多节点 openstack 时，所有节点的外网网卡名称和管理网卡名称需要一样，其中两台是型号相同的物理机，网卡名无需变动，第三台是虚拟机，默认是 ens* 形式的网卡，需要改成 enp*s*f* 的格式 修改配置文件 vim /etc/sysconfig/network-scripts/ifcfg-ens32 配置网络规则命名文件 vim /etc/udev/rules.d/70-persistent-ipoib.rules # 添加如下行，mac 地址自行修改 SUBSYSTEM==\u0026#34;net\u0026#34;, ACTION==\u0026#34;add\u0026#34;, DRIVERS==\u0026#34;?*\u0026#34;, ATTR{address}==\u0026#34;00:0c:29:bc:1e:01\u0026#34;, ATTR{type}==\u0026#34;1\u0026#34;, KERNEL==\u0026#34;eth*\u0026#34;, NAME=\u0026#34;enp11s0f0\u0026#34; 配置 grub 并重启 vim /etc/default/grub # 修改如","title":"centos7 修改网卡名称"},{"content":"pg_num 用此命令创建存储池时：\nceph osd pool create {pool-name} pg_num 确定pg_num取值是强制性的，因为不能自动计算。常用的较为通用的取值：\n少于5个osd，pg_num设置为128 osd数量在 5 到 10 个时，pg_num设置为512 osd数量在 10 到 50 个时，pg_num = 4096 osd数量大于50是，需要理解ceph的权衡算法，自己计算pg_num取值 自行计算pg_num取值时可使用ceph配套的pg_num取值工具 pgcalc（https://old.ceph.com/pgcalc/） 参考 https://www.cnblogs.com/varden/p/13921172.html\n","permalink":"https://www.lvbibir.cn/posts/tech/ceph-pg-num-config-create-pool/","summary":"pg_num 用此命令创建存储池时： ceph osd pool create {pool-name} pg_num 确定pg_num取值是强制性的，因为不能自动计算。常用的较为通用的取值： 少于5个osd，pg_num设置为128 osd数量在 5 到 10 个时，pg_num设置为512 osd数量在 10 到 50 个时，pg_num = 4096 osd数量大于50是，需要理解ceph的权衡","title":"ceph创建pool时pg_num的配置"},{"content":"python方式 批量导出，运行后所有tar包都在当前目录下\n# encoding: utf-8 import re import os import subprocess if __name__ == \u0026#34;__main__\u0026#34;: p = subprocess.Popen(\u0026#39;docker images\u0026#39;, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in p.stdout.readlines(): # 此处的正则表达式是为了匹配镜像名以kolla为开头的镜像 # 实际使用中根据需要自行调整 m = re.match(r\u0026#39;(^kolla[^\\s]*\\s*)\\s([^\\s]*\\s)\u0026#39;, line) if not m: continue # 镜像名 iname = m.group(1).strip() # tag itag = m.group(2).strip() # tar包的名字 if iname.find(\u0026#39;/\u0026#39;): tarname = iname.split(\u0026#39;/\u0026#39;)[0] + \u0026#39;_\u0026#39; + iname.split(\u0026#39;/\u0026#39;)[-1] + \u0026#39;_\u0026#39; + itag + \u0026#39;.tar\u0026#39; else: tarname = iname + \u0026#39;_\u0026#39; + itag + \u0026#39;.tar\u0026#39; print tarname ifull = iname + \u0026#39;:\u0026#39; + itag #save cmd = \u0026#39;docker save -o \u0026#39; + tarname + \u0026#39; \u0026#39; + ifull print os.system(cmd) retval = p.wait() 批量导入，同理导入当前目录下的所有的tar包\nimport os images = os.listdir(os.getcwd()) for imagename in images: if imagename.endswith(\u0026#39;.tar\u0026#39;): print(imagename) os.system(\u0026#39;docker load -i %s\u0026#39;%imagename) bash方式 导出 #!/bin/bash docker images \u0026gt; images.txt awk \u0026#39;{print $1}\u0026#39; images.txt \u0026gt; images_cut.txt sed -i \u0026#39;1d\u0026#39; images_cut.txt while read LINE do docker save $LINE \u0026gt; ${LINE//\\//_}.train.tar echo ok done \u0026lt; images_cut.txt echo finish 导入 #!/bin/bash while read LINE do docker load -i $LINE echo ok done \u0026lt; tarname.txt echo finish 参考 https://www.cnblogs.com/ksir16/p/8865525.html\n","permalink":"https://www.lvbibir.cn/posts/tech/docker-import-export-image/","summary":"python方式 批量导出，运行后所有tar包都在当前目录下 # encoding: utf-8 import re import os import subprocess if __name__ == \u0026#34;__main__\u0026#34;: p = subprocess.Popen(\u0026#39;docker images\u0026#39;, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) for line in p.stdout.readlines(): # 此处的正则表达式是为了匹配镜像名以kolla为开头的镜像 # 实际使用中根据需要自行调整 m = re.match(r\u0026#39;(^kolla[^\\s]*\\s*)\\s([^\\s]*\\s)\u0026#39;, line) if not m: continue # 镜像名 iname = m.group(1).strip() # tag itag = m.group(2).strip() # tar包的名字 if iname.find(\u0026#39;/\u0026#39;): tarname = iname.split(\u0026#39;/\u0026#39;)[0] + \u0026#39;_\u0026#39; + iname.split(\u0026#39;/\u0026#39;)[-1] + \u0026#39;_\u0026#39; + itag + \u0026#39;.tar\u0026#39; else:","title":"docker | 脚本方式批量导出/导入镜像"},{"content":"pam 模块\npam：Pluggable Authentication Modules 可插拔的认证模块，linux 中的认证方式，“可插拔的”说明可以按需对认证内容进行变更。与nsswitch一样，也是一个通用框架。只不过是提供认证功能的。\n查看密码失败次数\npam_tally2 -u root # 或者 faillock --user root 重置密码失败次数\npam_tally2 -r -u root # 或者 faillock --user root --reset 具体取决于在规则文件中使用的是 pam_faillock.so模块还是 pam_tally2.so 模块\n例：\ncat /etc/pam.d/system-auth ","permalink":"https://www.lvbibir.cn/posts/tech/centos-too-many-password-attempts/","summary":"pam 模块 pam：Pluggable Authentication Modules 可插拔的认证模块，linux 中的认证方式，“可插拔的”说明可以按需对认证内容进行变更。与nsswitch一样，也是一个通用框架。只不过是提供认证功能的。 查看密码失败次数 pam_tally2 -u root # 或者 faillock --user root 重置密码失败次数 pam_tally2 -r -u root # 或者 faillock --user root --reset 具体取决于在规则文件","title":"CentOS | 密码尝试次数过多"},{"content":"查看内核版本\n[dpl@test1 ~]$ cat /etc/redhat-release Red Hat Enterprise Linux Server release 7.5 (Maipo) 下载内核\nhttps://elrepo.org/linux/kernel/el7/x86_64/RPMS/ 下载自己所需的内核 更新版本：5.10.81\n内核版本介绍：\nlt longterm的缩写 长期维护版 ml mainline的缩写 最新稳定版 使用 wget 命令下载内核 RPM 包\n[dpl@test1 ~]# wget https://dl.lamp.sh/kernel/el7/kernel-ml-5.10.81-1.el7.x86_64.rpm [dpl@test1 ~]# wget https://dl.lamp.sh/kernel/el7/kernel-ml-devel-5.10.81-1.el7.x86_64.rpm 安装内核\nyum localinstall -y kernel-ml-5.10.81-1.el7.x86_64.rpm kernel-ml-devel-5.10.81-1.el7.x86_64.rpm 查看所有可用内核启动项\n[dpl@test1 ~] awk -F\\\u0026#39; \u0026#39;$1==\u0026#34;menuentry \u0026#34; {print i++ \u0026#34; : \u0026#34; $2}\u0026#39; /etc/grub2.cfg 0 : CentOS Linux (5.10.81-1.el7.x86_64) 7 (Core) 1 : CentOS Linux (3.10.0-1160.21.1.el7.x86_64) 7 (Core) 2 : CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core) 3 : CentOS Linux (0-rescue-9a4efd5deb094f5d8a9a259066ff4f3d) 7 (Core) 记下 5.11.9 内核前面的序号，修改启动项需要\n修改默认启动项\n默认启动项由/etc/default/grub中的 GRUB_DEFAULT 控制，如果 GRUB_DEFAULT=saved，则该参数将存在 /boot/grub2/grubenv\n输入grub2-editenv list命令查看默认启动项\n[root@localhost ~]# grub2-editenv list saved_entry=CentOS Linux (3.10.0-1060.el7.x86_64) 7 (Core) 输入 grub2-set-default 命令修改默认启动项，0表示5.11.9内核的序号\n[dpl@test1 ~]# grub2-set-default 0 再次查看默认启动项，发现默认启动项已经改成了0\n10.81-1.el7.elrepo.x86_64 [dpl@test1 ~]# uname -r 5.10.81-1.el7.elrepo.x86_64 参考：https://blog.csdn.net/cqchengdan/article/details/106031823\n","permalink":"https://www.lvbibir.cn/posts/tech/centos-update-kernel-to-5.10/","summary":"查看内核版本 [dpl@test1 ~]$ cat /etc/redhat-release Red Hat Enterprise Linux Server release 7.5 (Maipo) 下载内核 https://elrepo.org/linux/kernel/el7/x86_64/RPMS/ 下载自己所需的内核 更新版本：5.10.81 内核版本介绍： lt longterm的缩写 长期维护版 ml mainline的缩写 最新稳定版 使用 wget 命令下载内核 RPM 包 [dpl@test1 ~]# wget https://dl.lamp.sh/kernel/el7/kernel-ml-5.10.81-1.el7.x86_64.rpm [dpl@test1 ~]# wget https://dl.lamp.sh/kernel/el7/kernel-ml-devel-5.10.81-1.el7.x86_64.rpm 安装内核 yum localinstall -y kernel-ml-5.10.81-1.el7.x86_64.rpm kernel-ml-devel-5.10.81-1.el7.x86_64.rpm 查看所有可用内核启动项 [dpl@test1 ~] awk -F\\\u0026#39; \u0026#39;$1==\u0026#34;menuentry \u0026#34; {print i++ \u0026#34; : \u0026#34; $2}\u0026#39; /etc/grub2.cfg 0 : CentOS","title":"centos7.5 升级内核至 5.10"},{"content":"前言 基于CVE-1999-0526漏洞的披露，对系统X服务的6000端口进行关闭\n有三种方式：\n修改系统/usr/bin/X内容，增加nolisten参数 开启系统防火墙，关闭6000端口的对外访问 禁用桌面(runlevel-5)，开机进入字符界面(runlevel-3) 修改/usr/bin/X脚本 关闭 rm -f /usr/bin/X vim /usr/bin/X ################### 添加如下内容 #!/bin/bash exec /usr/bin/Xorg \u0026#34;$@\u0026#34; -nolisten tcp exit 0 #################### chmod 777 /usr/bin/X kill -9 进程号 # ps -elf |grep X 显示的进程号 恢复 rm -f /usr/bin/X ln -s /usr/bin/Xorg /usr/bin/X kill -9 进程号 # pe -elf | grep Xorg 显示的进程号 在测试过程中出现过杀死X服务进程后没有自启的情况，可尝试使用 init 3 \u0026amp;\u0026amp; init 5 尝试重新启动X服务\n修改防火墙方式 # 开启除6000端口以外的所有端口(6000端口无法访问) systemctl start firewalld firewall-cmd --permanent --zone=public --add-port=1-65535/udp firewall-cmd --permanent --zone=public --add-port=1-5999/tcp firewall-cmd --permanent --zone=public --add-port=6001-65535/tcp firewall-cmd --reload firewall-cmd --list-all # 恢复（6000端口可以访问） firewall-cmd --permanent --zone=public --add-port=6000/tcp firewall-cmd --reload firewall-cmd --list-all 参考 https://bugzilla.redhat.com/show_bug.cgi?id=1647621\n","permalink":"https://www.lvbibir.cn/posts/tech/cve-1999-0526/","summary":"前言 基于CVE-1999-0526漏洞的披露，对系统X服务的6000端口进行关闭 有三种方式： 修改系统/usr/bin/X内容，增加nolisten参数 开启系统防火墙，关闭6000端口的对外访问 禁用桌面(runlevel-5)，开机进入字符界面(runlevel-3) 修改/usr/","title":"CVE-1999-0526"},{"content":"基本环境 物理环境：Vmware Workstaion 系统版本：Centos-7.9-Minimal 两个osd节点添加一块虚拟磁盘，建议不小于20G ip hostname services 192.168.150.101 ceph-admin(ceph-deploy) mds1、mon1、mon_mgr、ntp-server 192.168.150.102 ceph-node1 osd1 192.168.150.103 ceph-node2 osd2 前期配置 以下操作所有节点都需执行\n修改主机名\nhostnamectl set-hostname ceph-admin bash hostnamectl set-hostname ceph-node1 bash hostnamectl set-hostname ceph-node2 bash 修改hosts文件\nvim /etc/hosts 192.168.150.101 ceph-admin 192.168.150.102 ceph-node1 192.168.150.103 ceph-node2 关闭防火墙和selinux、修改yum源及安装一些常用工具\n这里提供了一个简单的系统初始化脚本用来做上述操作，适用于Centos7\nchmod 777 init.sh ./init.sh #!/bin/bash echo \u0026#34;========start=============\u0026#34; sed -i \u0026#39;/SELINUX/s/enforcing/disabled/\u0026#39; /etc/sysconfig/selinux setenforce 0 iptables -F systemctl disable firewalld systemctl stop firewalld echo \u0026#34;====dowload wget=========\u0026#34; yum install -y wget echo \u0026#34;====backup repo===========\u0026#34; mkdir /etc/yum.repos.d/bak mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/bak/ echo \u0026#34;====dowload aliyum-repo====\u0026#34; wget http://mirrors.aliyun.com/repo/Centos-7.repo -O /etc/yum.repos.d/Centos-Base.repo wget http://mirrors.aliyun.com/repo/epel-7.repo -O /etc/yum.repos.d/epel.repo echo \u0026#34;====upgrade yum============\u0026#34; yum clean all yum makecache fast echo \u0026#34;====dowload tools=========\u0026#34; yum install -y net-tools vim bash-completion echo \u0026#34;=========finish============\u0026#34; 每个节点安装和配置NTP（官方推荐的是集群的所有节点全部安装并配置 NTP，需要保证各节点的系统时间一致。没有自己部署ntp服务器，就在线同步NTP）\nyum install chrony -y systemctl start chronyd systemctl enable chronyd ceph-admin\nvim /etc/chrony.conf systemctl restart chronyd chronyc sources 这里使用阿里云的ntp服务器\nceph-node1、ceph-node2\nvim /etc/chrony.conf systemctl restart chronyd chronyc sources 这里指定ceph-admin节点的ip即可\n添加ceph源\nyum -y install epel-release rpm --import http://mirrors.163.com/ceph/keys/release.asc rpm -Uvh --replacepkgs http://mirrors.163.com/ceph/rpm-nautilus/el7/noarch/ceph-release-1-1.el7.noarch.rpm [Ceph] name=Ceph packages for $basearch baseurl=http://download.ceph.com/rpm-nautilus/el7/$basearch enabled=1 gpgcheck=1 type=rpm-md gpgkey=https://download.ceph.com/keys/release.asc [Ceph-noarch] name=Ceph noarch packages baseurl=http://download.ceph.com/rpm-nautilus/el7/noarch enabled=1 gpgcheck=1 type=rpm-md gpgkey=https://download.ceph.com/keys/release.asc [ceph-source] name=Ceph source packages baseurl=http://download.ceph.com/rpm-nautilus/el7/SRPMS enabled=1 gpgcheck=1 type=rpm-md gpgkey=https://download.ceph.com/keys/release.asc 磁盘准备 以下操作在osd节点（ceph-node1、ceph-node2）执行\n# 检查磁盘 [root@ceph-node1 ~]# fdisk -l /dev/sdb Disk /dev/sdb: 21.5 GB, 21474836480 bytes, 41943040 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes # 格式化磁盘 [root@ceph-node1 ~]# parted -s /dev/sdb mklabel gpt mkpart primary xfs 0% 100% [root@ceph-node1 ~]# mkfs.xfs /dev/sdb -f meta-data=/dev/sdb isize=512 agcount=4, agsize=1310720 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0, sparse=0 data = bsize=4096 blocks=5242880, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal log bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 查看磁盘格式 [root@ceph-node1 ~]# blkid -o value -s TYPE /dev/sdb xfs 安装ceph集群 配置ssh免密\n[root@ceph-admin ~]# ssh-keygen # 一路回车 [root@ceph-admin ~]# ssh-copy-id root@ceph-node1 [root@ceph-admin ~]# ssh-copy-id root@ceph-node2 安装ceph-deploy\n[root@ceph-admin ~]# yum install -y python2-pip [root@ceph-admin ~]# yum install -y ceph-deploy 创建文件夹用户存放集群文件\n[root@ceph-admin ~]# mkdir /root/my-ceph [root@ceph-admin ~]# cd /root/my-ceph/ 创建集群（后面填写monit节点的主机名，这里monit节点和管理节点是同一台机器，即ceph-admin）\n[root@ceph-admin my-ceph]# ceph-deploy new ceph-admin [ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf [ceph_deploy.cli][INFO ] Invoked (2.0.1): /usr/bin/ceph-deploy new ceph-admin [ceph_deploy.cli][INFO ] ceph-deploy options: [ceph_deploy.cli][INFO ] username : None [ceph_deploy.cli][INFO ] func : \u0026lt;function new at 0x7f2217df3de8\u0026gt; [ceph_deploy.cli][INFO ] verbose : False [ceph_deploy.cli][INFO ] overwrite_conf : False [ceph_deploy.cli][INFO ] quiet : False [ceph_deploy.cli][INFO ] cd_conf : \u0026lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f221756e4d0\u0026gt; [ceph_deploy.cli][INFO ] cluster : ceph [ceph_deploy.cli][INFO ] ssh_copykey : True [ceph_deploy.cli][INFO ] mon : [\u0026#39;ceph-admin\u0026#39;] [ceph_deploy.cli][INFO ] public_network : None [ceph_deploy.cli][INFO ] ceph_conf : None [ceph_deploy.cli][INFO ] cluster_network : None [ceph_deploy.cli][INFO ] default_release : False [ceph_deploy.cli][INFO ] fsid : None [ceph_deploy.new][DEBUG ] Creating new cluster named ceph [ceph_deploy.new][INFO ] making sure passwordless SSH succeeds [ceph-admin][DEBUG ] connected to host: ceph-admin [ceph-admin][DEBUG ] detect platform information from remote host [ceph-admin][DEBUG ] detect machine type [ceph-admin][DEBUG ] find the location of an executable [ceph-admin][INFO ] Running command: /usr/sbin/ip link show [ceph-admin][INFO ] Running command: /usr/sbin/ip addr show [ceph-admin][DEBUG ] IP addresses found: [u\u0026#39;192.168.150.101\u0026#39;] [ceph_deploy.new][DEBUG ] Resolving host ceph-admin [ceph_deploy.new][DEBUG ] Monitor ceph-admin at 192.168.150.101 [ceph_deploy.new][DEBUG ] Monitor initial members are [\u0026#39;ceph-admin\u0026#39;] [ceph_deploy.new][DEBUG ] Monitor addrs are [\u0026#39;192.168.150.101\u0026#39;] [ceph_deploy.new][DEBUG ] Creating a random mon key... [ceph_deploy.new][DEBUG ] Writing monitor keyring to ceph.mon.keyring... [ceph_deploy.new][DEBUG ] Writing initial config to ceph.conf... 修改集群配置文件\n注意：mon_host必须和public network 网络是同网段内\n[root@ceph-admin my-ceph]# vim ceph.conf # 添加如下两行内容 ...... public_network = 192.168.150.0/24 osd_pool_default_size = 2 开始安装\n[root@ceph-admin my-ceph]# ceph-deploy install --release nautilus ceph-admin ceph-node1 ceph-node2 # 出现以下提示说明安装成功 [ceph-node2][DEBUG ] Complete! [ceph-node2][INFO ] Running command: ceph --version [ceph-node2][DEBUG ] ceph version 12.2.13 (584a20eb0237c657dc0567da126be145106aa47e) nautilus (stable) 初始化monit监控节点，并收集所有密钥\n[root@ceph-admin my-ceph]# ceph-deploy mon create-initial [root@ceph-admin my-ceph]# ceph-deploy gatherkeys ceph-admin 检查OSD节点上所有可用的磁盘\n[root@ceph-admin my-ceph]# ceph-deploy disk list ceph-node1 ceph-node2 删除所有osd节点上的分区、准备osd及激活osd\n主机上有多块磁盘要作为osd时：ceph-deploy osd create ceph-node21 --data /dev/sdb --data /dev/sdc\n[root@ceph-admin my-ceph]# ceph-deploy osd create ceph-node1 --data /dev/sdb [root@ceph-admin my-ceph]# ceph-deploy osd create ceph-node2 --data /dev/sdb 在两个osd节点上通过命令已显示磁盘已成功mount\n[root@ceph-node1 ~]# lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 20G 0 disk ├─sda1 8:1 0 1G 0 part /boot └─sda2 8:2 0 19G 0 part ├─centos-root 253:0 0 17G 0 lvm / └─centos-swap 253:1 0 2G 0 lvm [SWAP] sdb 8:16 0 20G 0 disk └─ceph--2bb0ec8d--547c--42c2--9858--08ccfd043bd4-osd--block--33e8dba4--6dfc--4753--b9ba--0d0c54166f0c 253:2 0 20G 0 lvm sr0 查看osd\n[root@ceph-admin my-ceph]# ceph-deploy disk list ceph-node1 ceph-node2 ...... ...... [ceph-node1][INFO ] Disk /dev/mapper/ceph--2bb0ec8d--547c--42c2--9858--08ccfd043bd4-osd--block--33e8dba4--6dfc--4753--b9ba--0d0c54166f0c: 21.5 GB, 21470642176 bytes, 41934848 sectors ...... ...... [ceph-node2][INFO ] Disk /dev/mapper/ceph--f9a95e6c--fc7b--46b4--a835--dd997c0d6335-osd--block--db903124--4c01--40d7--8a58--b26e17c1db29: 21.5 GB, 21470642176 bytes, 41934848 sectors 同步集群文件，这样就可以在所有节点执行ceph命令了\n[root@ceph-admin my-ceph]# ceph-deploy admin ceph-admin ceph-node1 ceph-node2 在其他节点查看osd的目录树\n[root@ceph-node1 ~]# ceph osd tree ID CLASS WEIGHT TYPE NAME STATUS REWEIGHT PRI-AFF -1 0.03897 root default -3 0.01949 host ceph-node1 0 hdd 0.01949 osd.0 up 1.00000 1.00000 -5 0.01949 host ceph-node2 1 hdd 0.01949 osd.1 up 1.00000 1.00000 配置mgr\n[root@ceph-admin my-ceph]# ceph-deploy mgr create ceph-admin 查看集群状态和集群service状态\n此时是HEALTH_WARN状态，是由于启用了不安全模式\n[root@ceph-admin my-ceph]# ceph health HEALTH_WARN mon is allowing insecure global_id reclaim [root@ceph-admin my-ceph]# ceph -s cluster: id: fd816347-598c-4ed6-b356-591a618a0bdc health: HEALTH_WARN mon is allowing insecure global_id reclaim services: mon: 1 daemons, quorum ceph-admin (age 3h) mgr: mon_mgr(active, since 17s) osd: 2 osds: 2 up (since 3m), 2 in (since 3m) data: pools: 0 pools, 0 pgs objects: 0 objects, 0 B usage: 2.0 GiB used, 38 GiB / 40 GiB avail pgs: 禁用不安全模式\n[root@ceph-admin my-ceph]# ceph config set mon auth_allow_insecure_global_id_reclaim false [root@ceph-admin my-ceph]# ceph health HEALTH_OK 开启dashboard [root@ceph-admin my-ceph]# yum install -y ceph-mgr-dashboard [root@ceph-admin my-ceph]# ceph mgr module enable dashboard # 创建自签证书 [root@ceph-admin my-ceph]# ceph dashboard create-self-signed-cert # 创建密码文件 [root@ceph-admin my-ceph]# echo abc123 \u0026gt; ./dashboard_user_pw # 创建dashboard的登录用户 [root@ceph-admin my-ceph]# ceph dashboard ac-user-create admin -i ./dashboard_user_pw administrator {\u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;lastUpdate\u0026#34;: 1646037503, \u0026#34;name\u0026#34;: null, \u0026#34;roles\u0026#34;: [\u0026#34;administrator\u0026#34;], \u0026#34;password\u0026#34;: \u0026#34;$2b$12$jGsvau8jFMb4pDwLU/t8KO1sKvmBMcNUYycbXusmgkvTQzlzrMyKi\u0026#34;, \u0026#34;email\u0026#34;: null} [root@ceph-admin my-ceph]# ceph mgr services { \u0026#34;dashboard\u0026#34;: \u0026#34;https://ceph-admin:8443/\u0026#34; } 测试访问\n上图中测试环境是win10+chrome，同事反应mac+chrome会出现无法访问的情况，原因是我们使用的自签证书，浏览器并不信任此证书，可以通过以下两种方式解决\n关闭dashboard的ssl访问\n下载证书配置浏览器信任证书\n关闭dashboard的ssl访问 [root@ceph-admin my-ceph]# ceph config set mgr mgr/dashboard/ssl false [root@ceph-admin my-ceph]# ceph mgr module disable dashboard [root@ceph-admin my-ceph]# ceph mgr module enable dashboard [root@ceph-admin my-ceph]# ceph mgr services { \u0026#34;dashboard\u0026#34;: \u0026#34;http://ceph-admin:8080/\u0026#34; } 如果出现Module 'dashboard' has failed: IOError(\u0026quot;Port 8443 not free on '::'\u0026quot;,)这种报错，需要重启下mgr：systemctl restart ceph-mgr@ceph-admin\n测试访问\n开启rgw管理功能 默认object gateway功能没有开启\n创建rgw实例\nceph-deploy rgw create ceph-admin 默认运行端口是7480\n创建rgw用户\n[root@ceph-admin my-ceph]# radosgw-admin user create --uid=rgw --display-name=rgw --system 提供dashboard证书\n[root@ceph-admin my-ceph]# echo UI2T50HNZUCVVYYZNDHP \u0026gt; rgw_user_access_key [root@ceph-admin my-ceph]# echo 11rg0WbXuh2Svexck3vJKs19u1UQINixDWIpN5Dq \u0026gt; rgw_user_secret_key [root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-access-key -i rgw_user_access_key Option RGW_API_ACCESS_KEY updated [root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-secret-key -i rgw_user_secret_key Option RGW_API_SECRET_KEY updated 禁用ssl\n[root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-ssl-verify False Option RGW_API_SSL_VERIFY updated 启用rgw\n[root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-host 192.168.150.101 Option RGW_API_HOST updated [root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-port 7480 Option RGW_API_PORT updated [root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-scheme http Option RGW_API_SCHEME updated [root@ceph-admin my-ceph]# ceph dashboard set-rgw-api-user-id rgw Option RGW_API_USER_ID updated [root@ceph-admin my-ceph]# systemctl restart ceph-radosgw.target 验证\n目前object gateway功能已成功开启\n其他 清除ceph集群 清除安装包\n[root@ceph-admin ~]# ceph-deploy purge ceph-admin ceph-node1 ceph-node2 清除配置信息\n[root@ceph-admin ~]# ceph-deploy purgedata ceph-admin ceph-node1 ceph-node2 [root@ceph-admin ~]# ceph-deploy forgetkeys 每个节点删除残留的配置文件\nrm -rf /var/lib/ceph/osd/* rm -rf /var/lib/ceph/mon/* rm -rf /var/lib/ceph/mds/* rm -rf /var/lib/ceph/bootstrap-mds/* rm -rf /var/lib/ceph/bootstrap-osd/* rm -rf /var/lib/ceph/bootstrap-mon/* rm -rf /var/lib/ceph/tmp/* rm -rf /etc/ceph/* rm -rf /var/run/ceph/* 清理磁盘设备(/dev/mapper/ceph*)\nls /dev/mapper/ceph-* | xargs -I% -- dmsetup remove % dashboard无法访问的问题 在关闭dashboard的https后，出现了一个很奇怪的问题，使用chrome浏览器无法访问dashboard了，edge或者使用chrome无痕模式可以正常访问，期间尝试了各种方法包括重新配置dashboard和清理chrome浏览器的缓存和cookie等方式都没有解决问题，结果第二天起来打开环境一看自己好了（淦）\n问题情况见下图\n日志报错：\n同步ceph配置文件 ceph-deploy --overwrite-conf config push ceph-node{1,2,3,4} 添加mon节点和mgr节点 ceph-deploy mon create ceph-node{1,2,3,4} ceph-deploy mgr create ceph-node{1,2,3,4} 记得修改配置文件\n之后同步配置文件\nceph-deploy --overwrite-conf config push ceph-node{1,2,3,4} 参考 https://www.cnblogs.com/kevingrace/p/9141432.html\nhttps://www.cnblogs.com/weijie0717/p/8378485.html\nhttps://www.cnblogs.com/weijie0717/p/8383938.html\nhttps://blog.csdn.net/qq_40017427/article/details/106235456\n","permalink":"https://www.lvbibir.cn/posts/tech/ceph-v12-nautilus-cephdeploy/","summary":"基本环境 物理环境：Vmware Workstaion 系统版本：Centos-7.9-Minimal 两个osd节点添加一块虚拟磁盘，建议不小于20G ip hostname services 192.168.150.101 ceph-admin(ceph-deploy) mds1、mon1、mon_mgr、ntp-server 192.168.150.102 ceph-node1 osd1 192.168.150.103 ceph-node2 osd2 前期配置 以下操作所有节点都需执行 修改主机名 hostnamectl set-hostname ceph-admin bash hostnamectl set-hostname ceph-node1 bash hostnamectl set-hostname ceph-node2 bash 修改hos","title":"centos7 部署 ceph-v12 (nautilus) + dashboard"},{"content":" 中国科学技术大学 : https://pypi.mirrors.ustc.edu.cn/simple\n清华：https://pypi.tuna.tsinghua.edu.cn/simple\n豆瓣：http://pypi.douban.com/simple/\n华中理工大学 : http://pypi.hustunique.com/simple\n山东理工大学 : http://pypi.sdutlinux.org/simple\n阿里云：https://mirrors.aliyun.com/pypi/simple/\nlinux环境 mkdir ~/.pip cat \u0026gt; ~/.pip/pip.conf \u0026lt;\u0026lt; EOF [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ EOF windows环境 打开 cmd 使用 dos命令 set 找到 userprofile 路径，在该路径下创建 pip文件夹，在 pip文件夹下创建 pip.ini\npip.ini具体配置\n[global] timeout = 6000 index-url = https://pypi.tuna.tsinghua.edu.cn/simple trusted-host = pypi.tuna.tsinghua.edu.cn ","permalink":"https://www.lvbibir.cn/posts/tech/python3-change-pip-repo/","summary":"中国科学技术大学 : https://pypi.mirrors.ustc.edu.cn/simple 清华：https://pypi.tuna.tsinghua.edu.cn/simple 豆瓣：http://pypi.douban.com/simple/ 华中理工大学 : http://pypi.hustunique.com/simple 山东理工大学 : http://pypi.sdutlinux.org/simple 阿里云：https://mirrors.aliyun.com/pypi/si","title":"python3修改pip源"},{"content":"前言 在openEuler20.03 (LTS-SP1)系统上进行一些测试，发现某个东西会自动修改ssh配置文件导致系统无法通过密码登录，最后排查是由于安装了cloud-init导致的。\n以下是大致的排查思路\n出现这个问题前做的操作是安装了一些项目组同事指定的包，问题就应该出在这些包上\nyum install -y telnet rsync ntpdate zip unzip libaio dos2unix sos vim vim-enhanced net-tools man ftp lrzsz psmisc gzip network-scripts cloud-init cloud-utils-growpart tar libnsl authselect-compat 大致看了下，除了cloud-Init和cloud-utils-growpart这两个包其他包基本不可能去修改ssh的配置\n直接检索这两个包的所有文件中的配置，是否与PasswordAuthentication有关\n[root@localhost ~]# grep -nr PasswordAuthentication `rpm -ql cloud-utils-growpart` [root@localhost ~]# grep -nr PasswordAuthentication `rpm -ql cloud-init` 找到了修改这个参数代码的具体实现\n查看该文件\n[root@localhost ~]# vim +98 /usr/lib/python3.7/site-packages/cloudinit/config/cc_set_passwords.py 具体的判断操作和修改操作\n修改操作就不去深究了，主要看下判断操作，可以看到判断操作是使用了 util.is_true() ，该util模块也在该文件中引用了\n再去找这个util模块的具体实现\npython引用的模块路径如下，否则会抛出错误\n文件的同级路径下 sys.path 路径下 并没有在同级目录下\n[root@localhost ~]# ll /usr/lib/python3.7/site-packages/cloudinit/config/ | grep cloudinit sys.path 路径不知道可以用python终端输出下\n在/usr/lib/python3.7/site-packages路径下找到了cloudinit模块的util子模块\n查看util.is_true和util.is_false具体的函数实现\n逻辑很简单，判断 val 参数是否为bool值，否则对val参数的值进行处理后再查看是否在check_set中\n再回头看之前的/usr/lib/python3.7/site-packages/cloudinit/config/cc_set_passwords.py文件是怎样对util.is_true和util.is_false传参的\n可以看到是由handle_ssh_pwauth()函数传进来的\n再继续找哪个文件调用了这个函数\n还是这个文件，第230行\n这里参数pw_auth传的值是cfg.get(\u0026lsquo;ssh_pwauth\u0026rsquo;)\ncfg.get()这个函数get的东西是/etc/cloud/cloud.cfg配置文件下的ssh_pwauth的值\n到这里，就可以回头再看整个逻辑了\n调用handle_ssh_pwauth()函数，传了一个参数 pw_auth=0 调用util.is_true()和util.is_false函数，传了同一个参数 val=0 上述两个函数执行完后cfg_val的值最终为no 调用update_ssh_config({cfg_name: cfg_val})函数，cfg_name=PasswordAuthentication，cfg_val=no 即将sshd的配置文件的PasswordAuthentication值改为no ","permalink":"https://www.lvbibir.cn/posts/tech/cloud-init-change-ssh-config/","summary":"前言 在openEuler20.03 (LTS-SP1)系统上进行一些测试，发现某个东西会自动修改ssh配置文件导致系统无法通过密码登录，最后排查是由于安装了cloud-init导致的。 以下是大致的排查思路 出现这个问题前做的操作是安装了一些项目组同事指定的包，问题就应该出在这些包上 yum","title":"ssh服务异常 | cloud-init自动修改ssh配置文件"},{"content":"前言 要修改rpm包中的文件，对于自己编译的rpm包，只需要在源码中修改好然后重新编译即可。而对于并不是自己编译的rpm包，且不熟悉编译环境的情况下，可以使用rpm-build和rpm-rebuild工具反编译来修改rpm中的文件\n这里使用ceph-mgr软件包进行演示\n安装rpm-build\u0026amp;rpmrebuild rpmrebuild官网：http://rpmrebuild.sourceforge.net\nrpmrebuild下载地址：https://sourceforge.net/projects/rpmrebuild/files/rpmrebuild/2.15/rpmrebuild-2.15.tar.gz/download\n解压rpmrebuild\n[root@localhost ~]# mkdir -p /data/rpmbuild [root@localhost ~]# tar zxf rpmrebuild-2.15.tar.gz -C /data/rpmbuild/ [root@localhost ~]# ll /opt/rpmrebuild/ rpm-build直接使用yum安装即可\n[root@localhost ~]# yum install -y rpm-build 反编译\u0026amp;修改\u0026amp;重新编译 安装准备重新打包的rpm\n[root@localhost ~]# rpm -ivh ceph-mgr-12.2.13-0.el7.x86_64.rpm 查看rpm的安装名称\n[root@localhost ~]# rpm -qa |grep mgr ceph-mgr-12.2.13-0.el7.x86_64 配置rpm编译目录\nvim ~/.rpmmacros %_topdir /data/rpmbuild 创建目录\nmkdir /data/rpmbuild/BUILDROOT mkdir /data/rpmbuild/SPECS 执行脚本\n[root@localhost ~]# cd /data/rpmbuild/ [root@localhost rpmbuild]# ./rpmrebuild.sh -s SPECS/abc.spec ceph-mgr [root@localhost rpmbuild]# cd 解压原版RPM包\n[root@localhost ~]# rpm2cpio ceph-mgr-12.2.13-0.el7.x86_64.rpm |cpio -idv 这里软件包解压后是两个目录\n根据需求替换修改解压后的文件，这里我替换两个文件/root/usr/lib64/ceph/mgr/dashboard/static/Ceph_Logo_Standard_RGB_White_120411_fa.png和/root/usr/lib64/ceph/mgr/dashboard/static/logo-mini.png，并给原先的文件做一个备份\n[root@localhost static]# mv logo-mini.png logo-mini.png.bak [root@localhost static]# mv Ceph_Logo_Standard_RGB_White_120411_fa.png Ceph_Logo_Standard_RGB_White_120411_fa.png.bak [root@localhost static]# cp kubernetes-logo.svg logo-mini.png [root@localhost static]# cp kubernetes-logo.svg Ceph_Logo_Standard_RGB_White_120411_fa.png 修改abc.spec文件\n找到原文件所在的行，添加备份文件\n[root@localhost ~]# vim /data/rpmbuild/SPECS/abc.spec 这里创建的bbb目录是临时使用，编译过程肯定会报错，因为路径不对，根据报错修改路径\n[root@localhost ~]# mkdir -p /data/rpmbuild/BUILDROOT/bbb/ [root@localhost ~]# mv ./usr/ /data/rpmbuild/BUILDROOT/bbb/ [root@localhost ~]# mv ./var/ /data/rpmbuild/BUILDROOT/bbb/ [root@localhost ~]# rpmbuild -ba /data/rpmbuild/SPECS/abc.spec 这里可以看到他请求的路径\n修改目录名\n[root@localhost ~]# mv /data/rpmbuild/BUILDROOT/bbb/ /data/rpmbuild/BUILDROOT/ceph-mgr-12.2.13-0.el7.x86_64 再次编译\n[root@localhost ~]# rpmbuild -ba /data/rpmbuild/SPECS/abc.spec 生成的rpm位置在/data/rpmbuild/RPMS/\n查看原rpm包的文件\n[root@localhost ~]# cd /usr/lib64/ceph/mgr/dashboard/static [root@localhost static]# ll total 16 drwxr-xr-x 5 root root 117 Dec 6 03:11 AdminLTE-2.3.7 -rw-r--r-- 1 root root 4801 Jan 30 2020 Ceph_Logo_Standard_RGB_White_120411_fa.png -rw-r--r-- 1 root root 1150 Jan 30 2020 favicon.ico drwxr-xr-x 7 root root 94 Dec 6 03:11 libs -rw-r--r-- 1 root root 1811 Jan 30 2020 logo-mini.png 安装新rpm包，查看文件\n[root@localhost ~]# cd /data/rpmbuild/RPMS/x86_64 [root@localhost x86_64]# rpm -e --nodeps ceph-mgr [root@localhost x86_64]# rpm -ivh ceph-mgr-12.2.13-0.el7.x86_64.rpm [root@localhost x86_64]# cd /usr/lib64/ceph/mgr/dashboard/static [root@localhost static]# ll total 24 drwxr-xr-x 5 root root 117 Dec 6 03:53 AdminLTE-2.3.7 -rw-r--r-- 1 root root 1877 Dec 6 03:44 Ceph_Logo_Standard_RGB_White_120411_fa.png -rw-r--r-- 1 root root 4801 Dec 6 03:41 Ceph_Logo_Standard_RGB_White_120411_fa.png.bak -rw-r--r-- 1 root root 1150 Dec 6 03:41 favicon.ico drwxr-xr-x 7 root root 94 Dec 6 03:53 libs -rw-r--r-- 1 root root 1877 Dec 6 03:44 logo-mini.png -rw-r--r-- 1 root root 1811 Dec 6 03:41 logo-mini.png.bak 至此，rpm包中的文件修改以及重新打包的所有步骤都已完成\n参考 https://www.cnblogs.com/felixzh/p/10564895.html\n","permalink":"https://www.lvbibir.cn/posts/tech/rpm-change-file/","summary":"前言 要修改rpm包中的文件，对于自己编译的rpm包，只需要在源码中修改好然后重新编译即可。而对于并不是自己编译的rpm包，且不熟悉编译环境的情况下，可以使用rpm-build和rpm-rebuild工具反编译来修改rpm中的文件 这里使用ceph-mgr软件包进行演示 安装rpm-b","title":"通过反编译修改rpm包内的文件"},{"content":"前期准备 1. 安装包准备 Ambari2.7.5. HDP3.1.5. libtirpc-devel: 链接：https://pan.baidu.com/s/1eteZ2jGkSq4Pz5YFfHyJgQ 提取码：6hq3\n2. 服务器配置 主机名 cpu 内存 硬盘 系统版本 ip地址 node001 4c 10g 50g isoft-serveros-4.2 192.168.150.106 node002 2c 4g 20g isoft-serveros-4.2 192.168.150.107 3. 修改系统版本文件(allnode) sed -i \u0026#39;s/4/7/g\u0026#39; /etc/redhat-release sed -i \u0026#39;s/4/7/g\u0026#39; /etc/os-release 4. 配置主机名(allnode) 2台服务器的 hosts 都需要做如下修改\n修改主机名 hostnamectl set-hostname node001 bash 修改 hosts 文件 vim /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.150.106 node001 192.168.150.107 node002 5. 关闭防火墙及selinux(allnode) 2台服务器上分别执行以下操作，关闭防火墙并配置开机不自动启动\nsystemctl stop firewalld systemctl disable firewalld setenforce 0 为了重启后依然关闭，配置如下文件\nvim /etc/sysconfig/selinux 修改 SELINUX=disabled 6. 配置ssh互信(allnode) 方法一\n在每台服务器上执行如下操作，一直回车即可\nssh-keygen -t rsa ssh-copy-id -i /root/.ssh/id_rsa.pub node001 ssh-copy-id -i /root/.ssh/id_rsa.pub node002 方法二\n在每台服务器上执行如下操作，一直回车即可\nssh-keygen -t rsa 在服务器1上将公钥（名为 id_rsa.pub 文件）追加到认证文件（名为 authorized_keys 文件）中:\ncat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys 去其他服务器节点将~/.ssh/id_rsa.pub中的内容拷贝到服务器1的~/.ssh/authorized_keys中,查看文件中的内容\ncat ~/.ssh/authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/eA09X4s5RIYvuYNxVvtOo6unY1mgipsFyoz/hy/Gwk0onfZvBi/Sl3TVRZO5aqcHccAGlLF7OPTKH1qUuKVtnUOQik0TouL5VKsOBDMHHRT9D5UwqaIE8tYDC8V6uwieFgscZcBjhrsJ/Iramo9ce7N9RTO3otRMRQxOs+Wd1F/ZOmpRtMGU2N4RH4i2quRU6m2lt/eJKpNupSHKoztTQRsEanilHVASnikAXH8JpG70iO7RXR/hLz+/Of3ISUrOMSO4/ZIIu4xnYN3jvsXOdK/qIhP/PI2s+uF22IvVE6xZYVadQFa4zAuhQmCBWkE7vMyI1UJkxP7OQYj72LUH root@node001 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnz8wHoytR2Xlnl04rQq4I2vgUVWbkKjv30pj+Toz4719ah4cY9pvZj0JsfhVzaaCsR14BLFVLkqKUhCWK3K6muT4iHb+N0WirpbwfJkztmQeco7Ha9xrPQ8v/I4xZujFoMVA0tkb/32zRTxOkPv9AUgB8V6Lin6LnB/AcnhnmoIs5PdbAdh/kBGpQGKIZkbyCUOYz9/PZuGJoJBblqfWiqzxYYLN9+cYMkmPnB1HdDewAepIsIC18U3ujE+1Su2UlmISPvvr1zG4XR4ZZoKQsOOJq3XRMGVkDvmFhl03JHZpd6BW0796CeYVZ41UomWXTOduQql+tYWUbegzGLmRZ root@node002 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8AFoGJHp2M45xLYNzXUHLWzRwHsgRPHjeErStq0tEy9bQv4OkN41j0FrxVAYJiGHdHGturriVgUEtL59RjcrJH6bAvhP54nM5YiQlNnWnSUR27Zuaodz4nhYUFq/Co5eDN6lTfL8pgYiEdpBOvE5t1w3bisdblP7YGQ2lF1zzCEGfQ79QbntEbyGNoR9sGHm11x9fOH+fape8TjQJrEAO4d1tAhMqVygQKwqwAPKeqhEum6BaLli83TsXzd7gyz9H7AAc1m04NaLB26xfynW6MVuk1j94awXKlGXjrbNTC/Kg6M8bd5PT/k3DOkx4b+nEs8xZ5x1j4D2OaO1X6rZx root@node003 设置认证文件的权限：\nchmod 600 ~/.ssh/authorized_keys 将~/.ssh/authorized_keys同步到其他节点\nscp ~/.ssh/authorized_keys node002:~/.ssh/authorized_keys 注意：这里第一次使用同步还需要密码，之后就不需要了\n验证免密是否配置成功\nssh 到不同服务器\nssh node002 7. 配置ntp时钟同步 选择一台服务器作为 NTP Server，这里选择 node001\n将如下配置vim /etc/ntp.conf\n# Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst 修改为\n# Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). #server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst server 127.127.1.0 fudge 127.127.1.0 stratum 10 node002节点做如下配置\nvim /etc/ntp.conf 将\n# Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). server 0.centos.pool.ntp.org iburst server 1.centos.pool.ntp.org iburst server 2.centos.pool.ntp.org iburst server 3.centos.pool.ntp.org iburst 修改为\n# Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). #server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst server 192.168.150.106 在每台服务器上启动ntpd服务，并配置服务开机自启动\nsystemctl restart ntpd systemctl enable ntpd 9. 设置swap(allnode) echo vm.swappiness = 1 \u0026gt;\u0026gt; /etc/sysctl.conf sysctl vm.swappiness=1 sysctl -p 10. 关闭透明大页面(allnode) 由于透明超大页面已知会导致意外的节点重新启动并导致RAC出现性能问题，因此Oracle强烈建议禁用\necho never \u0026gt; /sys/kernel/mm/transparent_hugepage/defrag echo never \u0026gt; /sys/kernel/mm/transparent_hugepage/enabled 11. 安装http服务(node001) 安装apache的httpd服务主要用于搭建OS. Ambari和hdp的yum源。在集群服务器中选择一台服务器来安装httpd服务，命令如下：\nyum -y install httpd systemctl start httpd systemctl enable httpd.service 验证，在浏览器输入http://192.168.150.106看到如下截图则说明启动成功。\n13. 安装Java(allnode) 下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\ntar -zxvf jdk-8u271-linux-x64.tar.gz mkdir /usr/local/java mv jdk1.8.0_271/* /usr/local/java 配置环境变量\nvim /root/.bashrc 添加如下配置\nexport JAVA_HOME=/usr/local/java export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JRE_HOME=$JAVA_HOME/jre 激活配置\nsource /root/.bashrc java -version 14. 安装maven3.6(node001) 下载解压\ntar -zxvf apache-maven-3.6.3-bin.tar.gz mkdir -p /opt/src/maven mv apache-maven-3.6.3/* /opt/src/maven 配置maven环境变量\nvim /root/.bashrc # set maven home export PATH=$PATH:/opt/src/maven/bin 激活\nsource /root/.bashrc 安装Ambari\u0026amp;HDP 1. 配置本地源 解压\ntar -zxvf ambari-2.7.5.0-centos7.tar.gz -C /var/www/html/ tar -zxvf HDP-3.1.5.0-centos7-rpm.tar.gz -C /var/www/html/ tar -zxvf HDP-GPL-3.1.5.0-centos7-gpl.tar.gz -C /var/www/html/ tar -zxvf HDP-UTILS-1.1.0.22-centos7.tar.gz -C /var/www/html/ ll /var/www/html/ 总用量 0 drwxr-xr-x. 3 root root 21 11月 23 22:31 ambari drwxr-xr-x. 3 1001 users 21 12月 18 2019 HDP drwxr-xr-x. 3 1001 users 21 12月 18 2019 HDP-GPL drwxr-xr-x. 3 1001 users 21 8月 13 2018 HDP-UTILS 设置设置用户组和授权\nchown -R root:root /var/www/html/HDP chown -R root:root /var/www/html/HDP-GPL chown -R root:root /var/www/html/HDP-UTILS chmod -R 755 /var/www/html/HDP chmod -R 755 /var/www/html/HDP-GPL chmod -R 755 /var/www/html/HDP-UTILS 创建 libtirpc-devel 本地源\nmkdir /var/www/html/libtirpc mv /root/libtirpc-* /var/www/html/libtirpc/ cd /var/www/html/libtirpc createrepo . 制作本地源\n配置 ambari.repo\nvim /etc/yum.repos.d/ambari.repo [Ambari-2.7.5.0] name=Ambari-2.7.5.0 baseurl=http://192.168.150.106/ambari/centos7/2.7.5.0-72/ gpgcheck=0 enabled=1 priority=1 配置 HDP 和 HDP-TILS\nvim /etc/yum.repos.d/HDP.repo [HDP-3.1.5.0] name=HDP Version - HDP-3.1.5.0 baseurl=http://192.168.150.106/HDP/centos7/3.1.5.0-152/ gpgcheck=0 enabled=1 priority=1 [HDP-UTILS-1.1.0.22] name=HDP-UTILS Version - HDP-UTILS-1.1.0.22 baseurl=http://192.168.150.106/HDP-UTILS/centos7/1.1.0.22/ gpgcheck=0 enabled=1 priority=1 [HDP-GPL-3.1.5.0] name=HDP-GPL Version - HDP-GPL-3.1.5.0 baseurl=http://192.168.150.106/HDP-GPL/centos7/3.1.5.0-152 gpgcheck=0 enabled=1 priority=1 配置 libtirpc.repo\nvim /etc/yum.repos.d/libtirpc.repo [libtirpc_repo] name=libtirpc-0.2.4-0.16 baseurl=http://192.168.150.106/libtirpc/ gpgcheck=0 enabled=1 priority=1 拷贝到其他节点\nscp /etc/yum.repos.d/* node002:/etc/yum.repos.d/ 查看源\nyum clean all yum repolist 2. 安装mariadb(node001) 安装 MariaDB 服务器\nyum install mariadb-server -y 启动并设置开机启动\nsystemctl enable mariadb systemctl start mariadb 初始化\n/usr/bin/mysql_secure_installation [...] Enter current password for root (enter for none): OK, successfully used password, moving on... [...] Set root password? [Y/n] Y New password:123456 Re-enter new password:123456 [...] Remove anonymous users? [Y/n] Y [...] Disallow root login remotely? [Y/n] N [...] Remove test database and access to it [Y/n] Y [...] Reload privilege tables now? [Y/n] Y [...] All done! If you\u0026#39;ve completed all of the above steps, your MariaDB 18 installation should now be secure. Thanks for using MariaDB! 为 MariaDB 安装 MySQL JDBC 驱动程序\ntar zxf mysql-connector-java-5.1.40.tar.gz mv mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar /usr/share/java/mysql-connector-java.jar 创建需要的数据库\n如果需要 ranger，编辑以下⽂件： vim /etc/my.cnf 并添加以下⾏：\nlog_bin_trust_function_creators = 1 重启数据库并登录\nsystemctl restart mariadb mysql -u root -p123456 3. 安装和配置ambari-server (node001) 安装 ambari-server\nyum -y install ambari-server 复制 mysql jdbc 驱动到 /var/lib/ambari-server/resources/\ncp /usr/share/java/mysql-connector-java.jar /var/lib/ambari-server/resources/ 配置 /etc/ambari-server/conf/ambari.properties，添加如下行\nvim /etc/ambari-server/conf/ambari.properties server.jdbc.driver.path=/usr/share/java/mysql-connector-java.jar 执行\nambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar 初始化 ambari-server\nambari-server setup 1） 提示是否自定义设置。输入：y Customize user account for ambari-server daemon [y/n] (n)? y （2）ambari-server 账号。 Enter user account for ambari-server daemon (root): 如果直接回车就是默认选择root用户 如果输入已经创建的用户就会显示： Enter user account for ambari-server daemon (root):ambari Adjusting ambari-server permissions and ownership... （3）设置JDK。输入：2 Checking JDK... Do you want to change Oracle JDK [y/n] (n)? y [1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8 [2] Custom JDK ============================================================================== Enter choice (1): 2 如果上面选择3自定义JDK,则需要设置JAVA_HOME。输入：/usr/local/java WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts. WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts. Path to JAVA_HOME: /usr/local/java Validating JDK on Ambari Server...done. Completing setup... （4）安装GPL，选择：y Checking GPL software agreement... GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html Enable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? y （5）数据库配置。选择：y Configuring database... Enter advanced database configuration [y/n] (n)? y （6）选择数据库类型。输入：3 Configuring database... ============================================================================== Choose one of the following options: [1] - PostgreSQL (Embedded) [2] - Oracle [3] - MySQL/ MariaDB [4] - PostgreSQL [5] - Microsoft SQL Server (Tech Preview) [6] - SQL Anywhere ============================================================================== Enter choice (3): 3 （7）设置数据库的具体配置信息，根据实际情况输入，如果和括号内相同，则可以直接回车。如果想重命名，就输入。 Hostname (localhost):node001 Port (3306): 3306 Database name (ambari): ambari Username (ambari): ambari Enter Database Password (bigdata):ambari123 Re-Enter password: ambari123 （8）将Ambari数据库脚本导入到数据库 WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql 这个sql后面会用到，导入数据库 Proceed with configuring remote database connection properties [y/n] (y)? y 登录 mariadb 创建 ambari 安装所需要的库\n设置的账号后面配置 ambari-server 的时候会用到\nmysql -uroot -p123456 CREATE DATABASE ambari; use ambari; CREATE USER \u0026#39;ambari\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;ambari123\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;ambari\u0026#39;@\u0026#39;%\u0026#39;; CREATE USER \u0026#39;ambari\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;ambari123\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;ambari\u0026#39;@\u0026#39;localhost\u0026#39;; CREATE USER \u0026#39;ambari\u0026#39;@\u0026#39;node001\u0026#39; IDENTIFIED BY \u0026#39;ambari123\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;ambari\u0026#39;@\u0026#39;node001\u0026#39;; source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql show tables; use mysql; select host,user from user where user=\u0026#39;ambari\u0026#39;; CREATE DATABASE hive; use hive; CREATE USER \u0026#39;hive\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;hive\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;hive\u0026#39;@\u0026#39;%\u0026#39;; CREATE USER \u0026#39;hive\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;hive\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;hive\u0026#39;@\u0026#39;localhost\u0026#39;; CREATE USER \u0026#39;hive\u0026#39;@\u0026#39;node001\u0026#39; IDENTIFIED BY \u0026#39;hive\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;hive\u0026#39;@\u0026#39;node001\u0026#39;; CREATE DATABASE oozie; use oozie; CREATE USER \u0026#39;oozie\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;oozie\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;oozie\u0026#39;@\u0026#39;%\u0026#39;; CREATE USER \u0026#39;oozie\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;oozie\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;oozie\u0026#39;@\u0026#39;localhost\u0026#39;; CREATE USER \u0026#39;oozie\u0026#39;@\u0026#39;node001\u0026#39; IDENTIFIED BY \u0026#39;oozie\u0026#39;; GRANT ALL PRIVILEGES ON *.* TO \u0026#39;oozie\u0026#39;@\u0026#39;node001\u0026#39;; FLUSH PRIVILEGES; 4. 安装ambari-agent(allnode) pssh -h /node.list -i \u0026#39;yum -y install ambari-agent\u0026#39; pssh -h /node.list -i \u0026#39;systemctl start ambari-agent\u0026#39; 5. 安装libtirpc-devel(allnode) pssh -h /node.list -i \u0026#39;yum -y install libtirpc-devel\u0026#39; 6. 启动ambari服务 ambari-server start 部署集群 1. 登录界面 http://192.168.150.106:8080\n默认管理员账户登录， 账户：admin 密码：admin\n2. 选择版本，配置yum源 1）选择 Launch Install Wizard 2）配置集群名称 3）选择版本并修改本地源地址\n选HDP-3.1(Default Version Definition); 选Use Local Repository; 选redhat7:\nHDP-3.1：http://node001/HDP/centos7/3.1.5.0-152/ HDP-3.1-GPL: http://node001/HDP-GPL/centos7/3.1.5.0-152/ HDP-UTILS-1.1.0.22: http://node001/HDP-UTILS/centos7/1.1.0.22/\n3. 配置节点和密钥 下载主节点的 /root/.ssh/id_rsa，并上传！点击下一步，进入确认主机界面\n也可直接 cat /root/.ssh/id_rsa 粘贴即可\n验证通过\n4. 勾选需要安装的服务 由于资源有限，这里并没有选择所有服务\n5. 分配服务 master 6. 分配服务 slaves 设置相关服务的密码 Grafana Admin: 123456 Hive Database: hive Activity Explorer’s Admin: admin\n7. 连接数据库 8. 编辑配置，默认即可 9. 开始部署 10. 安装成功 右上角两个警告是磁盘使用率警告，虚机分配的磁盘较小\n其他 1. 添加其他系统支持 HDP默认不支持安装到 isoft-serverosv4.2，需手动添加支持\nvim /usr/lib/ambari-server/lib/ambari_commons/resources/os_family.json 添加如下两行，注意缩进和逗号\n2. YARN Registry DNS 服务启动失败 lsof -i:53 kill -9 3. 设置初始检测的系统版本 vim /etc/ambari-server/conf/ambari.properties server.os_family=redhat7 server.os_type=redhat7 参考 https://blog.csdn.net/qq_36048223/article/details/116113987\n","permalink":"https://www.lvbibir.cn/posts/tech/ambari-2.7.5-and-hdp-3.1.5/","summary":"前期准备 1. 安装包准备 Ambari2.7.5. HDP3.1.5. libtirpc-devel: 链接：https://pan.baidu.com/s/1eteZ2jGkSq4Pz5YFfHyJgQ 提取码：6hq3 2. 服务器配置 主机名 cpu 内存 硬盘 系统版本 ip地址 node001 4c 10g 50g isoft-serveros-4.2 192.168.150.106 node002 2c 4g 20g isoft-serveros-4.2 192.168.150.107 3. 修改系统版本文件(allnode) sed -i \u0026#39;s/4/7/g\u0026#39; /etc/redhat-release sed -i \u0026#39;s/4/7/g\u0026#39; /etc/os-release 4. 配置主机名(al","title":"部署 Ambari 2.7.5 + HDP3.1.5"},{"content":"👉友链为随机顺序 lvbibir\u0026#39;s Blog 我的 wordpress 站点 cuikx\u0026#39;s blog cuikx\u0026#39;s blog Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 陈桂林博客 成功最有效的方法就是向有经验的人学习！ 黄忠德的博客 DevOps,SRE,Python,Golang程序员,开源爱好者 阿虚同学的储物间 收集了很多实用网站 👉友链格式 名称: lvbibir's Blog\n网址: https://www.lvbibir.cn\n图标: https://www.lvbibir.cn/img/avatar.gif\n描述: life is a fucking movie\n👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告\n","permalink":"https://www.lvbibir.cn/links/","summary":"👉友链为随机顺序 lvbibir\u0026#39;s Blog 我的 wordpress 站点 cuikx\u0026#39;s blog cuikx\u0026#39;s blog Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 陈桂林博客 成功最有效的方法就是向有经验的人学习！ 黄忠德的博客 DevOps,SRE,Python,Golang程序员,开源爱好者 阿虚同学的储物间 收集了很多实用网站 👉友链格式 名称: lvbibir's Blog 网址: https://www.lvbibir.cn 图标: https://www.lvbibir.cn/img/avatar.gif 描述: life is a","title":"🤝 友链"},{"content":"\n🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。\n👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝\n精通CSS、JavaScript、PHP、C、C＋＋、C#、java、Ruby、Perl、Lisp、python等单词的拼写；\n熟悉windows、Linux、Mac、Android、IOS等系统的开关机；\n🏹 兴趣爱好 🏃‍♂️ 跑步 | 🎮️ 游戏 | 🎧 音乐 | 📺 动漫 | 🛌 摆烂\n📈 博客变更记录 2022年9月8日 本博客正式加入 十年之约\n今夕何夕，人生能有几个十年\n2022年7月16日 迁移之前发布在 csdn 的文章，将图片外链全部转为七牛图床\n2022年7月4日 hugo 站点试运行，域名：https://www.lvbibir.cn\n2021年8月15日 将阿里云轻量服务器自带的 wordpress 应用改为 docker 应用，wordpress 站点改为 docker-compose 部署\n2021年7月13日 wordpress 博客站点开始运行，域名：https://lvbibir.cn\n","permalink":"https://www.lvbibir.cn/about/","summary":"🏡 关于本站 本博客主要记录一些学习生活，和一些个人觉得值得记录的问题及其解决办法。如果本博客能有哪些内容帮助到了你，那也是极好的。 👦🏻 博主是谁 网络时代的素质教育漏网之鱼 | 晚睡协会常任理事 | 国家级抬杠运动员 | 中国驰名窝里横 | 国宝级老污龟 | 超水平怼人大师 | 一秒入戏准影帝 精通CSS、Ja","title":"🙋🏻‍♂️ 关于"},{"content":"kolla ansible简介 kolla 的使命是为 openstack 云平台提供生产级别的、开箱即用的交付能力。kolla 的基本思想是一切皆容器，将所有服务基于 Docker 运行，并且保证一个容器只跑一个服务（进程），做到最小粒度的运行 docker。\nkolla 要实现 openetack 部署总体上分为两步，第一步是制作 docker 镜像，第二步是编排部署。因此，kolla 项目又被分为两个小项目：kolla、kolla-ansible 。\nkolla-ansible项目 https://github.com/openstack/kolla-ansible\nkolla项目 https://tarballs.opendev.org/openstack/kolla/\ndockerhub镜像地址 https://hub.docker.com/u/kolla/\n部署 openstack 集群 安装环境准备 官方部署文档： https://docs.openstack.org/kolla-ansible/train/user/quickstart.html\n本次部署train版all-in-one单节点，使用一台centos7.8 minimal节点进行部署，该节点同时作为控制节点、计算节点、网络节点和cinder存储节点使用，同时也是kolla ansible的部署节点。\nkolla安装节点要求：\n2 network interfaces 8GB main memory 40GB disk space\n如果是vmware workstation环境，勾选处理器选项的虚拟化引擎相关功能，否则后面需要配置nova_compute_virt_type=qemu参数，这里选择勾选，跳过以下步骤。\ncat /etc/kolla/globals.yml nova_compute_virt_type: \u0026#34;qemu\u0026#34; #或者部署完成后手动调整 [root@kolla ~]# cat /etc/kolla/nova-compute/nova.conf |grep virt_type #virt_type = kvm virt_type = qemu [root@kolla ~]# docker restart nova_compute kolla的安装要求目标机器至少两块网卡，本次安装使用2块网卡对应管理网络和外部网络两个网络平面，在vmware workstation虚拟机新增一块网卡ens34：\nens32，NAT模式，管理网络，正常配置静态IP即可。租户网络与该网络复用，租户vm网络不单独创建网卡 ens34，桥接模式，外部网络，无需配置IP地址，这个其实是让neutron的br-ex 绑定使用，虚拟机通过这块网卡访问外网。\nens34网卡配置参考： https://docs.openstack.org/install-guide/environment-networking-controller.html\ncat \u0026gt; /etc/sysconfig/network-scripts/ifcfg-ens34 \u0026lt;\u0026lt;EOF NAME=ens34 DEVICE=ens34 TYPE=Ethernet ONBOOT=\u0026#34;yes\u0026#34; BOOTPROTO=\u0026#34;none\u0026#34; EOF #重新加载ens34网卡设备 nmcli con reload \u0026amp;\u0026amp; nmcli con up ens34 如果启用cinder还需要额外添加磁盘，这里以添加一块/dev/sdb磁盘为例，创建为物理卷并加入卷组。\npvcreate /dev/sdb vgcreate cinder-volumes /dev/sdb 注意卷组名称为cinder-volumes，默认与后面的globals.yml中定义一致。\n[root@kolla ~]# cat /etc/kolla/globals.yml | grep cinder_volume_group #cinder_volume_group: \u0026#34;cinder-volumes\u0026#34; 部署 kolla ansible 配置主机名,kolla预检查时rabbitmq可能需要能够进行主机名解析\nhostnamectl set-hostname kolla 安装依赖\nyum install -y python-devel libffi-devel gcc openssl-devel libselinux-python python2-pip python-pbr epel-release ansible 配置阿里云pip源，否则pip安装时会很慢\nmkdir ~/.pip cat \u0026gt; ~/.pip/pip.conf \u0026lt;\u0026lt; EOF [global] trusted-host=mirrors.aliyun.com index-url=https://mirrors.aliyun.com/pypi/simple/ EOF 安装 kolla-ansible\nkolla版本与openstack版本对应关系：https://releases.openstack.org/teams/kolla.html\npip install setuptools==22.0.5 pip install pip==20.3.4 pip install wheel pip install kolla-ansible==9.1.0 --ignore-installed PyYAML 复制 kolla-ansible配置文件到当前环境\nmkdir -p /etc/kolla chown $USER:$USER /etc/kolla cp -r /usr/share/kolla-ansible/etc_examples/kolla/* /etc/kolla cp /usr/share/kolla-ansible/ansible/inventory/* . 修改ansible配置文件\ncat \u0026lt;\u0026lt; EOF | sed -i \u0026#39;/^\\[defaults\\]$/ r /dev/stdin\u0026#39; /etc/ansible/ansible.cfg host_key_checking=False pipelining=True forks=100 EOF 默认有all-in-one和multinode两个inventory文件，这里使用all-in-one，来规划集群角色，配置默认即可\n[root@kolla ~]# cat all-in-one | more 检查inventory配置是否正确，执行：\nansible -i all-in-one all -m ping 生成openstack组件用到的密码，该操作会填充/etc/kolla/passwords.yml，该文件中默认参数为空。\nkolla-genpwd 修改keystone_admin_password，可以修改为自定义的密码方便后续horizon登录，这里改为kolla。\n$ sed -i \u0026#39;s#keystone_admin_password:.*#keystone_admin_password: kolla#g\u0026#39; /etc/kolla/passwords.yml $ cat /etc/kolla/passwords.yml | grep keystone_admin_password keystone_admin_password: kolla 修改全局配置文件globals.yml，该文件用来控制安装哪些组件，以及如何配置组件，由于全部是注释，这里直接追加进去，也可以逐个找到对应项进行修改。\ncp /etc/kolla/globals.yml{,.bak} cat \u0026gt;\u0026gt; /etc/kolla/globals.yml \u0026lt;\u0026lt;EOF # Kolla options kolla_base_distro: \u0026#34;centos\u0026#34; kolla_install_type: \u0026#34;binary\u0026#34; openstack_release: \u0026#34;train\u0026#34; kolla_internal_vip_address: \u0026#34;192.168.150.155\u0026#34; # Docker options # docker_registry: \u0026#34;registry.cn-beijing.aliyuncs.com\u0026#34; # docker_namespace: \u0026#34;kollaimage\u0026#34; # Neutron - Networking Options network_interface: \u0026#34;ens32\u0026#34; neutron_external_interface: \u0026#34;ens34\u0026#34; neutron_plugin_agent: \u0026#34;openvswitch\u0026#34; enable_neutron_provider_networks: \u0026#34;yes\u0026#34; # OpenStack services enable_cinder: \u0026#34;yes\u0026#34; enable_cinder_backend_lvm: \u0026#34;yes\u0026#34; EOF 参数说明：\nkolla_base_distro: kolla镜像基于不同linux发型版构建，主机使用centos这里对应使用centos类型的docker镜像即可。 kolla_install_type: kolla镜像基于binary二进制和source源码两种类型构建，实际部署使用binary即可。 openstack_release: openstack版本可自定义，会从dockerhub拉取对应版本的镜像 kolla_internal_vip_address: 单节点部署kolla也会启用haproxy和keepalived，方便后续扩容为高可用集群，该地址是ens32网卡网络中的一个可用IP。 docker_registry: 默认从dockerhub拉取镜像，也可以本地搭建仓库，提前推送镜像上去。 docker_namespace: 阿里云kolla镜像仓库所在的命名空间，dockerhub官网默认是kolla。 network_interface: 管理网络的网卡 neutron_external_interface: 外部网络的网卡 neutron_plugin_agent: 默认启用openvswitch enable_neutron_provider_networks: 启用外部网络 enable_cinder: 启用cinder enable_cinder_backend_lvm: 指定cinder后端存储为lvm\n部署 openstack 组件 部署openstack\n# 预配置，安装docker、docker sdk、关闭防火墙、配置时间同步等 kolla-ansible -i ./all-in-one bootstrap-servers # 部署前环境检查，可能会报docker版本的错，可以忽略 kolla-ansible -i ./all-in-one prechecks # 拉取镜像，也可省略该步骤，默认会自动拉取 kolla-ansible -i ./all-in-one pull # 执行实际部署，拉取镜像，运行对应组件容器 kolla-ansible -i ./all-in-one deploy # 生成openrc文件 kolla-ansible post-deploy 以上部署没有报错中断说明部署成功，所有openstack组件以容器方式运行，查看容器\n[root@kolla ~]# docker ps -a 确认没有Exited等异常状态的容器\n[root@kolla ~]# docker ps -a | grep -v Up 本次部署运行了38个容器\n[root@localhost kolla-env]# docker ps -a | wc -l 39 查看拉取的镜像\n[root@kolla ~]# docker images | wc -l 39 [root@kolla ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE kolla/centos-binary-heat-api train b97df3444b35 10 months ago 1.11GB kolla/centos-binary-heat-engine train e19de6feec32 10 months ago 1.11GB ...... 查看cinder使用的卷，自动创建了lvm\n[root@kolla ~]# lsblk | grep cinder ├─cinder--volumes-cinder--volumes--pool_tmeta 253:3 0 20M 0 lvm │ └─cinder--volumes-cinder--volumes--pool 253:5 0 19G 0 lvm └─cinder--volumes-cinder--volumes--pool_tdata 253:4 0 19G 0 lvm └─cinder--volumes-cinder--volumes--pool 253:5 0 19G 0 lvm [root@kolla ~]# lvs | grep cinder cinder-volumes-pool cinder-volumes twi-a-tz-- 19.00g 0.00 10.55 另外需要注意，不要在该节点安装libvirt等工具，这些工具安装后可能会启用libvirtd和iscsid.sock等服务，kolla已经在容器中运行了这些服务，这些服务会调用节点上的sock文件，如果节点上也启用这些服务去抢占这些文件，会导致容器异常。默认kolla在预配置时也会主动禁用节点上的相关服务。\n安装 openStack 客户端 可以直接安装到服务器上或者使用docker安装容器\n推荐使用docker容器方式运行客户端\n使用docker容器作为客户端\ndocker run -d --name client \\ --restart always \\ -v /etc/kolla/admin-openrc.sh:/admin-openrc.sh:ro \\ -v /usr/share/kolla-ansible/init-runonce:/init-runonce:rw \\ kolla/centos-binary-openstack-base:train sleep infinity docker exec -it client bash source /admin-openrc.sh openstack service list yum安装openstack客户端\n#启用openstack存储库 yum install -y centos-release-openstack-train #安装openstack客户端 yum install -y python-openstackclient #启用selinux,安装openstack-selinux软件包以自动管理OpenStack服务的安全策略 yum install -y openstack-selinux #报错处理 pip uninstall urllib3 yum install -y python2-urllib3 运行 cirros 实例 kolla ansible提供了一个快速创建cirros demo实例的脚本/usr/share/kolla-ansible/init-runonce。\n脚本需要cirros镜像，如果网络较慢可以使用浏览器下载放在/opt/cache/files目录下：\nwget https://github.com/cirros-dev/cirros/releases/download/0.4.0/cirros-0.4.0-x86_64-disk.img mkdir -p /opt/cache/files/ mv cirros-0.4.0-x86_64-disk.img /opt/cache/files/ 定义init-runonce示例脚本外部网络配置：\n#定义init-runonce示例脚本外部网络配置 vim /usr/share/kolla-ansible/init-runonce EXT_NET_CIDR=${EXT_NET_CIDR:-\u0026#39;192.168.35/24\u0026#39;} EXT_NET_RANGE=${EXT_NET_RANGE:-\u0026#39;start=192.168.35.150,end=192.168.35.188\u0026#39;} EXT_NET_GATEWAY=${EXT_NET_GATEWAY:-\u0026#39;192.168.35.1\u0026#39;} #执行脚本，上传镜像到glance，创建内部网络、外部网络、flavor、ssh key，并运行一个实例 source /etc/kolla/admin-openrc.sh /usr/share/kolla-ansible/init-runonce 参数说明：\nEXT_NET_CIDR 指定外部网络，由于使用桥接模式，直接桥接到了电脑的无线网卡，所以这里网络就是无线网卡的网段。 EXT_NET_RANGE 指定从外部网络取出一个地址范围，作为外部网络的地址池 EXT_NET_GATEWAY 外部网络网关，这里与wifi网络使用的网关一致\n根据最终提示运行实例\nopenstack server create \\ --image cirros \\ --flavor m1.tiny \\ --key-name mykey \\ --network demo-net \\ demo1 访问 openstack horizon 访问openstack horizon需要使用vip地址，节点上可以看到由keepalived容器生成的vip\n[root@kolla ~]# ip a |grep ens32 2: ens32: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 inet 192.168.150.101/24 brd 192.168.150.255 scope global noprefixroute dynamic ens32 inet 192.168.150.155/32 scope global ens32 浏览器直接访问该地址即可登录到horizon\nhttp://192.168.150.155\n我这里的用户名密码为admin/kolla，信息可以从admin-openrc.sh中获取\n[root@kolla ~]# cat /etc/kolla/admin-openrc.sh # Clear any old environment that may conflict. for key in $( set | awk \u0026#39;{FS=\u0026#34;=\u0026#34;} /^OS_/ {print $1}\u0026#39; ); do unset $key ; done export OS_PROJECT_DOMAIN_NAME=Default export OS_USER_DOMAIN_NAME=Default export OS_PROJECT_NAME=admin export OS_TENANT_NAME=admin export OS_USERNAME=admin export OS_PASSWORD=kolla export OS_AUTH_URL=http://192.168.150.155:35357/v3 export OS_INTERFACE=internal export OS_ENDPOINT_TYPE=internalURL export OS_IDENTITY_API_VERSION=3 export OS_REGION_NAME=RegionOne export OS_AUTH_PLUGIN=password 默认登录后如下\n在horizion查看创建的网络和实例\n登录实例控制台，验证实例与外网的连通性，cirros用户密码在初次登录时有提示：\n为实例绑定浮动IP地址，方便从外部ssh远程连接到实例\n点击+随机分配一个浮动IP\n在实例界面可以看到绑定的浮动ip\n在kolla节点上或者在集群外部使用SecureCRT等ssh工具连接到实例。cirros镜像默认用户密码为cirros/gocubsgo，该镜像信息官网有介绍： https://docs.openstack.org/image-guide/obtain-images.html#cirros-test\n[root@kolla ~]# ssh cirros@192.168.35.183 cirros@192.168.35.183\u0026#39;s password: 运行 centos 实例 centos官方维护有相关cloud image，如果不需要进行定制，可以直接下载来运行实例。\n参考：https://docs.openstack.org/image-guide/obtain-images.html\nCentOS官方维护的镜像下载地址： http://cloud.centos.org/centos/7/images/\n也可以使用命令直接下载镜像，但是下载可能较慢，建议下载好在进行上传。以centos7.8为例：\nwget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-2003.qcow2c 下载完成后上传镜像到openstack，直接在horizon上传即可。也可以使用命令上传。\n注意：默认该镜像运行的实例只能使用ssh key以centos用户身份登录，如果需要使用root远程ssh连接到实例需要在上传前为镜像配置root免密并开启ssh访问。\n参考：https://blog.csdn.net/networken/article/details/106713658\n另外我们的命令客户端在容器中，所有这里有些不方便，首先要将镜像复制到容器中，然后使用openstack命令上传。\n这里复制到client容器的根目录下。\n[root@kolla ~]# docker cp CentOS-7-x86_64-GenericCloud-2003.qcow2c client:/ [root@kolla ~]# docker exec -it client bash ()[root@f11a103c5ade /]# ()[root@f11a103c5ade /]# source /admin-openrc.sh ()[root@f11a103c5ade /]# ls | grep CentOS CentOS-7-x86_64-GenericCloud-2003.qcow2c 执行以下openstack命令上传镜像\nopenstack image create \u0026#34;CentOS78-image\u0026#34; \\ --file CentOS-7-x86_64-GenericCloud-2003.qcow2c \\ --disk-format qcow2 --container-format bare \\ --public 创建实例\nopenstack server create \\ --image CentOS78-image \\ --flavor m1.small \\ --key-name mykey \\ --network demo-net \\ demo-centos 创建完成后为实例绑定浮动IP。\n如果实例创建失败可以查看相关组件报错日志\n[root@kolla ~]# tail -100f /var/log/kolla/nova/nova-compute.log 如果没有提前定制镜像修改root密码，只能使用centos用户及sshkey登录，由于是在容器中运行的demo示例，ssh私钥也保存在容器的默认目录下，在容器中连接实例浮动IP测试\n[root@kolla ~]# docker exec -it client bash ()[root@b86f87f7f101 ~]# ssh -i /root/.ssh/id_rsa centos@192.168.35.186 Last login: Fri Oct 29 08:10:42 2021 from 192.168.35.188 [centos@demo-centos ~]$ sudo -i [root@demo-centos ~]# 运行 ubuntu 实例 下载镜像\nwget https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img docker cp bionic-server-cloudimg-amd64.img client:/ 上传镜像\nopenstack image create \u0026#34;Ubuntu1804\u0026#34; \\ --file bionic-server-cloudimg-amd64.img \\ --disk-format qcow2 --container-format bare \\ --public 创建实例\nopenstack server create \\ --image Ubuntu1804 \\ --flavor m1.small \\ --key-name mykey \\ --network demo-net \\ demo-ubuntu 绑定浮动ip\nubuntu镜像默认用户为ubuntu，首次登陆使用sshkey方式\n调整集群配置 新增 magnum \u0026amp; ironic 组件 magnum 和 ironic 默认状态下是没有安装的，在 /etc/kolla/globals.yml 可以看到默认配置\n#enable_magnum: \u0026#34;no\u0026#34; #enable_ironic: \u0026#34;no\u0026#34; 在 /etc/kolla/globals.yml 之前的配置下面新增如下，参数的具体含义查看 官方文档\n# ironic enable_ironic: true ironic_dnsmasq_interface: \u0026#34;enp11s0f1\u0026#34; ironic_dnsmasq_dhcp_range: \u0026#34;192.168.45.200,192.168.45.210\u0026#34; ironic_dnsmasq_default_gateway: 192.168.45.1 ironic_cleaning_network: \u0026#34;public1\u0026#34; ironic_dnsmasq_boot_file: pxelinux.0 # magnum enable_magnum: true ironic 组件还需要一些其他操作\nmkdir -p /etc/kolla/config/ironic/ curl https://tarballs.openstack.org/ironic-python-agent/dib/files/ipa-centos7-master.kernel -o /etc/kolla/config/ironic/ironic-agent.kernel curl https://tarballs.openstack.org/ironic-python-agent/dib/files/ipa-centos7-master.initramfs -o /etc/kolla/config/ironic/ironic-agent.initramfs 在现有集群中新增组件\nkolla-ansible -i all-in-one deploy --tags horizon,magnum,ironic 修改组件配置 集群部署完成后需要开启新的组件或者扩容，可以修改/etc/kolla/global.yml调整参数。 或者在/etc/kolla/config目录下创建自定义配置文件，例如\n# mkdir -p /etc/kolla/config/nova # vim /etc/kolla/config/nova/nova.conf [DEFAULT] block_device_allocate_retries = 300 block_device_allocate_retries_interval = 3 重新配置openstack，kolla会自动重建配置变动的容器组件。\nkolla-ansible -i all-in-one reconfigure -t nova kolla配置和日志文件 各个组件配置文件目录： /etc/kolla/ 各个组件日志文件目录：/var/log/kolla/ 清理kolla ansilbe集群 kolla-ansible destroy --include-images --yes-i-really-really-mean-it # 或者 [root@kolla ~]# cd /usr/share/kolla-ansible/tools/ [root@all tools]# ./cleanup-containers [root@all tools]# ./cleanup-host #重置cinder卷，谨慎操作 vgremove cinder-volumes 重新部署 kolla ansible 集群 ## 清除操作 先关闭所有运行的实例，再进行下面操作 [root@kolla ~]# cd /usr/share/kolla-ansible/tools/ [root@all tools]# ./cleanup-containers vgremove cinder-volumes ## 重建操作 pvcreate /dev/sdb vgcreate cinder-volumes /dev/sdb kolla-ansible -i ./all-in-one deploy kolla-ansible post-deploy 可能遇到的问题 虚拟ip分配失败 这种情况多半是由于虚拟ip没有分配到，并不是端口问题\n解决方法1 在全局的配置中添加/修改这个id值，必须是0-255之间的数字，并且确保在整个二层网络中是唯一的\nvim /etc/kolla/globals.yml keepalived_virtual_router_id: \u0026#34;199\u0026#34; https://www.bianchengquan.com/article/506138.html\n解决方法2 https://www.nuomiphp.com/serverfault/en/5fff3e4524544316281a16b0.html\n参考 官方文档\nhttps://blog.csdn.net/networken/article/details/106728002\nhttps://blog.csdn.net/qq_33316576/article/details/107457111\nhttps://blog.csdn.net/networken/article/details/106745167\n","permalink":"https://www.lvbibir.cn/posts/tech/openstack-kolla-ansible-allinone-train/","summary":"kolla ansible简介 kolla 的使命是为 openstack 云平台提供生产级别的、开箱即用的交付能力。kolla 的基本思想是一切皆容器，将所有服务基于 Docker 运行，并且保证一个容器只跑一个服务（进程），做到最小粒度的运行 docker。 kolla 要实现 openetack 部署总体上分为两步，第一步是制作 docker 镜像，第二步是编排部署。因此，ko","title":"kolla-ansible 部署 Train版 openstack（all-in-one）"},{"content":"Kubernetes概述 kubernetes是什么\nkubernetes 是 Google 在 2014年开源的一个容器集群管理平台，kubernetes简称 k8s k8s用于容器化应用程序的部署，扩展和管理。 k8s提供了容器的编排，资源调度，弹性伸缩，部署管理，服务发现等一系列功能 kubernetes目标是让部署容器化应用简单高效 Kubernetes特性\n自我修复\n在节点故障时重新启动失败的容器，替换和重新部署，保证预期的副本数量；杀死健康检查失败的容器，并且在未准备好之前不会处理客户端请求，确保线上服务不中断。\n伸缩性\n使用命令、UI或者基于CPU使用情况自动快速扩容和缩容应用程序实例，保证应用业务高峰并发时的高可用性；业务低峰时回收资源，以最小成本运行服务。\n自动部署和回滚\nK8S采用滚动更新策略更新应用，一次更新一个Pod，而不是同时删除所有Pod，如果更新过程中出现问题，将回滚更改，确保升级不受影响业务。\n服务发现和负载均衡\nK8S为多个容器提供一个统一访问入口（内部IP地址和一个DNS名称），并且负载均衡关联的所有容器，使得用户无需考虑容器IP问题。\n机密和配置管理\n管理机密数据和应用程序配置，而不需要把敏感数据暴露在镜像里，提高敏感数据安全性。并可以将一些常用的配置存储在K8S中，方便应用程序使用。\n存储编排\n挂载外部存储系统，无论是来自本地存储，公有云（如AWS），还是网络存储（如NFS、GlusterFS、Ceph）都作为集群资源的一部分使用，极大提高存储使用灵活性。\n批处理\n提供一次性任务，定时任务；满足批量数据处理和分析的场景。\nKubeadm概述\nkubeadm是Kubernetes项目自带的及集群构建工具，负责执行构建一个最小化的可用集群以及将其启动等的必要基本步骤，kubeadm是Kubernetes集群全生命周期的管理工具，可用于实现集群的部署、升级、降级及拆除。kubeadm部署Kubernetes集群是将大部分资源以pod的方式运行，例如（kube-proxy、kube-controller-manager、kube-scheduler、kube-apiserver、flannel)都是以pod方式运行。\nKubeadm仅关心如何初始化并启动集群，余下的其他操作，例如安装Kubernetes Dashboard、监控系统、日志系统等必要的附加组件则不在其考虑范围之内，需要管理员自行部署。\nKubeadm集成了Kubeadm init和kubeadm join等工具程序，其中kubeadm init用于集群的快速初始化，其核心功能是部署Master节点的各个组件，而kubeadm join则用于将节点快速加入到指定集群中，它们是创建Kubernetes集群最佳实践的“快速路径”。另外，kubeadm token可于集群构建后管理用于加入集群时使用的认证令牌（token)，而kubeadm reset命令的功能则是删除集群构建过程中生成的文件以重置回初始状态。\n1. 环境准备 基于centos7.9，docker-ce-20.10.18，kubelet-1.22.3-0\n部署Kubernetes集群需要满足每个节点至少满足2核CPU、2G内存和30GB硬盘且都可以访问外网\n角色 IP k8s-node1 1.1.1.1 k8s-node2 1.1.1.2 k8s-node3 1.1.1.3 1.1 基础配置 # 关闭防火墙 systemctl stop firewalld systemctl disable firewalld # 关闭selinux sed -i \u0026#39;s/enforcing/disabled/\u0026#39; /etc/selinux/config # 永久 setenforce 0 # 临时 # 关闭swap swapoff -a # 临时 vim /etc/fstab # 永久, 注释掉swap分区相关行 # 设置主机名 hostnamectl set-hostname \u0026lt;hostname\u0026gt; # 添加hosts cat \u0026gt;\u0026gt; /etc/hosts \u0026lt;\u0026lt; EOF 1.1.1.1 k8s-node1 1.1.1.2 k8s-node2 1.1.1.3 k8s-node3 EOF # 将桥接的IPv4流量传递到iptables的链 cat \u0026gt; /etc/sysctl.d/k8s.conf \u0026lt;\u0026lt; EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system # 生效 # 时间同步 timedatectl set-timezone Asia/Shanghai yum install ntpdate -y ntpdate time.windows.com 1.2 安装Docker Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。\nwget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo yum -y install docker-ce 配置镜像下载加速器，同时修改docker的cgroupdriver为systemd\ncat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt; EOF { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://jc0srqak.mirror.aliyuncs.com\u0026#34;], \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;] } EOF systemctl daemon-reload systemctl enable docker \u0026amp;\u0026amp; systemctl start docker docker info 1.3 kubeadm/kubelet/kubectl 添加阿里云YUM软件源\ncat \u0026gt; /etc/yum.repos.d/kubernetes.repo \u0026lt;\u0026lt; EOF [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 这里指定版本号部署\nyum install -y kubelet-1.22.3 kubeadm-1.22.3 kubectl-1.22.3 systemctl enable kubelet systemctl start kubelet 2. 部署Kubernetes Master https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file\nhttps://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node\n在1.1.1.1（Master）执行。\nkubeadm init \\ --apiserver-advertise-address=1.1.1.1 \\ --kubernetes-version v1.22.3 \\ --service-cidr=10.96.0.0/12 \\ --pod-network-cidr=10.244.0.0/16 \\ --ignore-preflight-errors=all \\ --image-repository registry.aliyuncs.com/google_containers \u0026ndash;apiserver-advertise-address 集群通告地址 \u0026ndash;kubernetes-version K8s版本，与上面安装的一致 \u0026ndash;service-cidr 集群内部虚拟网络，Pod统一访问入口 \u0026ndash;pod-network-cidr Pod网络，与下面部署的CNI网络组件yaml中保持一致 \u0026ndash;ignore-preflight-errors=all，跳过一些错误 \u0026ndash;image-repository 由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址 或者使用配置文件引导：\ncat \u0026gt; kubeadm.conf \u0026lt;\u0026lt; EOF apiVersion: kubeadm.k8s.io/v1beta2 kind: ClusterConfiguration kubernetesVersion: v1.22.3 imageRepository: registry.aliyuncs.com/google_containers networking: podSubnet: 10.244.0.0/16 serviceSubnet: 10.96.0.0/12 EOF kubeadm init --config kubeadm.conf --ignore-preflight-errors=all 拷贝kubectl使用的连接k8s认证文件到默认路径：\nmkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 查看k8s集群状态\nkubectl get cs NAME STATUS MESSAGE ERROR scheduler Unhealthy Get \u0026#34;http://127.0.0.1:10251/healthz\u0026#34;: dial tcp 127.0.0.1:10251: connect: connection refused controller-manager Healthy ok etcd-0 Healthy {\u0026#34;health\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;reason\u0026#34;:\u0026#34;\u0026#34;} vim /etc/kubernetes/manifests/kube-scheduler.yaml # 注释掉 --port=0 ，scheduler会自动重启，稍等一小会状态变为正常 kubectl get cs NAME STATUS MESSAGE ERROR scheduler Healthy ok controller-manager Healthy ok etcd-0 Healthy {\u0026#34;health\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;reason\u0026#34;:\u0026#34;\u0026#34;} 3. 加入Kubernetes Node https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/\n在192.168.150.102/103（Node）执行。\n向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：\nkubeadm join 1.1.1.1:6443 --token esce21.q6hetwm8si29qxwn \\ --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5 默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：\nkubeadm token create kubeadm token list openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u0026gt;/dev/null | openssl dgst -sha256 -hex | sed \u0026#39;s/^.* //\u0026#39; 63bca849e0e01691ae14eab449570284f0c3ddeea590f8da988c07fe2729e924 kubeadm join 1.1.1.1:6443 --token nuja6n.o3jrhsffiqs9swnu --discovery-token-ca-cert-hash sha256:63bca849e0e01691ae14eab449570284f0c3ddeea590f8da988c07fe2729e924 或者直接命令快捷生成: kubeadm token create --print-join-command\n4. 部署容器网络(cni) https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network\n注意：只需要部署下面其中一个，推荐Calico。\nCalico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。\nCalico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。\n此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。\nhttps://docs.projectcalico.org/getting-started/kubernetes/quickstart\nwget --no-check-certificate https://docs.projectcalico.org/manifests/calico.yaml 下载完后还需要修改里面定义Pod网络（CALICO_IPV4POOL_CIDR），与前面kubeadm init指定的一样\n修改完后应用清单：\nvim calico.yaml # 这两行默认是注释掉的 - name: CALICO_IPV4POOL_CIDR value: \u0026#34;10.244.0.0/16\u0026#34; kubectl apply -f calico.yaml kubectl get pods -n kube-system 5. metric-server cadvisor负责提供数据，已集成到k8s中\nMetrics-server负责数据汇总，需额外安装\n下载yaml\nwget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.0/components.yaml --no-check-certificate mv components.yaml metrics-server.yaml 修改yaml\ncontainers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP # 第一处修改 - --kubelet-use-node-status-port - --metric-resolution=15s - --kubelet-insecure-tls # 第二处修改 image: registry.aliyuncs.com/google_containers/metrics-server:v0.6.0 # 第三处修改 imagePullPolicy: IfNotPresent \u0026ndash;kubelet-insecure-tls\n不验证kubelet自签的证书\n\u0026ndash;kubelet-preferred-address-types=InternalIP\nMetrics-server连接cadvisor默认通过主机名即node的名称进行连接，而Metric-server作为pod运行在集群中默认是无法解析的，所以这里修改成通过节点ip连接\n部署metrics-server\n[root@k8s-node1 ~]# kubectl apply -f metrics-server.yaml [root@k8s-node1 ~]# kubectl get pods -n kube-system -l k8s-app=metrics-server NAME READY STATUS RESTARTS AGE metrics-server-7f66b69ff6-bkfqg 1/1 Running 0 59s [root@k8s-node1 ~]# kubectl top nodes NAME CPU(cores) CPU% MEMORY(bytes) MEMORY% k8s-node1 226m 11% 2004Mi 54% k8s-node2 97m 4% 1047Mi 28% k8s-node3 98m 4% 1096Mi 29% 6. 测试kubernetes集群 验证Pod工作 验证Pod网络通信 验证DNS解析 在Kubernetes集群中创建一个pod，验证是否正常运行：\nkubectl create deployment nginx --image=nginx kubectl expose deployment nginx --port=80 --type=NodePort kubectl get pod,svc 访问地址：http://NodeIP:Port\n7. 部署Dashboard wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml 默认Dashboard只能集群内部访问，修改Service为NodePort类型，暴露到外部：\nvi recommended.yaml ... kind: Service apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: ports: - port: 443 targetPort: 8443 nodePort: 30001 selector: k8s-app: kubernetes-dashboard type: NodePort ... kubectl apply -f recommended.yaml kubectl get pods -n kubernetes-dashboard NAME READY STATUS RESTARTS AGE dashboard-metrics-scraper-6b4884c9d5-gl8nr 1/1 Running 0 13m kubernetes-dashboard-7f99b75bf4-89cds 1/1 Running 0 13m 访问地址：https://NodeIP:30001\n创建service account并绑定默认cluster-admin管理员集群角色：\n# 创建用户 kubectl create serviceaccount dashboard-admin -n kube-system # 用户授权 kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin # 获取用户Token kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk \u0026#39;/dashboard-admin/{print $1}\u0026#39;) 使用输出的token登录Dashboard。\n","permalink":"https://www.lvbibir.cn/posts/tech/kubernetes-v1.22.3-kubeadm/","summary":"Kubernetes概述 kubernetes是什么 kubernetes 是 Google 在 2014年开源的一个容器集群管理平台，kubernetes简称 k8s k8s用于容器化应用程序的部署，扩展和管理。 k8s提供了容器的编排，资源调度，弹性伸缩，部署管理，服务发现等一系列功能 kubernetes目标是让部署容器化应","title":"kubernetes | kubeadm 搭建 K8s集群v1.22.3"},{"content":"openssh-8.7p1 编译环境 编译平台：\tvmware workstation\n系统版本：\t普华服务器操作系统v4.2\n系统内核：\t3.10.0-327.el7.isoft.x86_64\n软件版本：\nopenssh-8.7p1.tar.gz x11-ssh-askpass-1.2.4.1.tar.gz 编译步骤 yum安装依赖工具\nyum install wget vim gdb imake libXt-devel gtk2-devel rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel unzip krb5-devel libX11-devel initscripts -y 创建编译目录\nmkdir -p /root/rpmbuild/{SOURCES,SPECS} 下载openssh编译包和x11-ssh-askpass依赖包并解压修改配置\ncd /root/rpmbuild/SOURCES wget https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-8.7p1.tar.gz wget https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz tar -zxvf openssh-8.7p1.tar.gz cp openssh-8.7p1/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/ sed -i -e \u0026#34;s/%define no_x11_askpass 0/%define no_x11_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec sed -i -e \u0026#34;s/%define no_gnome_askpass 0/%define no_gnome_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec 准备编译\nvim /root/rpmbuild/SPECS/openssh.spec 注释掉 BuildRequires: openssl-devel \u0026lt; 1.1 这一行 开始编译\nrpmbuild -ba /root/rpmbuild/SPECS/openssh.spec 操作验证\ncd /root/rpmbuild/RPMS/x86_64/ vim run.sh #!/bin/bash set -e cp /etc/pam.d/sshd /etc/pam.d/sshd_bak cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -Uvh ./*.rpm cp -r /etc/pam.d/sshd_bak /etc/pam.d/ cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config rm -rf /etc/ssh/ssh*key systemctl daemon-reload systemctl restart sshd chmod 755 run.sh ./run.sh ssh -V 打包归档\n[root@localhost ~]# cd /root/rpmbuild/RPMS/x86_64/ [root@localhost x86_64]# ls openssh-8.7p1-1.el7.isoft.x86_64.rpm openssh-askpass-8.7p1-1.el7.isoft.x86_64.rpm openssh-askpass-gnome-8.7p1-1.el7.isoft.x86_64.rpm openssh-clients-8.7p1-1.el7.isoft.x86_64.rpm openssh-debuginfo-8.7p1-1.el7.isoft.x86_64.rpm openssh-server-8.7p1-1.el7.isoft.x86_64.rpm run.sh [root@localhost x86_64]# vim run.sh #!/bin/bash cp /etc/pam.d/sshd /etc/pam.d/sshd_bak cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -Uvh ./*.rpm cp -r /etc/pam.d/sshd_bak /etc/pam.d/ cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config rm -rf /etc/ssh/ssh*key systemctl daemon-reload systemctl restart sshd [root@localhost x86_64]# tar zcvf openssh-8.7p1.rpm.x86_64.tar.gz ./* [root@localhost x86_64]# mv openssh-8.7p1.rpm.x86_64.tar.gz /root 使用 tar zxf openssh-8.7p1.rpm.x86_64.tar.gz ./run.sh openssh-9.0p1 编译环境 编译平台：\tvmware workstation\n系统版本：\t普华服务器操作系统v3.0\n系统内核：\n2.6.32-279.el6.isoft.x86_64 2.6.32-504.el6.isoft.x86_64 软件版本：\nopenssh-9.0p1.tar.gz x11-ssh-askpass-1.2.4.1.tar.gz 这两个内核版本步骤基本一样，区别在于 279 内核需要升级 openssl\n编译步骤 添加阿里云yum源和本地yum源\n# 阿里yum源 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo # 本地yum源 mount /dev/sr0 /mnt/ cat \u0026gt; /etc/yum.repos.d/local.repo \u0026lt;\u0026lt;EOF [local] name=local baseurl=file:///mnt gpgcheck=0 enabled=1 EOF yum安装依赖工具\nyum clean all yum makecache yum install wget vim gdb imake libXt-devel gtk2-devel rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel unzip krb5-devel libX11-devel initscripts 创建编译目录\nmkdir -p /root/rpmbuild/{SOURCES,SPECS} 下载openssh编译包和x11-ssh-askpass依赖包并解压修改配置\ncd /root/rpmbuild/SOURCES wget https://mirrors.aliyun.com/pub/OpenBSD/OpenSSH/portable/openssh-9.0p1.tar.gz wget https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz --no-check-certificate tar -zxf openssh-9.0p1.tar.gz cp openssh-9.0p1/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/ sed -i -e \u0026#34;s/%define no_x11_askpass 0/%define no_x11_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec sed -i -e \u0026#34;s/%define no_gnome_askpass 0/%define no_gnome_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec 添加缺少的文件\ncd /root/rpmbuild/SOURCES/openssh-9.0p1/contrib/redhat cp sshd.init sshd.init.old cp sshd.pam sshd.pam.old 重新打包，否则会报错找不到 sshd.pam.old 和 sshd.init.old\ncd /root/rpmbuild/SOURCES/ tar zcf openssh-9.0p1.tar.gz openssh-9.0p1 准备编译\nvim /root/rpmbuild/SPECS/openssh.spec 注释掉 BuildRequires: openssl-devel \u0026lt; 1.1 这一行 开始编译\nrpmbuild -ba /root/rpmbuild/SPECS/openssh.spec 注意，从这步开始两个内核版本的后续操作不太相同\n2.6.32-279.el6.isoft.x86_64 准备目录\nmkdir -pv /root/openssh-9.0p1-rpms/openssl-1.0.1e-rpms/ cp /root/rpmbuild/RPMS/x86_64/* /root/openssh-9.0p1-rpms/ 下载 openssl-1.0.1e 离线包\n这步由于之前安装编译的依赖的时候已经安装过，可以用全新的系统重新下载 openssl-1.0.1e 的依赖\nyum install -y yum-plugin-downloadonly yum install openssl openssl-devel --downloadonly --downloaddir=/root/openssh-9.0p1-rpms/openssl-1.0.1e-rpms/ 编写升级脚本\ncat \u0026gt; /root/openssh-9.0p1-rpms/run.sh \u0026lt;\u0026lt;EOF #!/bin/bash set -e cp /etc/pam.d/sshd /etc/pam.d/sshd_bak cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -e --nodeps libsepol-2.0.41-4.el6.isoft.x86_64 rpm -Uvh ./openssl-1.0.1e-rpms/*.rpm rpm -Uvh ./*.rpm cp /etc/pam.d/sshd_bak /etc/pam.d/sshd cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config rm -rf /etc/ssh/ssh*key service sshd restart ssh -V EOF chmod 755 /root/openssh-9.0p1-rpms/run.sh 打包\ntar zcf /root/openssh-9.0p1-rpms.tar.gz /root/openssh-9.0p1-rpms 2.6.32-504.el6.isoft.x86_64 准备目录\nmkdir /root/openssh-9.0p1-rpms/ cp /root/rpmbuild/RPMS/x86_64/* /root/openssh-9.0p1-rpms/ 编写升级脚本\ncat \u0026gt; /root/openssh-9.0p1-rpms/run.sh \u0026lt;\u0026lt;EOF #!/bin/bash set -e ssh -V /bin/cp /etc/pam.d/sshd /etc/pam.d/sshd_bak /bin/cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -Uvh ./*.rpm /bin/cp /etc/pam.d/sshd_bak /etc/pam.d/sshd /bin/cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config rm -rf /etc/ssh/ssh*key service sshd restart ssh -V EOF chmod 755 /root/openssh-9.0p1-rpms/run.sh 打包\ntar zcf /root/openssh-9.0p1-rpms.tar.gz /root/openssh-9.0p1-rpms 使用 tar zxf openssh-9.0p1-rpms.tar.gz cd openssh-9.0p1-rpms sh run.sh openssh-8.6p1-aarch64 编译环境 系统版本：普华服务器操作系统openeuler版\n系统内核：4.19.90-2003.4.0.0036.oe1.aarch64\n软件版本：\nopenssh-8.6p1.tar.gz\nx11-ssh-askpass-1.2.4.1.tar.gz\n编译步骤 dnf安装依赖工具\ndnf install gdb imake libXt-devel gtk2-devel rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel unzip krb5-devel libX11-devel initscripts -y 创建编译目录\nmkdir -p /root/rpmbuild/{SOURCES,SPECS} 下载openssh编译包和x11-ssh-askpass依赖包并解压修改配置\ncd /root/rpmbuild/SOURCES wget https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-8.6p1.tar.gz wget https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz tar -zxvf openssh-8.6p1.tar.gz cp openssh-8.6p1/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/ sed -i -e \u0026#34;s/%define no_x11_askpass 0/%define no_x11_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec sed -i -e \u0026#34;s/%define no_gnome_askpass 0/%define no_gnome_askpass 1/g\u0026#34; /root/rpmbuild/SPECS/openssh.spec 准备编译\nvim /root/rpmbuild/SPECS/openssh.spec 注释掉 BuildRequires: openssl-devel \u0026lt; 1.1 这一行 修改下面两行 %attr(4711,root,root) %{_libexecdir}/openssh/ssh-sk-helper %attr(0644,root,root) %{_mandir}/man8/ssh-sk-helper.8.gz 开始编译\nrpmbuild -ba /root/rpmbuild/SPECS/openssh.spec 操作验证\ncd /root/rpmbuild/RPMS/aarch64 vim run.sh #!/bin/bash cp /etc/pam.d/sshd /etc/pam.d/sshd_bak cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -Uvh ./*.rpm cp -r /etc/pam.d/sshd_bak /etc/pam.d/ cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config rm -rf /etc/ssh/ssh*key systemctl daemon-reload systemctl restart sshd chmod 755 run.sh ./run.sh ssh -V OpenSSH_8.6p1, OpenSSL 1.1.1d 10 Sep 2019 从版本看，ssh已经升级成功。但是每次重启服务都会提示sshd的unit文件发生改变，需要执行systemctl daemon-reload。执行完reload后重启sshd依旧报错Warning: The unit file, source configuration file or drop-ins of sshd.service changed on disk. Run \u0026lsquo;systemctl daemon-reload\u0026rsquo; to reload units. 先不管这个问题，测试下sshd服务是否正常。\n用终端连接试试\n一切正常，如果出现PAM unable to dlopen(/usr/lib64/security/pam_stack.so): /usr/lib64/security/pam_stack.so: cannot open shared object file: No such file or directory类似报错，需要还原原先的/etc/pam.d/sshd文件\n继续看之前那个报错，一般这种错误为服务的配置文件或者unit文件发生改变，需要执行daemon-reload重新加载一下，逐个排查\n查看配置文件 查看unit文件 没有找到sshd.service的unit文件，find查找一下 第一个文件是老版本ssh的残留的自启的unit链接文件，已经失效了。第三个和第四个文件都是第二个文件的链接文件。 不知为何我们自己编译的ssh安装后unit文件会放到这个位置，后续再研究，尝试自己写一份unit文件，试试能不能恢复sshd。\n备份unit文件\n[root@localhost ~]# cp /run/systemd/generator.late/sshd.service /root/sshd.service-20210702 查看unit文件中的控制参数和pid文件位置等 自建一个unit文件，放到/usr/lib/systemd/system目录\n[root@localhost ~]# vim /usr/lib/systemd/system/sshd.service [UNIT] Description=OpenSSH server daemon After=network.target sshd-keygen.target Wants=sshd-keygen.target [Service] Type=forking ExecStart=/etc/rc.d/init.d/sshd start ExecReload=/etc/rc.d/init.d/sshd restart ExecStop=/etc/rc.d/init.d/sshd stop PrivateTmp=True [Install] WantedBy=multi-user.target [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart sshd [root@localhost ~]# systemctl status sshd [root@localhost ~]# ssh -V OpenSSH_8.6p1, OpenSSL 1.1.1d 10 Sep 2019 打包归档\n[root@localhost ~]# cp /usr/lib/systemd/system/sshd.service /root/rpmbuild/RPMS/aarch64/ [root@localhost ~]# cd /root/rpmbuild/RPMS/aarch64/ [root@localhost aarch64]# ls openssh-8.6p1-1.isoft.isoft.aarch64.rpm openssh-debugsource-8.6p1-1.isoft.isoft.aarch64.rpm openssh-askpass-8.6p1-1.isoft.isoft.aarch64.rpm openssh-server-8.6p1-1.isoft.isoft.aarch64.rpm openssh-askpass-gnome-8.6p1-1.isoft.isoft.aarch64.rpm run.sh openssh-clients-8.6p1-1.isoft.isoft.aarch64.rpm sshd.service openssh-debuginfo-8.6p1-1.isoft.isoft.aarch64.rpm [root@localhost aarch64]# vim run.sh #!/bin/bash cp /etc/pam.d/sshd /etc/pam.d/sshd_bak cp /etc/ssh/sshd_config /etc/ssh/sshd_config_bak rpm -Uvh ./*.rpm cp /etc/pam.d/sshd_bak /etc/pam.d/ cp /etc/ssh/sshd_config_bak /etc/ssh/sshd_config cp ./sshd.service /usr/lib/systemd/system/sshd.service rm -rf /etc/ssh/ssh*key systemctl daemon-reload systemctl restart sshd systemctl enable sshd [root@localhost aarch64]# tar zcvf openssh-8.6p1-rpm-aarch64.tar.gz ./* [root@localhost aarch64]# mv openssh-8.6p1-rpm-aarch64.tar.gz /root 参考 systemd和sysv的服务管理\nsystemd-sysv-generator 中文手册\n","permalink":"https://www.lvbibir.cn/posts/tech/rpm-build-openssh/","summary":"openssh-8.7p1 编译环境 编译平台： vmware workstation 系统版本： 普华服务器操作系统v4.2 系统内核： 3.10.0-327.el7.isoft.x86_64 软件版本： openssh-8.7p1.tar.gz x11-ssh-askpass-1.2.4.1.tar.gz 编译步骤 yum安装依赖工具 yum install wget vim gdb imake libXt-devel gtk2-devel rpm-build zlib-devel openssl-devel gcc perl-devel pam-devel unzip krb5-devel libX11-devel initscripts -y 创建编译目录 mkdir -p /root/rpmbuild/{SOURCES,SPECS} 下载openssh编译包和x11-ssh-askpass依赖包并解压修改配置 cd /root/rpmbuild/SOURCES wget https://openbsd.hk/pub/OpenBSD/OpenSSH/portable/openssh-8.7p1.tar.gz wget https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3/x11-ssh-askpass-1.2.4.1.tar.gz tar -zxvf openssh-8.7p1.tar.gz cp openssh-8.7p1/contrib/redhat/openssh.spec /root/rpmbuild/SPECS/ sed -i -e \u0026#34;s/%define no_x11_askpass 0/%define","title":"openssh源码打包编译成rpm包"},{"content":"前言 按指定要求安装升级内核，保证grub2启动时为默认项目\n第一步 确认当前操作系统的内核版本\n[root@server0 ~]# uname -r 3.10.0-123.el7.x86_64\n第二步 下载准备升级的内核文件，比如说内核已存在于某个 Yum 仓库：http://content.example.com/rhel7.0/x86_64/errata\n此时只要添加这个 Yum 源就可以直接下载了。\n[root@server0 ~]# yum-config-manager \u0026ndash;add-repo=\u0026ldquo;http://content.example.com/rhel7.0/x86_64/errata\"\n若是第一次配置，还需要导入红帽公钥\n[root@server0 ~]# rpm \u0026ndash;import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-*\n第三步 查找内核，并确认 Yum 仓库中的内核是否为需要升级的内核\n[root@server0 ~]# yum list kernel\n第四步 安装新的内核，若内核文件很大，那安装时间就相对漫长一些。\n[root@server0 ~]# yum -y install kernel\n第五步 检查新内核是否为默认启动内核（若是安装高版本号的内核，默认都会作为优先启动内核）\n[root@server0 ~]# grub2-editenv list saved_entry=Red Hat Enterprise Linux Server (3.10.0-123.1.2.el7.x86_64) 7.0 (Maipo)\n当前默认启动内核已经是刚才升级的内核！如果要手动调整内核启动顺序，需要再进行设置一番。\n第六步 确认当前操作系统有几个启动内核\n当前操作系统有三个内核，其中第一个内核版本为 3.10.0-123.1.2.el7.x86_64，也就是我们刚才升级的内核；第二个内核版本为 3.10.0-123.el7.x86_64，是最初查看的内核版本。\n现在设置第二个内核（3.10.0-123.el7.x86_64）为默认启动内核\n[root@server0 ~]# grub2-set-default \u0026ldquo;Red Hat Enterprise Linux Server, with Linux 3.10.0-123.el7.x86_64\u0026rdquo;\n然后确认一下是否设置成功\n[root@server0 ~]# grub2-editenv list\nsaved_entry=Red Hat Enterprise Linux Server, with Linux 3.10.0-123.el7.x86_64\n重启检查新内核\n[root@server0 ~]# uname -r\n","permalink":"https://www.lvbibir.cn/posts/tech/redhat-update-kernel/","summary":"前言 按指定要求安装升级内核，保证grub2启动时为默认项目 第一步 确认当前操作系统的内核版本 [root@server0 ~]# uname -r 3.10.0-123.el7.x86_64 第二步 下载准备升级的内核文件，比如说内核已存在于某个 Yum 仓库：http://content.example.com/rhel7.0/x86_64/errata 此时只要添加这个 Yum 源就可","title":"redhat服务器升级内核"},{"content":"代码如下\n#!/bin/bash #参数定义 date=`date +\u0026#34;%Y-%m-%d-%H:%M:%S\u0026#34;` centosVersion=$(awk \u0026#39;{print $(NF-1)}\u0026#39; /etc/redhat-release) VERSION=`date +%F` #日志相关 LOGPATH=\u0026#34;/tmp/awr\u0026#34; [ -e $LOGPATH ] || mkdir -p $LOGPATH RESULTFILE=\u0026#34;$LOGPATH/HostCheck-`hostname`-`date +%Y%m%d`.txt\u0026#34; #调用函数库 [ -f /etc/init.d/functions ] \u0026amp;\u0026amp; source /etc/init.d/functions export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin source /etc/profile #root用户执行脚本 [ $(id -u) -gt 0 ] \u0026amp;\u0026amp; echo \u0026#34;请用root用户执行此脚本！\u0026#34; \u0026amp;\u0026amp; exit 1 function version(){ echo \u0026#34;\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[${date}] \u0026gt;\u0026gt;\u0026gt; `hostname -s` 主机巡检\u0026#34; } function getSystemStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m****************************************************系统检查****************************************************\\033[0m\u0026#34; if [ -e /etc/sysconfig/i18n ];then default_LANG=\u0026#34;$(grep \u0026#34;LANG=\u0026#34; /etc/sysconfig/i18n | grep -v \u0026#34;^#\u0026#34; | awk -F \u0026#39;\u0026#34;\u0026#39; \u0026#39;{print $2}\u0026#39;)\u0026#34; else default_LANG=$LANG fi export LANG=\u0026#34;en_US.UTF-8\u0026#34; Release=$(cat /etc/redhat-release 2\u0026gt;/dev/null) Kernel=$(uname -r) OS=$(uname -o) Hostname=$(uname -n) SELinux=$(/usr/sbin/sestatus | grep \u0026#34;SELinux status: \u0026#34; | awk \u0026#39;{print $3}\u0026#39;) LastReboot=$(who -b | awk \u0026#39;{print $3,$4}\u0026#39;) uptime=$(uptime | sed \u0026#39;s/.*up \\([^,]*\\), .*/\\1/\u0026#39;) echo \u0026#34; 系统：$OS\u0026#34; echo \u0026#34; 发行版本：$Release\u0026#34; echo \u0026#34; 内核：$Kernel\u0026#34; echo \u0026#34; 主机名：$Hostname\u0026#34; echo \u0026#34; SELinux：$SELinux\u0026#34; echo \u0026#34;语言/编码：$default_LANG\u0026#34; echo \u0026#34; 当前时间：$(date +\u0026#39;%F %T\u0026#39;)\u0026#34; echo \u0026#34; 最后启动：$LastReboot\u0026#34; echo \u0026#34; 运行时间：$uptime\u0026#34; export LANG=\u0026#34;$default_LANG\u0026#34; } function getCpuStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m****************************************************CPU检查*****************************************************\\033[0m\u0026#34; Physical_CPUs=$(grep \u0026#34;physical id\u0026#34; /proc/cpuinfo| sort | uniq | wc -l) Virt_CPUs=$(grep \u0026#34;processor\u0026#34; /proc/cpuinfo | wc -l) CPU_Kernels=$(grep \u0026#34;cores\u0026#34; /proc/cpuinfo|uniq| awk -F \u0026#39;: \u0026#39; \u0026#39;{print $2}\u0026#39;) CPU_Type=$(grep \u0026#34;model name\u0026#34; /proc/cpuinfo | awk -F \u0026#39;: \u0026#39; \u0026#39;{print $2}\u0026#39; | sort | uniq) CPU_Arch=$(uname -m) echo \u0026#34;物理CPU个数:$Physical_CPUs\u0026#34; echo \u0026#34;逻辑CPU个数:$Virt_CPUs\u0026#34; echo \u0026#34;每CPU核心数:$CPU_Kernels\u0026#34; echo \u0026#34; CPU型号:$CPU_Type\u0026#34; echo \u0026#34; CPU架构:$CPU_Arch\u0026#34; } function getMemStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m**************************************************内存检查*****************************************************\\033[0m\u0026#34; if [[ $centosVersion \u0026lt; 7 ]];then free -mo else free -h fi #报表信息 MemTotal=$(grep MemTotal /proc/meminfo| awk \u0026#39;{print $2}\u0026#39;) #KB MemFree=$(grep MemFree /proc/meminfo| awk \u0026#39;{print $2}\u0026#39;) #KB let MemUsed=MemTotal-MemFree MemPercent=$(awk \u0026#34;BEGIN {if($MemTotal==0){printf 100}else{printf \\\u0026#34;%.2f\\\u0026#34;,$MemUsed*100/$MemTotal}}\u0026#34;) } function getDiskStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m**************************************************磁盘检查******************************************************\\033[0m\u0026#34; df -hiP | sed \u0026#39;s/Mounted on/Mounted/\u0026#39;\u0026gt; /tmp/inode df -hTP | sed \u0026#39;s/Mounted on/Mounted/\u0026#39;\u0026gt; /tmp/disk join /tmp/disk /tmp/inode | awk \u0026#39;{print $1,$2,\u0026#34;|\u0026#34;,$3,$4,$5,$6,\u0026#34;|\u0026#34;,$8,$9,$10,$11,\u0026#34;|\u0026#34;,$12}\u0026#39;| column -t #报表信息 diskdata=$(df -TP | sed \u0026#39;1d\u0026#39; | awk \u0026#39;$2!=\u0026#34;tmpfs\u0026#34;{print}\u0026#39;) #KB disktotal=$(echo \u0026#34;$diskdata\u0026#34; | awk \u0026#39;{total+=$3}END{print total}\u0026#39;) #KB diskused=$(echo \u0026#34;$diskdata\u0026#34; | awk \u0026#39;{total+=$4}END{print total}\u0026#39;) #KB diskfree=$((disktotal-diskused)) #KB diskusedpercent=$(echo $disktotal $diskused | awk \u0026#39;{if($1==0){printf 100}else{printf \u0026#34;%.2f\u0026#34;,$2*100/$1}}\u0026#39;) inodedata=$(df -iTP | sed \u0026#39;1d\u0026#39; | awk \u0026#39;$2!=\u0026#34;tmpfs\u0026#34;{print}\u0026#39;) inodetotal=$(echo \u0026#34;$inodedata\u0026#34; | awk \u0026#39;{total+=$3}END{print total}\u0026#39;) inodeused=$(echo \u0026#34;$inodedata\u0026#34; | awk \u0026#39;{total+=$4}END{print total}\u0026#39;) inodefree=$((inodetotal-inodeused)) inodeusedpercent=$(echo $inodetotal $inodeused | awk \u0026#39;{if($1==0){printf 100}else{printf \u0026#34;%.2f\u0026#34;,$2*100/$1}}\u0026#39;) } function get_resource(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m**************************************************资源消耗统计**************************************************\\033[0m\u0026#34; echo -e \u0026#34;\\033[36m*************带宽资源消耗统计*************\\033[0m\u0026#34; #用数组存放网卡名 nic=(`ifconfig | grep ^[a-z] | grep -vE \u0026#39;lo|docker0\u0026#39;| awk -F: \u0026#39;{print $1}\u0026#39;`) time=`date \u0026#34;+%Y-%m-%d %k:%M\u0026#34;` num=0 for ((i=0;i\u0026lt;${#nic[@]};i++)) do #循环五次，避免看到的是偶然的数据 while (( $num\u0026lt;5 )) do rx_before=$(cat /proc/net/dev | grep \u0026#39;${nic[$i]}\u0026#39; | tr : \u0026#34; \u0026#34; | awk \u0026#39;{print $2}\u0026#39;) tx_before=$(cat /proc/net/dev | grep \u0026#39;${nic[$i]}\u0026#39; | tr : \u0026#34; \u0026#34; | awk \u0026#39;{print $10}\u0026#39;) sleep 2 #用sed先获取第7列,再用awk获取第2列，再cut切割,从第7个到最后，即只切割网卡流量数字部分 rx_after=$(cat /proc/net/dev | grep \u0026#39;${nic[$i]}\u0026#39; | tr : \u0026#34; \u0026#34; | awk \u0026#39;{print $2}\u0026#39;) tx_after=$(cat /proc/net/dev | grep \u0026#39;${nic[$i]}\u0026#39; | tr : \u0026#34; \u0026#34; | awk \u0026#39;{print $10}\u0026#39;) #注意下面截取的相差2秒的两个时刻的累计和发送的bytes(即累计传送和接收的位) rx_result=$[(rx_after-rx_before)/1024/1024/2*8] tx_result=$[(tx_after-tx_before)/1024/1024/2*8] echo \u0026#34;$time Now_In_Speed: $rx_result Mbps Now_OUt_Speed: $tx_result Mbps\u0026#34; \u0026gt;\u0026gt; /tmp/network.txt let \u0026#34;num++\u0026#34; done #注意下面grep后面的$time变量要用双引号括起来 rx_result=$(cat /tmp/network.txt|grep \u0026#34;$time\u0026#34;|awk \u0026#39;{In+=$4}END{print In}\u0026#39;) tx_result=$(cat /tmp/network.txt|grep \u0026#34;$time\u0026#34;|awk \u0026#39;{Out+=$7}END{print Out}\u0026#39;) In_Speed=$(echo \u0026#34;scale=2;$rx_result/5\u0026#34;|bc) Out_Speed=$(echo \u0026#34;scale=2;$tx_result/5\u0026#34;|bc) echo -e \u0026#34;\\033[32m In_Speed_average: $In_Speed Mbps Out_Speed_average: $Out_Speed Mbps! \\033[0m\u0026#34; done echo -e \u0026#34;\\033[36m*************CPU资源消耗统计*************\\033[0m\u0026#34; #使用vmstat 1 5命令统计5秒内的使用情况，再计算每秒使用情况 total=`vmstat 1 5|awk \u0026#39;{x+=$13;y+=$14}END{print x+y}\u0026#39;` cpu_average=$(echo \u0026#34;scale=2;$total/5\u0026#34;|bc) #判断CPU使用率（浮点数与整数比较） if [ `echo \u0026#34;${cpu_average} \u0026gt; 70\u0026#34; | bc` -eq 1 ];then echo -e \u0026#34;\\033[31m Total CPU is already use: ${cpu_average}%,请及时处理！\\033[0m\u0026#34; else echo -e \u0026#34;\\033[32m Total CPU is already use: ${cpu_average}%! \\033[0m\u0026#34; fi echo -e \u0026#34;\\033[36m*************磁盘资源消耗统计*************\\033[0m\u0026#34; #磁盘使用情况(注意：需要用sed先进行格式化才能进行累加处理) disk_used=$(df -m | sed \u0026#39;1d;/ /!N;s/\\n//;s/ \\+/ /;\u0026#39; | awk \u0026#39;{used+=$3} END{print used}\u0026#39;) disk_totalSpace=$(df -m | sed \u0026#39;1d;/ /!N;s/\\n//;s/ \\+/ /;\u0026#39; | awk \u0026#39;{totalSpace+=$2} END{print totalSpace}\u0026#39;) disk_all=$(echo \u0026#34;scale=4;$disk_used/$disk_totalSpace\u0026#34; | bc) disk_percent1=$(echo $disk_all | cut -c 2-3) disk_percent2=$(echo $disk_all | cut -c 4-5) disk_warning=`df -m | sed \u0026#39;1d;/ /!N;s/\\n//;s/ \\+/ /;\u0026#39; | awk \u0026#39;{if ($5\u0026gt;85) print $6 \u0026#34;目录使用率：\u0026#34; $5;} \u0026#39;` echo -e \u0026#34;\\033[32m Total disk has used: $disk_percent1.$disk_percent2% \\033[0m\u0026#34; #echo -e \u0026#34;\\t\\t..\u0026#34; 表示换行 if [ -n \u0026#34;$disk_warning\u0026#34; ];then echo -e \u0026#34;\\033[31m${disk_warning} \\n [Error]以上目录使用率超过85%，请及时处理！\\033[0m\u0026#34; fi echo -e \u0026#34;\\033[36m*************内存资源消耗统计*************\\033[0m\u0026#34; #获得系统总内存 memery_all=$(free -m | awk \u0026#39;NR==2\u0026#39; | awk \u0026#39;{print $2}\u0026#39;) #获得占用内存（操作系统 角度） system_memery_used=$(free -m | awk \u0026#39;NR==2\u0026#39; | awk \u0026#39;{print $3}\u0026#39;) #获得buffer、cache占用内存，当内存不够时会及时回收，所以这两部分可用于可用内存的计算 buffer_used=$(free -m | awk \u0026#39;NR==2\u0026#39; | awk \u0026#39;{print $6}\u0026#39;) cache_used=$(free -m | awk \u0026#39;NR==2\u0026#39; | awk \u0026#39;{print $7}\u0026#39;) #获得被使用内存，所以这部分可用于可用内存的计算，注意计算方法 actual_used_all=$[memery_all-(free+buffer_used+cache_used)] #获得实际占用的内存 actual_used_all=`expr $memery_all - $free + $buffer_used + $cache_used ` memery_percent=$(echo \u0026#34;scale=4;$system_memery_used / $memery_all\u0026#34; | bc) memery_percent2=$(echo \u0026#34;scale=4; $actual_used_all / $memery_all\u0026#34; | bc) percent_part1=$(echo $memery_percent | cut -c 2-3) percent_part2=$(echo $memery_percent | cut -c 4-5) percent_part11=$(echo $memery_percent2 | cut -c 2-3) percent_part22=$(echo $memery_percent2 | cut -c 4-5) #获得占用内存（操作系统角度） echo -e \u0026#34;\\033[32m system memery is already use: $percent_part1.$percent_part2% \\033[0m\u0026#34; #获得实际内存占用率 echo -e \u0026#34;\\033[32m actual memery is already use: $percent_part11.$percent_part22% \\033[0m\u0026#34; echo -e \u0026#34;\\033[32m buffer is already used : $buffer_used M \\033[0m\u0026#34; echo -e \u0026#34;\\033[32m cache is already used : $cache_used M \\033[0m\u0026#34; } function getServiceStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m*************************************************服务检查*******************************************************\\033[0m\u0026#34; echo \u0026#34;\u0026#34; if [[ $centosVersion \u0026gt; 7 ]];then conf=$(systemctl list-unit-files --type=service --state=enabled --no-pager | grep \u0026#34;enabled\u0026#34;) process=$(systemctl list-units --type=service --state=running --no-pager | grep \u0026#34;.service\u0026#34;) else conf=$(/sbin/chkconfig | grep -E \u0026#34;:on|:启用\u0026#34;) process=$(/sbin/service --status-all 2\u0026gt;/dev/null | grep -E \u0026#34;is running|正在运行\u0026#34;) fi echo -e \u0026#34;\\033[36m******************服务配置******************\\033[0m\u0026#34; echo \u0026#34;$conf\u0026#34; | column -t echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m**************正在运行的服务****************\\033[0m\u0026#34; echo \u0026#34;$process\u0026#34; } function getAutoStartStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************自启动检查*******************************************************\\033[0m\u0026#34; echo -e \u0026#34;\\033[36m****************自启动命令*****************\\033[0m\u0026#34; conf=$(grep -v \u0026#34;^#\u0026#34; /etc/rc.d/rc.local| sed \u0026#39;/^$/d\u0026#39;) echo \u0026#34;$conf\u0026#34; } function getLoginStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m************************************************登录检查********************************************************\\033[0m\u0026#34; last | head } function getNetworkStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m************************************************网络检查********************************************************\\033[0m\u0026#34; if [[ $centosVersion \u0026lt; 7 ]];then /sbin/ifconfig -a | grep -v packets | grep -v collisions | grep -v i net6 else #ip a for i in $(ip link | grep BROADCAST | awk -F: \u0026#39;{print $2}\u0026#39;);do ip add show $i | grep -E \u0026#34;BROADCAST|global\u0026#34;| awk \u0026#39;{print $2}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39; \u0026#39; ;echo \u0026#34;\u0026#34; ;done fi GATEWAY=$(ip route | grep default | awk \u0026#39;{print $3}\u0026#39;) DNS=$(grep nameserver /etc/resolv.conf| grep -v \u0026#34;#\u0026#34; | awk \u0026#39;{print $2}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/,$//\u0026#39;) echo \u0026#34;\u0026#34; echo \u0026#34;网关：$GATEWAY \u0026#34; echo \u0026#34;DNS：$DNS\u0026#34; #报表信息 IP=$(ip -f inet addr | grep -v 127.0.0.1 | grep inet | awk \u0026#39;{print $NF,$2}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/,$//\u0026#39;) MAC=$(ip link | grep -v \u0026#34;LOOPBACK\\|loopback\u0026#34; | awk \u0026#39;{print $2}\u0026#39; | sed \u0026#39;N;s/\\n//\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/,$//\u0026#39;) echo \u0026#34;\u0026#34; ping -c 4 www.baidu.com \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 if [ $? -eq 0 ];then echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[32m网络连接：正常！\\033[0m\u0026#34; else echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[31m网络连接：异常！\\033[0m\u0026#34; fi } function getListenStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************监听检查********************************************************\\033[0m\u0026#34; TCPListen=$(ss -ntul | column -t) echo \u0026#34;$TCPListen\u0026#34; } function getCronStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m**********************************************计划任务检查******************************************************\\033[0m\u0026#34; Crontab=0 for shell in $(grep -v \u0026#34;/sbin/nologin\u0026#34; /etc/shells);do for user in $(grep \u0026#34;$shell\u0026#34; /etc/passwd| awk -F: \u0026#39;{print $1}\u0026#39;);do crontab -l -u $user \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 status=$? if [ $status -eq 0 ];then echo -e \u0026#34;\\033[36m************$user用户的定时任务**************\\033[0m\u0026#34; crontab -l -u $user let Crontab=Crontab+$(crontab -l -u $user | wc -l) echo \u0026#34;\u0026#34; fi done done #计划任务 #find /etc/cron* -type f | xargs -i ls -l {} | column -t #let Crontab=Crontab+$(find /etc/cron* -type f | wc -l) } function getHowLongAgo(){ # 计算一个时间戳离现在有多久了 datetime=\u0026#34;$*\u0026#34; [ -z \u0026#34;$datetime\u0026#34; ] \u0026amp;\u0026amp; echo `stat /etc/passwd|awk \u0026#34;NR==6\u0026#34;` Timestamp=$(date +%s -d \u0026#34;$datetime\u0026#34;) Now_Timestamp=$(date +%s) Difference_Timestamp=$(($Now_Timestamp-$Timestamp)) days=0;hours=0;minutes=0; sec_in_day=$((60*60*24)); sec_in_hour=$((60*60)); sec_in_minute=60 while (( $(($Difference_Timestamp-$sec_in_day)) \u0026gt; 1 )) do let Difference_Timestamp=Difference_Timestamp-sec_in_day let days++ done while (( $(($Difference_Timestamp-$sec_in_hour)) \u0026gt; 1 )) do let Difference_Timestamp=Difference_Timestamp-sec_in_hour let hours++ done echo \u0026#34;$days 天 $hours 小时前\u0026#34; } function getUserLastLogin(){ # 获取用户最近一次登录的时间，含年份 # 很遗憾last命令不支持显示年份，只有\u0026#34;last -t YYYYMMDDHHMMSS\u0026#34;表示某个时间之间的登录，我 # 们只能用最笨的方法了，对比今天之前和今年元旦之前（或者去年之前和前年之前……）某个用户 # 登录次数，如果登录统计次数有变化，则说明最近一次登录是今年。 username=$1 : ${username:=\u0026#34;`whoami`\u0026#34;} thisYear=$(date +%Y) oldesYear=$(last | tail -n1 | awk \u0026#39;{print $NF}\u0026#39;) while(( $thisYear \u0026gt;= $oldesYear));do loginBeforeToday=$(last $username | grep $username | wc -l) loginBeforeNewYearsDayOfThisYear=$(last $username -t $thisYear\u0026#34;0101000000\u0026#34; | grep $username | wc -l) if [ $loginBeforeToday -eq 0 ];then echo \u0026#34;从未登录过\u0026#34; break elif [ $loginBeforeToday -gt $loginBeforeNewYearsDayOfThisYear ];then lastDateTime=$(last -i $username | head -n1 | awk \u0026#39;{for(i=4;i\u0026lt;(NF-2);i++)printf\u0026#34;%s \u0026#34;,$i}\u0026#39;)\u0026#34; $thisYear\u0026#34; lastDateTime=$(date \u0026#34;+%Y-%m-%d %H:%M:%S\u0026#34; -d \u0026#34;$lastDateTime\u0026#34;) echo \u0026#34;$lastDateTime\u0026#34; break else thisYear=$((thisYear-1)) fi done } function getUserStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m*************************************************用户检查*******************************************************\\033[0m\u0026#34; #/etc/passwd 最后修改时间 pwdfile=\u0026#34;$(cat /etc/passwd)\u0026#34; Modify=$(stat /etc/passwd | grep Modify | tr \u0026#39;.\u0026#39; \u0026#39; \u0026#39; | awk \u0026#39;{print $2,$3}\u0026#39;) echo \u0026#34;/etc/passwd: $Modify ($(getHowLongAgo $Modify))\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m******************特权用户******************\\033[0m\u0026#34; RootUser=\u0026#34;\u0026#34; for user in $(echo \u0026#34;$pwdfile\u0026#34; | awk -F: \u0026#39;{print $1}\u0026#39;);do if [ $(id -u $user) -eq 0 ];then echo \u0026#34;$user\u0026#34; RootUser=\u0026#34;$RootUser,$user\u0026#34; fi done echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m******************用户列表******************\\033[0m\u0026#34; USERs=0 echo \u0026#34;$( echo \u0026#34;用户名 UID GID HOME SHELL 最后一次登录\u0026#34; for shell in $(grep -v \u0026#34;/sbin/nologin\u0026#34; /etc/shells);do for username in $(grep \u0026#34;$shell\u0026#34; /etc/passwd| awk -F: \u0026#39;{print $1}\u0026#39;);do userLastLogin=\u0026#34;$(getUserLastLogin $username)\u0026#34; echo \u0026#34;$pwdfile\u0026#34; | grep -w \u0026#34;$username\u0026#34; |grep -w \u0026#34;$shell\u0026#34;| awk -F: -v lastlogin=\u0026#34;$(echo \u0026#34;$userLastLogin\u0026#34; | tr \u0026#39; \u0026#39; \u0026#39;_\u0026#39;)\u0026#34; \u0026#39;{print $1,$3,$4,$6,$7,lastlogin}\u0026#39; done let USERs=USERs+$(echo \u0026#34;$pwdfile\u0026#34; | grep \u0026#34;$shell\u0026#34;| wc -l) done )\u0026#34; | column -t echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m******************空密码用户****************\\033[0m\u0026#34; USEREmptyPassword=\u0026#34;\u0026#34; for shell in $(grep -v \u0026#34;/sbin/nologin\u0026#34; /etc/shells);do for user in $(echo \u0026#34;$pwdfile\u0026#34; | grep \u0026#34;$shell\u0026#34; | cut -d: -f1);do r=$(awk -F: \u0026#39;$2==\u0026#34;!!\u0026#34;{print $1}\u0026#39; /etc/shadow | grep -w $user) if [ ! -z $r ];then echo $r USEREmptyPassword=\u0026#34;$USEREmptyPassword,\u0026#34;$r fi done done echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m*****************相同ID用户*****************\\033[0m\u0026#34; USERTheSameUID=\u0026#34;\u0026#34; UIDs=$(cut -d: -f3 /etc/passwd | sort | uniq -c | awk \u0026#39;$1\u0026gt;1{print $2}\u0026#39;) for uid in $UIDs;do echo -n \u0026#34;$uid\u0026#34;; USERTheSameUID=\u0026#34;$uid\u0026#34; r=$(awk -F: \u0026#39;ORS=\u0026#34;\u0026#34;;$3==\u0026#39;\u0026#34;$uid\u0026#34;\u0026#39;{print \u0026#34;:\u0026#34;,$1}\u0026#39; /etc/passwd) echo \u0026#34;$r\u0026#34; echo \u0026#34;\u0026#34; USERTheSameUID=\u0026#34;$USERTheSameUID $r,\u0026#34; done } function getPasswordStatus { echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m*************************************************密码检查*******************************************************\\033[0m\u0026#34; pwdfile=\u0026#34;$(cat /etc/passwd)\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m****************密码过期检查****************\\033[0m\u0026#34; result=\u0026#34;\u0026#34; for shell in $(grep -v \u0026#34;/sbin/nologin\u0026#34; /etc/shells);do for user in $(echo \u0026#34;$pwdfile\u0026#34; | grep \u0026#34;$shell\u0026#34; | cut -d: -f1);do get_expiry_date=$(/usr/bin/chage -l $user | grep \u0026#39;Password expires\u0026#39; | cut -d: -f2) if [[ $get_expiry_date = \u0026#39; never\u0026#39; || $get_expiry_date = \u0026#39;never\u0026#39; ]];then printf \u0026#34;%-15s 永不过期\\n\u0026#34; $user result=\u0026#34;$result,$user:never\u0026#34; else password_expiry_date=$(date -d \u0026#34;$get_expiry_date\u0026#34; \u0026#34;+%s\u0026#34;) current_date=$(date \u0026#34;+%s\u0026#34;) diff=$(($password_expiry_date-$current_date)) let DAYS=$(($diff/(60*60*24))) printf \u0026#34;%-15s %s天后过期\\n\u0026#34; $user $DAYS result=\u0026#34;$result,$user:$DAYS days\u0026#34; fi done done report_PasswordExpiry=$(echo $result | sed \u0026#39;s/^,//\u0026#39;) echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m****************密码策略检查****************\\033[0m\u0026#34; grep -v \u0026#34;#\u0026#34; /etc/login.defs | grep -E \u0026#34;PASS_MAX_DAYS|PASS_MIN_DAYS|PASS_MIN_LEN|PASS_WARN_AGE\u0026#34; } function getSudoersStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m**********************************************Sudoers检查*******************************************************\\033[0m\u0026#34; conf=$(grep -v \u0026#34;^#\u0026#34; /etc/sudoers| grep -v \u0026#34;^Defaults\u0026#34; | sed \u0026#39;/^$/d\u0026#39;) echo \u0026#34;$conf\u0026#34; echo \u0026#34;\u0026#34; } function getInstalledStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m*************************************************软件检查*******************************************************\\033[0m\u0026#34; rpm -qa --last | head | column -t } function getProcessStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m*************************************************进程检查*******************************************************\\033[0m\u0026#34; if [ $(ps -ef | grep defunct | grep -v grep | wc -l) -ge 1 ];then echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m***************僵尸进程***************\\033[0m\u0026#34; ps -ef | head -n1 ps -ef | grep defunct | grep -v grep fi echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m************CPU占用TOP 10进程*************\\033[0m\u0026#34; echo -e \u0026#34;用户 进程ID %CPU 命令 $(ps aux | awk \u0026#39;{print $1, $2, $3, $11}\u0026#39; | sort -k3rn | head -n 10 )\u0026#34;| column -t echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m************内存占用TOP 10进程*************\\033[0m\u0026#34; echo -e \u0026#34;用户 进程ID %MEM 虚拟内存 常驻内存 命令 $(ps aux | awk \u0026#39;{print $1, $2, $4, $5, $6, $11}\u0026#39; | sort -k3rn | head -n 10 )\u0026#34;| column -t #echo \u0026#34;\u0026#34; #echo -e \u0026#34;\\033[36m************SWAP占用TOP 10进程*************\\033[0m\u0026#34; #awk: fatal: cannot open file `/proc/18713/smaps\u0026#39; for reading (No such file or directory) #for i in `cd /proc;ls |grep \u0026#34;^[0-9]\u0026#34;|awk \u0026#39; $0 \u0026gt;100\u0026#39;`;do awk \u0026#39;{if (-f /proc/$i/smaps) print \u0026#34;$i file is not exist\u0026#34;; else print \u0026#34;$i\u0026#34;}\u0026#39;;done # for i in `cd /proc;ls |grep \u0026#34;^[0-9]\u0026#34;|awk \u0026#39; $0 \u0026gt;100\u0026#39;` ;do awk \u0026#39;/Swap:/{a=a+$2}END{print \u0026#39;\u0026#34;$i\u0026#34;\u0026#39;,a/1024\u0026#34;M\u0026#34;}\u0026#39; /proc/$i/smaps ;done |sort -k2nr \u0026gt; /tmp/swap.txt #echo -e \u0026#34;进程ID SWAP使用 $(cat /tmp/swap.txt|grep -v awk | head -n 10)\u0026#34;| column -t } function getSyslogStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************syslog检查*******************************************************\\033[0m\u0026#34; echo \u0026#34;SYSLOG服务状态：$(getState rsyslog)\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m***************rsyslog配置******************\\033[0m\u0026#34; cat /etc/rsyslog.conf 2\u0026gt;/dev/null | grep -v \u0026#34;^#\u0026#34; | grep -v \u0026#34;^\\\\$\u0026#34; | sed \u0026#39;/^$/d\u0026#39; | column -t } function getFirewallStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************防火墙检查*******************************************************\\033[0m\u0026#34; echo -e \u0026#34;\\033[36m****************防火墙状态******************\\033[0m\u0026#34; if [[ $centosVersion = 7 ]];then systemctl status firewalld \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 status=$? if [ $status -eq 0 ];then s=\u0026#34;active\u0026#34; elif [ $status -eq 3 ];then s=\u0026#34;inactive\u0026#34; elif [ $status -eq 4 ];then s=\u0026#34;permission denied\u0026#34; else s=\u0026#34;unknown\u0026#34; fi else s=\u0026#34;$(getState iptables)\u0026#34; fi echo \u0026#34;firewalld: $s\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m****************防火墙配置******************\\033[0m\u0026#34; cat /etc/sysconfig/firewalld 2\u0026gt;/dev/null } function getSNMPStatus(){ #SNMP服务状态，配置等 echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************SNMP检查*********************************************************\\033[0m\u0026#34; status=\u0026#34;$(getState snmpd)\u0026#34; echo \u0026#34;SNMP服务状态：$status\u0026#34; echo \u0026#34;\u0026#34; if [ -e /etc/snmp/snmpd.conf ];then echo \u0026#34;/etc/snmp/snmpd.conf\u0026#34; echo \u0026#34;--------------------\u0026#34; cat /etc/snmp/snmpd.conf 2\u0026gt;/dev/null | grep -v \u0026#34;^#\u0026#34; | sed \u0026#39;/^$/d\u0026#39; fi } function getState(){ if [[ $centosVersion \u0026lt; 7 ]];then if [ -e \u0026#34;/etc/init.d/$1\u0026#34; ];then if [ `/etc/init.d/$1 status 2\u0026gt;/dev/null | grep -E \u0026#34;is running|正在运行\u0026#34; | wc -l` -ge 1 ];then r=\u0026#34;active\u0026#34; else r=\u0026#34;inactive\u0026#34; fi else r=\u0026#34;unknown\u0026#34; fi else #CentOS 7+ r=\u0026#34;$(systemctl is-active $1 2\u0026gt;\u0026amp;1)\u0026#34; fi echo \u0026#34;$r\u0026#34; } function getSSHStatus(){ #SSHD服务状态，配置,受信任主机等 echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m************************************************SSH检查*********************************************************\\033[0m\u0026#34; #检查受信任主机 pwdfile=\u0026#34;$(cat /etc/passwd)\u0026#34; echo \u0026#34;SSH服务状态：$(getState sshd)\u0026#34; Protocol_Version=$(cat /etc/ssh/sshd_config | grep Protocol | awk \u0026#39;{print $2}\u0026#39;) echo \u0026#34;SSH协议版本：$Protocol_Version\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m****************信任主机******************\\033[0m\u0026#34; authorized=0 for user in $(echo \u0026#34;$pwdfile\u0026#34; | grep /bin/bash | awk -F: \u0026#39;{print $1}\u0026#39;);do authorize_file=$(echo \u0026#34;$pwdfile\u0026#34; | grep -w $user | awk -F: \u0026#39;{printf $6\u0026#34;/.ssh/authorized_keys\u0026#34;}\u0026#39;) authorized_host=$(cat $authorize_file 2\u0026gt;/dev/null | awk \u0026#39;{print $3}\u0026#39; | tr \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39; | sed \u0026#39;s/,$//\u0026#39;) if [ ! -z $authorized_host ];then echo \u0026#34;$user 授权 \\\u0026#34;$authorized_host\\\u0026#34; 无密码访问\u0026#34; fi let authorized=authorized+$(cat $authorize_file 2\u0026gt;/dev/null | awk \u0026#39;{print $3}\u0026#39;|wc -l) done echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m*******是否允许ROOT远程登录***************\\033[0m\u0026#34; config=$(cat /etc/ssh/sshd_config | grep PermitRootLogin) firstChar=${config:0:1} if [ $firstChar == \u0026#34;#\u0026#34; ];then PermitRootLogin=\u0026#34;yes\u0026#34; else PermitRootLogin=$(echo $config | awk \u0026#39;{print $2}\u0026#39;) fi echo \u0026#34;PermitRootLogin $PermitRootLogin\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m*************ssh服务配置******************\\033[0m\u0026#34; cat /etc/ssh/sshd_config | grep -v \u0026#34;^#\u0026#34; | sed \u0026#39;/^$/d\u0026#39; } function getNTPStatus(){ #NTP服务状态，当前时间，配置等 echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***********************************************NTP检查**********************************************************\\033[0m\u0026#34; if [ -e /etc/ntp.conf ];then echo \u0026#34;NTP服务状态：$(getState ntpd)\u0026#34; echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[36m*************NTP服务配置******************\\033[0m\u0026#34; cat /etc/ntp.conf 2\u0026gt;/dev/null | grep -v \u0026#34;^#\u0026#34; | sed \u0026#39;/^$/d\u0026#39; fi } function check(){ version getSystemStatus get_resource getCpuStatus getMemStatus getDiskStatus getNetworkStatus getListenStatus getProcessStatus getServiceStatus getAutoStartStatus getLoginStatus getCronStatus getUserStatus getPasswordStatus getSudoersStatus getFirewallStatus getSSHStatus getSyslogStatus getSNMPStatus getNTPStatus getInstalledStatus } #执行检查并保存检查结果 check \u0026gt; $RESULTFILE echo -e \u0026#34;\\033[44;37m 主机巡检结果存放在：$RESULTFILE \\033[0m\u0026#34; #上传检查结果的文件 #curl -F \u0026#34;filename=@$RESULTFILE\u0026#34; \u0026#34;$uploadHostDailyCheckApi\u0026#34; 2\u0026gt;/dev/null cat $RESULTFILE ","permalink":"https://www.lvbibir.cn/posts/tech/shell-server-inspection/","summary":"代码如下 #!/bin/bash #参数定义 date=`date +\u0026#34;%Y-%m-%d-%H:%M:%S\u0026#34;` centosVersion=$(awk \u0026#39;{print $(NF-1)}\u0026#39; /etc/redhat-release) VERSION=`date +%F` #日志相关 LOGPATH=\u0026#34;/tmp/awr\u0026#34; [ -e $LOGPATH ] || mkdir -p $LOGPATH RESULTFILE=\u0026#34;$LOGPATH/HostCheck-`hostname`-`date +%Y%m%d`.txt\u0026#34; #调用函数库 [ -f /etc/init.d/functions ] \u0026amp;\u0026amp; source /etc/init.d/functions export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin source /etc/profile #root用户执行脚本 [ $(id -u) -gt 0 ] \u0026amp;\u0026amp; echo \u0026#34;请用root用户执行此脚本！\u0026#34; \u0026amp;\u0026amp; exit 1 function version(){ echo \u0026#34;\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;[${date}] \u0026gt;\u0026gt;\u0026gt; `hostname -s` 主机巡检\u0026#34; } function getSystemStatus(){ echo \u0026#34;\u0026#34; echo -e \u0026#34;\\033[33m***","title":"shell | 服务器巡检脚本"},{"content":"前言 有需求需要在 openeuler 的操作系统上测试一个 C 程序，做了一个简化版的程序，程序很简单，循环读取一个文件并打印文件内容，在程序执行过程中使用 echo 手动向文件中追加内容，程序要能读取到，效果如下：\n测试程序代码如下：\n#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; int main(int argc, char **argv) { FILE *f = fopen(\u0026#34;./Syslog.log\u0026#34;, \u0026#34;rb\u0026#34;); if (f == NULL) return 1; char buffer[1024] = {0}; size_t len = 0; while(1) { len = fread(buffer, 1, sizeof(buffer), f); if (len \u0026gt; 0) { buffer[len] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;read:%s\\n\u0026#34;,buffer); } else { printf(\u0026#34;noread\\n\u0026#34;); } sleep(2); } return 0; } 在 Rhel-7.5 上测试一切正常，开始在 openeuler 上进行测试，结果发现后续追加的内容没有输出：\n故障排查 考虑到影响程序执行结果的几个因素：程序本身，内核版本，gcc版本，glibc版本。\n程序本身应该是没问题的，内核版本一般对C语言程序的影响也不会很大，还是优先看gcc版本和glibc版本。\n按照思路进行了一些测试，测试结果：\n可行： centos7.5（gcc-4.8.5，kernel-3.10，glibc\u0026lt;=2.28） centos7.5（gcc-7.3.0，kernel-3.10，glibc\u0026lt;=2.28） centos7.5（gcc-7.3.0，kernel-5.12，glibc\u0026lt;=2.28） 不可行： isoft-server-6.0（gcc-7.3.0，4.19.90，glibc\u0026gt;=2.28） centos8（gcc-8.4.0，kernel-4.18.0，glibc\u0026gt;=2.28） openeuler-20.03-LTS-SP1（gcc-7.3.0，kernel-4.19.90，glibc\u0026gt;=2.28） 按照测试结果，似乎 gcc 版本和内核版本对程序没什么影响，大概率应该是 glibc 版本导致的。由于程序很简单，只是以 rb 方式 fopen 打开文件循环读取文件内容，求证(google)起来也比较轻松，很快就找到了问题在哪：glibc 2.28修复了 fread 的行为\n这个 glibc 的 bug 是05年提的，到18年才修复，也是担心 break 之前大量的代码。https://sourceware.org/bugzilla/show_bug.cgi?id=1190\n现在再修改一下代码：\n#include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; int main(int argc, char **argv) { FILE *f = fopen(\u0026#34;./Syslog.log\u0026#34;, \u0026#34;rb\u0026#34;); if (f == NULL) return 1; char buffer[1024] = {0}; size_t len = 0; while(1) { len = fread(buffer, 1, sizeof(buffer), f); if (len \u0026gt; 0) { buffer[len] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;read:%s\\n\u0026#34;,buffer); } else { if (feof (f)) { printf(\u0026#34;Read error, clear error flag to retry...\\n\u0026#34;); clearerr (f); } } sleep(2); } return 0; } 添加了一块清除标记的片段，在 glibc\u0026gt;=2.28 的系统上程序也可以正常运行了\n","permalink":"https://www.lvbibir.cn/posts/tech/record-of-program-test/","summary":"前言 有需求需要在 openeuler 的操作系统上测试一个 C 程序，做了一个简化版的程序，程序很简单，循环读取一个文件并打印文件内容，在程序执行过程中使用 echo 手动向文件中追加内容，程序要能读取到，效果如下： 测试程序代码如下： #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;unistd.h\u0026gt; int main(int argc, char **argv) { FILE *f = fopen(\u0026#34;./Syslog.log\u0026#34;, \u0026#34;rb\u0026#34;); if (f == NULL) return 1; char buffer[1024] = {0}; size_t len = 0; while(1) { len = fread(buffer, 1, sizeof(buffer), f); if (len \u0026gt; 0)","title":"记一次程序测试"},{"content":"\r","permalink":"https://www.lvbibir.cn/talk/","summary":"","title":"💬 说说"},{"content":"前言 介绍在CentOS7上部署BBR的详细过程\nBBR简介：（Bottleneck Bandwidth and RTT）是一种新的拥塞控制算法，由Google开发。有了BBR，Linux服务器可以显着提高吞吐量并减少连接延迟\n1. 查看当前内核版本 uname -r 显示当前内核为3.10.0，因此我们需要更新内核\n2. 使用 ELRepo RPM 仓库升级内核 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org //无返回内容 rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm 使用ELRepo repo更新安装5.12.3内核\nyum --enablerepo=elrepo-kernel install kernel-ml -y\n更新完成后，执行如下命令，确认更新结果\nrpm -qa | grep kernel\nkernel-ml-5.12.3-1.el7.elrepo.x86_64 //为更新后文件版本\n3. 通过设置默认引导为 grub2 ，来启用5.12.3内核 egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'\n根据显示结果得知5.12.3内核处于行首，对应行号为 0 执行以下命令将其设置为默认引导项\ngrub2-set-default 0\n4. 重启系统并确认内核版本 shutdown -r now or reboot\n当服务器重新联机时，请进行root登录并重新运行uname命令以确认您当前内核版本\nuname -r\n至此完成内核更新与默认引导设置\n5. 启用BBR 执行命令查看当前拥塞控制算法\nsysctl -n net.ipv4.tcp_congestion_control\n启用 BBR 算法，需要对 sysctl.conf 配置文件进行修改，依次执行以下每行命令\necho \u0026#39;net.core.default_qdisc=fq\u0026#39; | tee -a /etc/sysctl.conf echo \u0026#39;net.ipv4.tcp_congestion_control=bbr\u0026#39; | tee -a /etc/sysctl.conf sysctl -p 进行BBR的启用验证\nsysctl net.ipv4.tcp_available_congestion_control sysctl -n net.ipv4.tcp_congestion_control 最后检查BBR模块是否已经加载\nlsmod | grep bbr\n至此，BBR的部署已全部完成。\n参考 https://blog.csdn.net/desertworm/article/details/116759380\n","permalink":"https://www.lvbibir.cn/posts/tech/centos7-open-bbr/","summary":"前言 介绍在CentOS7上部署BBR的详细过程 BBR简介：（Bottleneck Bandwidth and RTT）是一种新的拥塞控制算法，由Google开发。有了BBR，Linux服务器可以显着提高吞吐量并减少连接延迟 1. 查看当前内核版本 uname -r 显示当前内核为3.10.0，因此我们需要更新内核 2. 使用 ELRepo RPM 仓库","title":"centos7开启bbr算法"},{"content":"CentOS6及以前 在CentOS6及以前的版本中，free命令输出是这样的：\n[root@wordpress ~]# free -m total used free shared buffers cached Mem: 1002 769 233 0 62 421 -/+ buffers/cache: 286 716 Swap: 1153 0 1153 第一行：\n​\t系统内存主要分为五部分：total(系统内存总量)，used(程序已使用内存)，free(空闲内存)，buffers(buffer cache)，cached(Page cache)。\n​\t系统总内存total = used + free； buffers和cached被算在used里，因此第一行系统已使用内存used = buffers + cached + 第二行系统已使用内存used\n​\t由于buffers和cached在系统需要时可以被回收使用，因此系统可用内存 = free + buffers + cached；\n​\tshared为程序共享的内存空间，往往为0。\n第二行：\n正因为buffers和cached中的一部分内存容量在系统需要时可以被回收使用，因此buffer和cached中有部分内存其实可以算作可用内存，因此：\n系统已使用内存，即第二行的used = total - 第二行free\n系统可用内存，即第二行的free = 第一行的free + buffers + cached\n第三行：\nswap内存交换空间使用情况\nCentOS7及以后 CentOS7及以后free命令的输出如下：\n[root@wordpress ~]# free -m total used free shared buff/cache available Mem: 1839 866 74 97 897 695 Swap: 0 0 0 buffer和cached被合成一组，加入了一个available，关于此available，文档上的说明如下：\nMemAvailable: An estimate of how much memory is available for starting new applications, without swapping.\n即系统可用内存，之前说过由于buffer和cache可以在需要时被释放回收，系统可用内存即 free + buffer + cache，在CentOS7之后这种说法并不准确，因为并不是所有的buffer/cache空间都可以被回收。\n即available = free + buffer/cache - 不可被回收内存(共享内存段、tmpfs、ramfs等)。\n因此在CentOS7之后，用户不需要去计算buffer/cache，即可以看到还有多少内存可用，更加简单直观。\nbuffer/cache相关介绍 什么是buffer/cache？ buffer 和 cache 是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在 Linux 的内存管理中，这里的 buffer 指 Linux 内存的： Buffer cache 。这里的 cache 指 Linux 内存中的： Page cache 。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（ buffer ）被用来当成对 io 设备写的缓存，而另一个（ cache ）被用来当作对 io 设备的读缓存，这里的 io 设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中， page cache 顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以 page 进行分配管理的，都可以使用 page cache 作为其缓存来管理使用。当然，不是所有的内存都是以页（ page ）进行管理的，也有很多是针对块（ block ）进行管理的，这部分内存使用如果要用到 cache 功能，则都集中到 buffer cache 中来使用。（从这个角度出发，是不是 buffer cache 改名叫做 block cache 更好？）然而，也不是所有块（ block ）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在 X86 上无论是 32 位还是 64 位都是 4k 。\n明白了这两套缓存系统的区别，就可以理解它们究竟都可以用来做什么了。\n什么是 page cache Page cache 主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有 read ／ write 操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用： mmap 是不是很自然的也应该用到 page cache ？在当前的系统实现里， page cache 也被作为其它文件类型的缓存设备来用，所以事实上 page cache 也负责了大部分的块设备文件的缓存工作。\n什么是 buffer cache Buffer cache 则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。这意味着某些对块的操作会使用 buffer cache 进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候， page cache 的内容会被改变，而 buffer cache 则可以用来将 page 标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（ writeback ）时，就不用将整个 page 写回，而只需要写回修改的部分即可。\n如何回收 cache ？ Linux 内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对 buffer ／ cache 的释放。尤其是被使用更多的 cache 空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放 cache ，作为 free 空间分给相关进程使用。所以一般情况下，我们认为 buffer/cache 空间可以被释放，这个理解是正确的。\n但是这种清缓存的工作也并不是没有成本。理解 cache 是干什么的就可以明白清缓存必须保证 cache 中的数据跟对应文件中的数据一致，才能对 cache 进行释放。所以伴随着 cache 清除的行为的，一般都是系统 IO 飙高。因为内核要对比 cache 中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。\n在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以使用下面这个文件来人工触发缓存清除的操作\n[root@tencent64 ~]# cat /proc/sys/vm/drop_caches\n方法是：\necho 3 \u0026gt; /proc/sys/vm/drop_caches 当然，这个文件可以设置的值分别为 1 、 2 、 3 。它们所表示的含义为：\n表示清除 pagecache echo 1 \u0026gt; /proc/sys/vm/drop_caches 表示清除回收 slab 分配器中的对象（包括目录项缓存和 inode 缓存）。 slab 分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的 pagecache echo 2 \u0026gt; /proc/sys/vm/drop_caches 表示清除 pagecache 和 slab 分配器中的缓存对象。 echo 3 \u0026gt; /proc/sys/vm/drop_caches 参考 https://blog.csdn.net/qq_41781322/article/details/87187957\n","permalink":"https://www.lvbibir.cn/posts/tech/linux-command-free/","summary":"CentOS6及以前 在CentOS6及以前的版本中，free命令输出是这样的： [root@wordpress ~]# free -m total used free shared buffers cached Mem: 1002 769 233 0 62 421 -/+ buffers/cache: 286 716 Swap: 1153 0 1153 第一行： ​ 系统内存主要分为五部分：total(系统内存总量)，used(程序已使用内存)，free(空闲内存)，buffers(buffer cache)","title":"free命令详解"},{"content":"前端时间在国家信息中心的一个项目上需要在 H3C 服务器上安装操作系统然后配置一套 spring boot 项目，结果在装操作系统过程中就遇到了问题：安装完操作系统后无法自动引导，只能通过重启服务器按 F7 进入引导选项，选择对应的逻辑盘才能正常引导\n服务器有7块物理磁盘，前两块是 600 GB 的机械盘，后五块是 1T 的机械盘，前两块 600GB 的盘做了 raid1 ，剩下的5块盘，选择 n+2 做 raid6 。\n规划是这样的，操作系统安装在 raid6 上，raid1 那块逻辑磁盘等系统安装完后再进行挂载，用作业务的数据备份。\n安装完之后却发现有很多台系统引导不起来，必须手动引导，只有一台可以重启后直接进入系统。为了快速解决问题，还是第一时间联系了 H3C 的售后开工单解决，结果不言而喻，业务水平堪忧，并没有解决。不过也给我提供了一些思路。\n整理一下思路：\n出现问题之后更换安装介质重新安装了两次，问题都是一样的 系统安装这块操作肯定没问题，那问题就出在硬件上面了 开始寻找硬件上面的问题，服务器都是全新的，只是做了 raid 。询问了下做raid的同事，看可以正常引导的服务器和非正常引导的服务器之间 raid 配置有何不同\n问题估计找到了：正常服务器是先创建的 raid6 ，剩下的都是先创建的raid1。\n解决方案：\n系统需要重装：删除原先已经创建好的 raid，先创建系统使用的 raid6. 系统无需重装：删除掉 raid1 ，保存后重新创建 raid1。这时，raid6 的顺位会比raid1高，系统就可以正常启动了 最终我们这边采取的是第二种方案\n","permalink":"https://www.lvbibir.cn/posts/tech/h3c-server-can-not-boot-system/","summary":"前端时间在国家信息中心的一个项目上需要在 H3C 服务器上安装操作系统然后配置一套 spring boot 项目，结果在装操作系统过程中就遇到了问题：安装完操作系统后无法自动引导，只能通过重启服务器按 F7 进入引导选项，选择对应的逻辑盘才能正常引导 服务器有7块物理磁盘，前两块是 600 GB 的机械盘，后五块是 1T 的机械盘，前","title":"H3C服务器装完系统无法引导"},{"content":"1、进入bios修改启动模式，将 UEFI 改为 Legacy bios\n2、 重启服务器，ctrl + r 进入 lsi 阵列卡管理\n3、选择对应阵列卡\n4、配置逻辑盘\n5、配置完逻辑盘后可以选择从某一块逻辑盘启动\nCtrl-P 进入到ctrl mgmt. -\u0026gt; TAB切换到boot device\n回车后可以看到当前的逻辑盘，上下选择要引导的逻辑盘即可。\nApply保存退出完成。\n","permalink":"https://www.lvbibir.cn/posts/tech/h3c-server-config-raid/","summary":"1、进入bios修改启动模式，将 UEFI 改为 Legacy bios 2、 重启服务器，ctrl + r 进入 lsi 阵列卡管理 3、选择对应阵列卡 4、配置逻辑盘 5、配置完逻辑盘后可以选择从某一块逻辑盘启动 Ctrl-P 进入到ctrl mgmt. -\u0026gt; TAB切换到boot device 回车后可以看到当前的逻辑盘，上下选择要引导的逻辑盘即可。 Apply保存退出完","title":"H3C服务器配置raid"},{"content":"pxe环境 dhcp+tftp+http\npxe-server：isoft-serveros-v4.2（3.10.0-957.el7.isoft.x86_64）\n引导的iso：isoft-serveros-aarch64-oe1-v5.1（4.19.90-2003.4.0.0036.oe1.aarch64）\n物理服务器：浪潮 Inspur\ndhcpd.conf配置 [root@localhost isoft-5.1-arm]# vim /etc/dhcp/dhcpd.conf default-lease-time 43200; max-lease-time 345600; option space PXE; option arch code 93 = unsigned integer 16; option routers 192.168.1.1; option subnet-mask 255.255.255.0; option broadcast-address 192.168.1.255; option time-offset -18000; ddns-update-style none; allow client-updates; allow booting; allow bootp; next-server 192.168.1.1; if option arch = 00:07 or arch = 00:09 { filename \u0026#34;x86/bootx64.efi\u0026#34;; } else { filename \u0026#34;arm/grubaa64.efi\u0026#34;; } shared-network works { subnet 192.168.1.0 netmask 255.255.255.0 { range dynamic-bootp 192.168.1.221 192.168.1.253; } } grub.cfg配置 [root@localhost tftpboot]# vim arm/grub.cfg set default=\u0026#34;0\u0026#34; function load_video { if [ x$feature_all_video_module = xy ]; then insmod all_video else insmod efi_gop insmod efi_uga insmod ieee1275_fb insmod vbe insmod vga insmod video_bochs insmod video_cirrus fi } load_video set gfxpayload=keep insmod gzio insmod part_gpt insmod ext2 set timeout=60 ### END /etc/grub.d/00_header ### search --no-floppy --set=root -l \u0026#39;iSoftServerOS-5.1-aarch64\u0026#39; ### BEGIN /etc/grub.d/10_linux ### menuentry \u0026#39;Install iSoftServerOS 5.1 with GUI mode\u0026#39; --class red --class gnu-linux --class gnu --class os { # linux /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=iSoftServerOS-5.1-aarch64 ro inst.geoloc=0 selinux=0 # initrd /images/pxeboot/initrd.img linux /arm51/vmlinuz ip=dhcp method=http://192.168.1.1/isoft-5.1-arm ks=http://192.168.1.1/isoft-5.1-arm/anaconda-ks.cfg initrd /arm51/initrd.img } #menuentry \u0026#39;Install iSoftServerOS 5.1 for ZF with GUI mode\u0026#39; --class red --class gnu-linux --class gnu --class os { # linux /arm51-zf/vmlinuz ip=dhcp method=http://192.168.1.1/isoft-5.1-zfarm # initrd /arm51-zf/initrd.img #} ks.cfg配置 [root@localhost isoft-5.1-arm]# vim anaconda-ks.cfg lang zh_CN.UTF-8 # Network information network --bootproto=dhcp --device=eno1 --ipv6=auto --no-activate network --bootproto=dhcp --device=eno2 --ipv6=auto network --bootproto=dhcp --device=eno3 --ipv6=auto network --bootproto=dhcp --device=eno4 --ipv6=auto network --bootproto=dhcp --device=enp22s0f0 --ipv6=auto network --bootproto=dhcp --device=enp22s0f1 --ipv6=auto network --bootproto=dhcp --device=enp22s0f2 --ipv6=auto network --bootproto=dhcp --device=enp22s0f3 --ipv6=auto network --hostname=localhost.localdomain # Root password rootpw --iscrypted $6$afv9h6qEnQTq3WSl$GHtOmvLkHrBin8vTWLbRaa2r.Ur9mUQR7XypWRoEWZYCwwJ2MnuMPxpNiNLSG1vSa5qBODHJcqIUUWkHm0IVl. # SELinux configuration selinux --disabled # X Window System configuration information xconfig --startxonboot # Run the Setup Agent on first boot firstboot --enable # System services services --enabled=\u0026#34;chronyd\u0026#34; # System timezone timezone Asia/Shanghai --isUtc user --groups=wheel --name=testuser --password=$6$9SyzoTjQU2syj2Bk$SQ4WZAV/go3KeX6rJN3cieNpY4l7aU2wHxad75yWlbKBh.ithhrU/jfA09JUq7cb10D0QTCwtClmItfg/N47t. --iscrypted --gecos=\u0026#34;testuser\u0026#34; # Disk partitioning information part /boot/efi --fstype=\u0026#34;efi\u0026#34; --ondisk=sda --size=200 --fsoptions=\u0026#34;umask=0077,shortname=winnt\u0026#34; part pv.521 --fstype=\u0026#34;lvmpv\u0026#34; --ondisk=sda --size=913974 part /boot --fstype=\u0026#34;ext4\u0026#34; --ondisk=sda --size=1024 volgroup isoftserveros --pesize=4096 pv.521 logvol /home --fstype=\u0026#34;xfs\u0026#34; --size=756272 --name=home --vgname=isoftserveros logvol swap --fstype=\u0026#34;swap\u0026#34; --size=4096 --name=swap --vgname=isoftserveros logvol / --fstype=\u0026#34;xfs\u0026#34; --size=153600 --name=root --vgname=isoftserveros %packages @^mate-desktop-environment @additional-devel @development @file-server @headless-management @legacy-unix @network-server @network-tools @scientific @security-tools @system-tools @virtual-tools %end %anaconda pwpolicy root --minlen=8 --minquality=1 --notstrict --nochanges --notempty pwpolicy user --minlen=8 --minquality=1 --notstrict --nochanges --emptyok pwpolicy luks --minlen=8 --minquality=1 --notstrict --nochanges --notempty %end reboot ","permalink":"https://www.lvbibir.cn/posts/tech/pxe-inspur-isoft5.1-aarch64/","summary":"pxe环境 dhcp+tftp+http pxe-server：isoft-serveros-v4.2（3.10.0-957.el7.isoft.x86_64） 引导的iso：isoft-serveros-aarch64-oe1-v5.1（4.19.90-2003.4.0.0036.oe1.aarch64） 物理","title":"pxe 安装 isoft-5.1(aarch64)"},{"content":"前言 前段时间着手开始搭建自己的wordpress博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的lamp架构，并已经做了一些初始化配置，直接访问ip就可以进行wordpress的安装和配置了。\n这套wordpress的一个非常好的优点就是可以在阿里云的控制台一键配置https证书，当然仅限在阿里云购买的ssl证书\n后续还是决定将wordpress整体迁移到docker中，全部服务都用docker跑。这样只要数据做好持久化，使用docker的灵活性会好很多，做全站备份和迁移也很方便。\n备份\u0026amp;迁移 wordpress迁移起来还是比较方便的，需要备份的内容大概有这些：插件、主题、uploads、数据库\n备份插件：UpdraftPlus，这是一款个人使用过一款比较优秀的备份/迁移插件，免费版的功能基本满足大部分人需求，支持手动备份和定时备份、备份和恢复都支持部分备份，比如只备份数据库，只恢复数据库的某一张表。\n免费版的并不支持wordpress迁移，但我们可以通过导入导出备份文件的方式实现站点迁移，前提是做好测试。\n备份步骤：\n在备份插件中手动备份一次 下载备份文件 迁移步骤：\n准备好系统环境和docker环境（docker-compose） 启动docker容器 http访问wordpress地址初始化安装 安装备份插件和ssl插件（really simple ssl） 上传备份文件并进行恢复操作（不恢复wp-options表） 为nginx反代服务器配置ssl证书，开启https访问 在really simple ssl中为wordpress启用https 恢复wp-options表 手动备份\u0026amp;下载备份文件 备份完之后可以直接从web端下载，但是建议从web端下载一份，通过ssh或者ftp等方式再下载一份，避免备份文件出现问题\n备份的文件在wordpress目录/wp-content/updraft目录中\n通过scp下载到本地\n准备系统环境 安装好docker和docker-compose即可，docker的安装和使用教程在本博客中docker分类有\ndocker-compose一键启动wordpress环境 这里我提供了一键部署的docker-compose文件和各服务进行了优化的配置文件，可以直接拿来用下载链接\n注意：\n使用前建议修改数据库相关信息\n建议不要随意改动ip\n所有的数据文件和配置文件默认都在当前的目录下\n如果前面不加nginx反代，记得把注释掉的端口映射改成自己想要的\n所有的配置文件都在nginx目录下，已经预先定义好，可以自行进行修改\n内置的wordpress目录权限用户和组是 33:tape\nversion: \u0026#39;3.1\u0026#39; services: proxy: image: superng6/nginx:debian-stable-1.18.0 container_name: nginx-proxy restart: always networks: wordpress_net: ipv4_address: 172.19.0.6 ports: - 80:80 - 443:443 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/proxy/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/proxy/default.conf:/etc/nginx/conf.d/default.conf - $PWD/ssl:/etc/nginx/ssl - $PWD/logs/proxy:/var/log/nginx depends_on: - web web: image: superng6/nginx:debian-stable-1.18.0 container_name: wordpress-nginx restart: always networks: wordpress_net: ipv4_address: 172.19.0.5 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/conf/nginx/nginx.conf:/etc/nginx/nginx.conf - $PWD/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf - $PWD/conf/fastcgi.conf:/etc/nginx/fastcgi.conf - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/wordpress:/var/www/html - $PWD/logs/nginx:/var/log/nginx depends_on: - wordpress wordpress: image: wordpress:5-fpm container_name: wordpress-php restart: always networks: wordpress_net: ipv4_address: 172.19.0.4 environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/wordpress:/var/www/html - /dev/shm/nginx-cache:/var/run/nginx-cache # - $PWD/nginx-cache:/var/run/nginx-cache - $PWD/conf/uploads.ini:/usr/local/etc/php/php.ini depends_on: - redis - db redis: image: redis:5 container_name: wordpress-redis restart: always networks: wordpress_net: ipv4_address: 172.19.0.3 volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/redis-data:/data depends_on: - db db: image: mysql:5.7 container_name: wordpress-mysql restart: always networks: wordpress_net: ipv4_address: 172.19.0.2 environment: MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress MYSQL_RANDOM_ROOT_PASSWORD: \u0026#39;1\u0026#39; volumes: - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro - $PWD/mysql-data:/var/lib/mysql - $PWD/conf/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf networks: wordpress_net: driver: bridge ipam: config: - subnet: 172.19.0.0/16 进入到 wordpress-blog 目录下使用 docker-compose up -d启动docker容器\n配置nginx反向代理 配置80和443端口的反代\n把域名、证书路径以及后端服务器等信息换成自己的\n免费ssl证书的申请我在 阿里云wordpress配置免费ssl证书 中介绍过，直接下载nginx版的证书放到wordpress-blog/ssl/目录下即可\n[root@lvbibir ~]# vim wordpress-blog/conf/proxy/default.conf server { listen 80; listen [::]:80; server_name lvbibir.cn; # return 301 https://$host$request_uri; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Real-Port $remote_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; } } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name lvbibir.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/lvbibir.cn.pem; ssl_certificate_key /etc/nginx/ssl/lvbibir.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@lvbibir ~]# docker exec -i nginx-proxy nginx -s reload 安装wordpress 现在已经可以通过http访问nginx反代的80端口访问wordpress了\n安装信息跟之前站点设置一样即可\n恢复备份 安装好之后启用插件，把备份文件上传到备份目录\n记得修改权限\n[root@lvbibir ~]# chown -R 33:tape wordpress-blog/wordpress/wp-content/ 恢复备份\n注：如果站点之前开启了https，在这步不要恢复wp-options表，不然会导致后台访问不了\n点击恢复即可\n配置ssl 启用 really simple ssl 插件，因为之前在nginx反代配置了ssl证书，虽然我们没有通过https访问，但是这个插件已经检测到了证书，可以一键为wordpress配置ssl\n这里我们已经可以通过https访问我们的wordpress了\n站点路径该插件也会自动修改，之前不恢复wp-options表的原因就在这，在我们没有配置好ssl之前，直接覆盖wordpress的各项设置会导致站点访问不了，重定向循环等各种各样的问题。\n恢复 wp-options 表 开启了ssl之后，通过备份插件再恢复一次，可以只恢复一张wp-options表，也可以再全量恢复下数据库，至此，站点迁移工作基本完成了。\n后续优化 开启https强制跳转 开启https强制跳转后，所有使用http访问我们站点的请求都会转到https，提高站点安全性\n[root@lvbibir ~]# vim /etc/nginx/nginx.conf server { listen 80; listen [::]:80; server_name lvbibir.cn; return 301 https://$host$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name lvbibir.cn; location / { proxy_pass http://172.19.0.5:80; proxy_redirect off; # 保证获取到真实IP proxy_set_header X-Real-IP $remote_addr; # 真实端口号 proxy_set_header X-Real-Port $remote_port; # X-Forwarded-For 是一个 HTTP 扩展头部。 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 在多级代理的情况下，记录每次代理之前的客户端真实ip proxy_set_header HTTP_X_FORWARDED_FOR $remote_addr; # 获取到真实协议 proxy_set_header X-Forwarded-Proto $scheme; # 真实主机名 proxy_set_header Host $host; # 设置变量 proxy_set_header X-NginX-Proxy true; # 开启 brotli proxy_set_header Accept-Encoding \u0026#34;gzip\u0026#34;; } # 日志 access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; # 证书 ssl_certificate /etc/nginx/ssl/lvbibir.cn.pem; ssl_certificate_key /etc/nginx/ssl/lvbibir.cn.key; # curl https://ssl-config.mozilla.org/ffdhe2048.txt \u0026gt; /path/to/dhparam # ssl_dhparam /etc/nginx/ssl/dhparam; # HSTS (ngx_http_headers_module is required) (63072000 seconds) add_header Strict-Transport-Security \u0026#34;max-age=63072000\u0026#34; always; # OCSP stapling ssl_stapling on; ssl_stapling_verify on; # verify chain of trust of OCSP response using Root CA and Intermediate certs # ssl_trusted_certificate /etc/nginx/ssl/all.sleele.com/fullchain.cer; # replace with the IP address of your resolver resolver 223.5.5.5; resolver_timeout 5s; } [root@lvbibir ~]# docker exec -i nginx-proxy nginx -s reload 开启redis缓存 wordpress搭配redis加速网站访问速度\n搭配jsdelivr-CDN实现全站cdn WordPress+jsDelivr开启伪全站CDN\n参考 从能用到好用-快速搭建高性能WordPress指南\n","permalink":"https://www.lvbibir.cn/posts/blog/wordpress-to-docker/","summary":"前言 前段时间着手开始搭建自己的wordpress博客，刚开始图方便直接买了阿里云的轻量应用服务器，它是一套预先搭建好的lamp架构，并已经做了一些初始化配置，直接访问ip就可以进行wordpress的安装和配置了。 这套wordpress的一个非常好的优点就是可以在阿里云的控制台一","title":"wordpress迁移到docker"},{"content":"1. 实验环境 3台 centos6.5，1台 win10，openvpn-2.4.7，easy-rsa-3.0.5\n2. 拓扑结构 Win10 安装 openvpn-gui，三台 centos6.5 为 vmware虚拟机，分为 client、vpnserver、proxy\n三台 centos6.5 的 eth0 网卡均为内网(lan区段)地址 1.1.1.0/24 网段，proxy 额外添加一块 eth1 网卡设置 nat 模式模拟外网 ip\n3. 实验目的 win10访问proxy的外网ip对应端口连接到vpnserver，分配到内网ip后可以访问到client\n4. 实验思路 proxy配置ipv4转发，将访问到本机eth1网卡相对应的端口上的流量转发给vpnserver的vpn服务端口\nvpnserver为win10分配ip实现访问内网\n5. 实施步骤 5.1 初始化环境 虚拟机安装过程 略\n配置ip 节点 ip client： 1.1.1.1/24 vpnserver： 1.1.1.2/24 proxy： 1.1.1.3/24 192.168.150.114/24 win10： 192.168.150.1/24 环境初始化（client和vpnserver关闭iptables和selinux，proxy仅关闭selinux） [root@vpnserver ~]# sed -i \u0026lsquo;/SELINUX/s/enforcing/disabled/\u0026rsquo; /etc/selinux/config [root@vpnserver ~]# setenforce 0\n5.2 安装vpnserver及easy-rsa vpnserver安装openvpn 由于centos6的所有官方源已失效，使用https://www.xiaofeng.org/article/2019/10/centos6buildinstallopenvpnrpm-17.html中的方法将源码编译成rpm包。\nopenvpn版本：2.4.7\n下载easy-rsa 下载地址：https://github.com/OpenVPN/easy-rsa/tree/v3.0.5\n5.3 创建openvpn目录，配置vars变量 解压easy-rsa目录 [root@vpnserver ~]# mkdir openvpn [root@vpnserver ~]# unzip easy-rsa-3.0.5.zip [root@vpnserver ~]# mv easy-rsa-3.0.5 easy-rsa [root@vpnserver ~]# mkdir -p /etc/openvpn [root@vpnserver ~]# cp -a easy-rsa /etc/openvpn\n配置/etc/openvpn目录 [root@vpnserver ~]# cd /etc/openvpn/easy-rsa/easyrsa3/ [root@vpnserver easyrsa3]# cp vars.example vars [root@vpnserver easyrsa3]# vim vars 添加如下变量\nset_var EASYRSA_REQ_COUNTRY \u0026#34;CN\u0026#34; set_var EASYRSA_REQ_PROVINCE \u0026#34;Beijing\u0026#34; set_var EASYRSA_REQ_CITY \u0026#34;Beijing\u0026#34; set_var EASYRSA_REQ_ORG \u0026#34;lvbibir\u0026#34; set_var EASYRSA_REQ_EMAIL \u0026#34;lvbibir@163.com\u0026#34; set_var EASYRSA_REQ_OU \u0026#34;My OpenVPN\u0026#34; 5.4 创建服务端证书及key 创建服务端证书及key 初始化\n[root@vpnserver ~]# cd /etc/openvpn/easy-rsa/easyrsa3/ [root@vpnserver easyrsa3]# ./easyrsa init-pki\n创建根证书\n[root@vpnserver easyrsa3]# ./easyrsa build-ca\n注意：在上述部分需要输入PEM密码 PEM pass phrase，输入两次，此密码必须记住，不然以后不能为证书签名。还需要输入common name 通用名，这个你自己随便设置个独一无二的\n创建服务器端证书\n[root@vpnserver easyrsa3]# ./easyrsa gen-req server nopass\n该过程中需要输入common name，随意但是不要跟之前的根证书的一样\n签约服务端证书\n[root@vpnserver easyrsa3]# ./easyrsa sign server server\n需要手动输入yes去人，还需要提供创建ca证书时的密码\n创建Diffie-Hellman，确保key穿越不安全网络的命令\n[root@vpnserver easyrsa3]# ./easyrsa gen-dh\n5.5 创建客户端证书及key 创建客户端证书 初始化\n[root@vpnserver ~]# mkdir client [root@vpnserver ~]# cd client/easy-rsa/easyrsa3/ [root@vpnserver easyrsa3]# ./easyrsa init-pki\n需输入yes确认\n创建客户端key及生成证书\n[root@vpnserver easyrsa3]# ./easyrsa gen-req zhijie.liu\n名字自己自定义，该密码是用户使用该key登录时输入的密码，可以加nopass参数在客户端登录时无需输入密码\n导入req证书\n[root@vpnserver ~]# cd /etc/openvpn/easy-rsa/easyrsa3/ [root@vpnserver easyrsa3]# ./easyrsa import-req /root/client/easy-rsa/easyrsa3/pki/reqs/zhijie.liu.req zhijie.liu\n签约证书\n[root@vpnserver easyrsa3]# ./easyrsa sign client zhijie.liu\n这里生成client，名字要与之前导入名字一致\n签约证书期间需要输入yes确认，期间需要输入CA的密码\n5.6 归置服务器和客户端的证书 把服务器端必要文件放到/etc/openvpn下（ca证书、服务端证书、密钥） [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/ca.crt /etc/openvpn/ [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/private/server.key /etc/openvpn/ [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/issued/server.crt /etc/openvpn/ [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/dh.pem /etc/openvpn/\n把客户端必要文件放到/root/client目录下（客户端的证书、密钥） [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/ca.crt /root/client [root@vpnserver ~]# cp /etc/openvpn/easy-rsa/easyrsa3/pki/issued/zhijie.liu.crt /root/client/ [root@vpnserver ~]# cp /root/client/easy-rsa/easyrsa3/pki/private/zhijie.liu.key /root/client\n5.7 vpn服务端server.conf配置文件修改 为服务器端编写配置文件 安装好配置文件后他会提供一个server配置的文件案例，将该文件放到/etc/openvpn下\n[root@vpnserver ~]# rpm -ql openvpn | grep server.conf\n[root@vpnserver ~]# cp /usr/share/doc/openvpn-2.4.7/sample/sample-config-files/server.conf /etc/openvpn/\n修改配置文件 [root@vpnserver ~]# vim /etc/openvpn/server.conf\n[root@vpnserver ~]# grep \u0026#39;^[^#|;]\u0026#39; /etc/openvpn/server.conf local 0.0.0.0 #监听地址 port 1194 #监听端口 proto tcp #监听协议 dev tun #采用路由隧道模式 ca /etc/openvpn/ca.crt #ca证书路径 cert /etc/openvpn/server.crt #服务器证书 key /etc/openvpn/server.key # This file should be kept secret 服务器秘钥 dh /etc/openvpn/dh.pem #密钥交换协议文件 server 10.8.0.0 255.255.255.0 #给客户端分配地址池，注意：不能和VPN服务器内网网段有相同 ifconfig-pool-persist ipp.txt push \u0026#34;route 1.1.1.0 255.255.255.0\u0026#34;\t#推送内网地址 client-to-client #客户端之间互相通信 keepalive 10 120 #存活时间，10秒ping一次,120 如未收到响应则视为断线 comp-lzo #传输数据压缩 max-clients 100 #最多允许 100 客户端连接 user openvpn #用户 group openvpn #用户组 persist-key persist-tun status /var/log/openvpn/openvpn-status.log log /var/log/openvpn/openvpn.log verb 3 5.8 后续设置（用户、iptables和路由转发） 后续设置 [root@vpnserver ~]# mkdir /var/log/openvpn/ [root@vpnserver ~]# useradd openvpn -s /sbin/nologin [root@vpnserver ~]# chown -R openvpn.openvpn /var/log/openvpn/ [root@vpnserver ~]# chown -R openvpn.openvpn /etc/openvpn/*\niptables设置nat规则和打开路由转发 [root@vpnserver ~]# iptables -A INPUT -p tcp \u0026ndash;dport 1194 -j ACCEPT [root@vpnserver ~]# iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE [root@vpnserver ~]# iptables -vnL -t nat\nChain PREROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination 0 0 MASQUERADE all -- * * 10.8.0.0/24 0.0.0.0/0 Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes) pkts bytes target prot opt in out source destination [root@vpnserver ~]# vim /etc/sysctl.conf\nnet.ipv4.ip_forward = 1 [root@vpnserver ~]# sysctl -p\n开启openvpn服务 [root@vpnserver ~]# openvpn \u0026ndash;daemon \u0026ndash;config /etc/openvpn/server.conf [root@vpnserver ~]# netstat -anput | grep 1194\nproxy开启端口转发/映射 [root@along ~]# vim /etc/sysctl.conf //打开路由转发\nnet.ipv4.ip_forward = 1 [root@proxy ~]# sysctl -p\n[root@proxy ~]# iptables -t nat -A PREROUTING -d 192.168.150.114 -p tcp \u0026ndash;dport 1194 -j DNAT \u0026ndash;to-destination 1.1.1.2:1194 [root@proxy ~]# iptables -t nat -A POSTROUTING -d 1.1.1.2 -p tcp \u0026ndash;dport 1194 -j SNAT \u0026ndash;to 1.1.1.3 [root@proxy ~]# iptables -A FORWARD -o eth0 -d 1.1.1.2 -p tcp \u0026ndash;dport 1194 -j ACCEPT [root@proxy ~]# iptables -A FORWARD -i eth0 -s 1.1.1.2 -p tcp \u0026ndash;sport 1194 -j ACCEPT\n[root@proxy ~]# iptables -A INPUT -p tcp \u0026ndash;dport 1194 -j ACCEPT\n[root@proxy ~]# service iptables save [root@proxy ~]# service iptables reload [root@proxy ~]# iptables -L -n\n6.客户段连接测试 下载openvpn客户端 略\n6.1 配置client端配置文件 [root@vpnserver ~]# rpm -ql openvpn | grep client.ovpn\n/usr/share/doc/openvpn-2.4.7/sample/sample-plugins/keying-material-exporter-demo/client.ovpn\n[root@vpnserver ~]# cp /usr/share/doc/openvpn-2.4.7/sample/sample-plugins/keying-material-exporter-demo/client.ovpn /root/client [root@vpnserver ~]# vim /root/client/client.ovpn\nclient dev tun proto tcp remote 192.168.150.114 1194 resolv-retry infinite nobind persist-key persist-tun ca ca.crt cert client.crt key client.key comp-lzo verb 3\n6.2 拷贝客户端证书及配置文件 vpnserver没装vmtools所以先将所有文件放到proxy上然后通过远程工具下载\n[root@vpnserver openvpn]# scp /root/client/ca.crt root@1.1.1.3:/root/ [root@vpnserver openvpn]# scp /root/client/zhijie.liu.crt root@1.1.1.3:/root/ [root@vpnserver openvpn]# scp /root/client/zhijie.liu.key root@1.1.1.3:/root/ [root@vpnserver openvpn]# scp /root/client/client.ovpn root@1.1.1.3:/root/\n将这四个文件放到win10的C:\\Users\\lvbibir\\OpenVPN\\config目录下\n6.3 ping测试 ping client的内网ip1.1.1.1\n参考：\ncentos6源码编译openvpn并打包成rpm\nhttps://www.xiaofeng.org/article/2019/10/centos6buildinstallopenvpnrpm-17.html\nopenvpn源码下载地址\nhttps://openvpn.net/community-downloads/\ncentos6搭建openvpn\nhttp://www.likecs.com/show-6021.html\ncentos6做端口映射/端口转发\nhttps://blog.csdn.net/weixin_30872499/article/details/96654741?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0\u0026spm=1001.2101.3001.4242\n","permalink":"https://www.lvbibir.cn/posts/tech/centos6-deploy-openvpn/","summary":"1. 实验环境 3台 centos6.5，1台 win10，openvpn-2.4.7，easy-rsa-3.0.5 2. 拓扑结构 Win10 安装 openvpn-gui，三台 centos6.5 为 vmware虚拟机，分为 client、vpnserver、proxy 三台 centos6.5 的 eth0 网卡均为内网(lan区段)地址 1.1.1.0/24 网段，proxy","title":"centos6 部署 openvpn"},{"content":"介绍 项目地址\n这个项目准备打造一个安全基线检查平台，期望能够以最简单的方式在需要进行检查的服务器上运行。能够达到这么一种效果：基线检查脚本(以后称之为agent)可以单独在目标服务器上运行，并展示出相应不符合基线的地方，并且可以将检查时搜集到的信息以json串的形式上传到后端处理服务器上，后端服务器可以进行统计并进行可视化展示。\nAgent用到的技术：\nShell脚本 Powershell脚本 后端服务器用到的技术：\npython django bootstrap html 存储所用：\nsqlite3 前端页面部署 环境 系统 centos7.8(最小化安装) 前端：192.168.150.101 client端：192.168.150.102 安装python3.6 源码包下载地址\nyum install gcc gcc-c++ zlib-devel sqlite-devel mariadb-server mariadb-devel openssl-devel tcl-devel tk-devel tree libffi-devel -y tar -xf Python-3.6.10.tgz ./configure --enable-optimizations make make install python3 -V 安装pip3+django 源码包下载地址\ntar zxvf pip-21.0.1.tar.gz cd pip-21.0.1/ python3 setup.py build python3 setup.py install pip3 install django==2.2.15 git clone项目到本地 yum install -y git git clone https://github.com/chroblert/assetmanage.git 部署server端项目 cd assetManage # 使用python3安装依赖包 python3 -m pip install -r requirements.txt python3 manage.py makemigrations python3 manage.py migrate python3 manage.py runserver 0.0.0.0:8888 # 假定该服务器的IP未112.112.112.112 访问测试：http://192.168.150.101:8888/\n客户端进行检查 将项目目录中的Agent目录copy到需要进行基线检查的客户端 scp -r assetmanage/Agent/ 192.168.150.102:/root/ cd Agent/ chmod a+x ./*.sh 修改 linux_baseline_check.sh 文件的最后一行，配置前端django项目的ip和端口 运行脚本即可，终端会有检查结果的输出，前端页面相应也会有数据 ","permalink":"https://www.lvbibir.cn/posts/tech/centos7-deploy-benchmark/","summary":"介绍 项目地址 这个项目准备打造一个安全基线检查平台，期望能够以最简单的方式在需要进行检查的服务器上运行。能够达到这么一种效果：基线检查脚本(以后称之为agent)可以单独在目标服务器上运行，并展示出相应不符合基线的地方，并且可以将检查时搜集到的信息以json串的形式上传到后端处理服","title":"centos7基线检查（benchmark）平台部署"},{"content":" 环境：centos7.8 在centos中可以在如下文件中查看一个NIC的配置 ： /etc/sysconfig/network-scripts/ifcfg-N\nHWADDR=, 其中 以AA:BB:CC:DD:EE:FF形式的以太网设备的硬件地址.在有多个网卡设备的机器上，这个字段是非常有用的，它保证设备接口被分配了正确的设备名 ，而不考虑每个网卡模块被配置的加载顺序.这个字段不能和MACADDR一起使用.\nMACADDR=, 其中 以AA:BB:CC:DD:EE:FF形式的以太网设备的硬件地址.在有多个网卡设备的机器上.这个字段用于给一个接口分配一个MAC地址，覆盖物理分配的MAC地址 . 这个字段不能和HWADDR一起使用.\n简单总结一下：\nMACADDR是系统的网卡物理地址，因为在接收数据包时需要根据这个值来做包过滤。 HWADDR是网卡的硬件物理地址，只有厂家才能修改 可以用MACADDR来覆盖HWADDR，但这两个参数不能同时使用 ifconfig和nmcli等网络命令中显示的物理地址其实是MACADDR的值，虽然显示的名称写的是HWADDR(ether)。 修改网卡的mac地址\n#sudo vim /etc/sysconfig/network-scripts/ifcfg-ens32 注释其中的\u0026#34;HWADDR=xx:xx:xx:xx:xx:xx\u0026#34; 添加或者修改\u0026#34;MACADDR=xx:xx:xx:xx:xx:xx\u0026#34; 如果没有删除或者注释掉HWADDR，当HWADDR与MACADDR地地不同时，启动不了网络服务的提示：　“Bringing up interface eth0: Device eth0 has different MAC address than expected,ignoring.” 故正确的操作是将HWADDR删除或注释掉，改成MACADDR 查看系统初始的mac地址即HWADDR 把配置文件中的MACADDR注释或者删除掉，不用配置HWADDR，重启网络服务后用命令查看到的mac地址就是网卡的HWADDR\n参考 https://blog.csdn.net/rikeyone/article/details/108406865\nhttps://zhidao.baidu.com/question/505133906.html\nhttps://blog.csdn.net/caize340724/article/details/100958968?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.control\u0026spm=1001.2101.3001.4242\n","permalink":"https://www.lvbibir.cn/posts/tech/hwaddr-macaddr-different/","summary":"环境：centos7.8 在centos中可以在如下文件中查看一个NIC的配置 ： /etc/sysconfig/network-scripts/ifcfg-N HWADDR=, 其中 以AA:BB:CC:DD:EE:FF形式的以太网设备的硬件地址.在有多个网卡设备的机器上，这个字段是非常有用的，它保证设备接口被分配了正确的设备名 ，而不考虑每个网卡模块被配置的加载顺序.这个字段","title":"hwaddr和macaddr的区别"},{"content":"七牛云配置 1. 注册七牛云，新建存储空间 七牛云新用户有10G的免费空间，作为个人博客来说基本足够了\n2. 为存储空间配置加速域名 3. 配置https证书 购买免费证书 补全域名信息 域名验证 根据在域名提供商处新建解析\ndns配置好之后等待CA机构审核后颁发证书就可以了\n开启https PicGo配置 下载安装 下载链接：https://github.com/Molunerfinn/PicGo/releases/\n建议下载稳定版\n配置七牛云图床 ak和sk在七牛云→个人中心→密钥管理中查看\n在picgo端配置各项信息，注意网址要改成 https\ntypora测试图片上传 下载地址：https://www.typora.io/\n在文件→偏好设置→图像中配置图片上传，选择安装好的PicGo的应用程序\n点击验证图片上传\n到七牛云存储空间看是否有这两个文件\ntypora可以实现自动的图片上传，并将本地连接自动转换为外链地址\n可能的报错 一般报错原因都可在picgo的日志文件找到，路径：C:\\Users\\username\\AppData\\Roaming\\picgo\nfailed to fetch 日志报错如下\n问题在于端口冲突，如果你打开了多个picgo程序，就会端口冲突，picgo自动帮你把36677端口改为366771端口，导致错误。\n重新验证\n","permalink":"https://www.lvbibir.cn/posts/blog/typora-picgo-qiniu-upload-image/","summary":"七牛云配置 1. 注册七牛云，新建存储空间 七牛云新用户有10G的免费空间，作为个人博客来说基本足够了 2. 为存储空间配置加速域名 3. 配置https证书 购买免费证书 补全域名信息 域名验证 根据在域名提供商处新建解析 dns配置好之后等待CA机构审核后颁发证书就可以了 开启https PicGo配置 下载安","title":"markdown图片存储方案 | typora+picgo+七牛云"},{"content":"现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片url却是可以成功的 我将之前csdn的博客迁移到了wordpress，图片外链地址就是csdn的，都可以正常加载。 使用浏览器直接访问图片url却是可以成功的\n我将之前csdn的博客迁移到了wordpress，图片外链地址就是csdn的，都可以正常加载。\n排查 1、由于浏览器直接访问七牛云图床的url地址是可以访问的，证明地址并没错，有没有可能是referer防盗链的配置问题\n查看防盗链配置，并没有开\n2、wordpress可以加载出来csdn的外链图片，期间也试了其他图床都是没问题的。\n3、看看七牛的图片外链和csdn的有何区别\n注意到七牛的图片外链是http，当时嫌麻烦并没有配置https，看来问题是出在这了\n因为我的网站配置了ssl证书，可能由于安全问题浏览器不予加载http项目，用http访问站点测试下图片是否可以加载\n访问成功了！\n解决 给图床服务器安装ssl证书，开启https访问，参考：typora-picgo-qiniu-upload-image\n","permalink":"https://www.lvbibir.cn/posts/blog/wordpress-load-image-failed/","summary":"现象 博客加载不出来我在七牛云的图片资源 使用浏览器直接访问图片url却是可以成功的 我将之前csdn的博客迁移到了wordpress，图片外链地址就是csdn的，都可以正常加载。 使用浏览器直接访问图片url却是可以成功的 我将之前csdn的博客迁移到了wordpress，图片外链地址就","title":"wordpress加载图片失败"},{"content":"默认主题下在后台设置里修改即可\ndux主题修改方式：在后台管理→dux主题编辑器→网站底部信息中添加\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式\n在主题目录的footer.php 文件中的\u0026lt;footer\u0026gt;\u0026lt;/footer\u0026gt; 下添加代码\n\u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;你的备案号\u0026lt;/a\u0026gt; ","permalink":"https://www.lvbibir.cn/posts/blog/wordpress-add-icp/","summary":"默认主题下在后台设置里修改即可 dux主题修改方式：在后台管理→dux主题编辑器→网站底部信息中添加 \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;external nofollow\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;京ICP备2021023168号-1\u0026lt;/a\u0026gt; 通用修改方式 在主题目录的footer.php 文件中的\u0026lt;fo","title":"wordpress添加icp备案号"},{"content":"配置ssl证书 1、登录阿里云，选择产品中的ssl证书\n如果域名是阿里的他会自动创建dns解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证\n点击审核，等待签发\n签发后根据需求下载所需证书\n我的wordpress是直接买的阿里轻量应用服务器，打开轻量应用服务器的控制台配置域名\n选择刚申请好的ssl证书\n在wordpress后台修改地址\n大功告成\n配置https强制跳转 一般站点需要在httpd.conf中的\u0026lt;VirtualHost *:80\u0026gt; \u0026lt;/VirtualHost\u0026gt;中配置重定向\nwordpress不同，需要在伪静态文件（.htaccess）中配置重定向，无需在httpd.conf中配置\n修改伪静态文件（.htaccess） 伪静态文件一般在网页根目录，是一个隐藏文件\n在#END Wordpress前添加如下重定向代码，记得把域名修改成自己的\nRewriteEngine On RewriteCond %{HTTPS} !on RewriteRule ^(.*)$ https://lvbibir.cn/%{REQUEST_URI} [L,R=301] 图中两段重定向代码略有不同\n第一段代码重定向触发器：当访问的端口不是443时进行重定向重定向规则：重定向到：https://{原域名}/{原url资源} 第二段代码重定向触发器：当访问的协议不是 TLS/SLL（https）时进行重定向重定向规则：重定向到：https://lvbibir.cn/{原url资源} 第一段代码使用端口判断，第二段代码通过访问方式判断，建议使用访问方式判断，这样服务改了端口也可以正常跳转 第一段代码重定向的原先的域名，第二段代码可以把ip地址重定向到指定域名 测试 curl -I http://lvbibir.cn 使用http访问站点的80端口成功通过301跳转到了https\n参考 https://help.aliyun.com/document_detail/98727.html?spm=5176.smartservice_service_chat.0.0.1508709aJMmZwg\nhttps://blog.csdn.net/weixin_39037804/article/details/102801202\n","permalink":"https://www.lvbibir.cn/posts/blog/wordpress-ssl/","summary":"配置ssl证书 1、登录阿里云，选择产品中的ssl证书 如果域名是阿里的他会自动创建dns解析，如果是其他厂商需要按照图片配置，等待几分钟进行验证 点击审核，等待签发 签发后根据需求下载所需证书 我的wordpress是直接买的阿里轻量应用服务器，打开轻量应用服务器的控制台配置域名 选择刚申","title":"wordpress配置免费ssl证书和https强制跳转"},{"content":"Docker Machine简介 Docker Machine 是 Docker 官方编排（Orchestration）项目之一，负责在多种平台上快速安装 Docker环境。 Docker Machine支持在常规Linux操作系统、虚拟化平台、openstack、公有云等不同环境下安装配置dockerhost。 Docker Machine 项目基于 Go 语言实现，目前在 Github 上的维护地址：https://github.com/docker/machine/\nDocker Machine实践 环境准备 三台centos7，两台新系统，一台装有docker ip： machine：192.168.1.101 host1:192.168.1.127 host2:192.168.1.180 保证三台centos7可以连接到外网 下载并安装machine base=https://github.com/docker/machine/releases/download/v0.14.0 \u0026amp;\u0026amp; curl -L $base/docker-machine-$(uname -s)-$(uname -m) \u0026gt;/tmp/docker-machine \u0026amp;\u0026amp; sudo install /tmp/docker-machine /usr/local/bin/docker-machine\t下载并安装doker-machine，路径在/usr/local/bin下\n创建machine machine指的是docker daemon主机，其实就是在host上安装和部署docker。\n创建流程： 安装docker软件包 ssh免密登陆远程主机 复制证书 配置docker daemon 启动docker 创建machine要求免密登录远程主机 ssh-keygen ssh-copy-id 目标ip [root@server5 ~]# ssh-keygen [root@server5 ~]# ssh-copy-id 192.168.1.127 [root@server5 ~]# ssh-copy-id 192.168.1.180 测试：\nssh 192.168.1.127 ssh 192.168.1.180 创建主机（离线安装需要在目标主机提前安装好docker软件包） docker-machine create --driver generic --generic-ip-address=192.168.1.127 host1 参考 docker三剑客之machine\n","permalink":"https://www.lvbibir.cn/posts/tech/docker-machine/","summary":"Docker Machine简介 Docker Machine 是 Docker 官方编排（Orchestration）项目之一，负责在多种平台上快速安装 Docker环境。 Docker Machine支持在常规Linux操作系统、虚拟化平台、openstack、公有云等不同环境下安装配置dockerhost。 Docker Machine 项目基于 Go 语言实现，目前在 Github 上的","title":"docker | 三剑客之machine"},{"content":"docker swarm 概述 https://blog.csdn.net/anumbrella/article/details/80369913\ndocker swarm 使用 环境搭建 准备3台Ubuntu系统主机(即用于搭建集群的3个Docker机器)，每台机器上都需要安装Docker并且可以连接网络，同时要求Docker版本必须是1.12及以上，因为老版本不支持Docker Swarm 集群管理节点Docker机器的IP地址必须固定，集群中所有节点都能够访问该管理节点。 集群节点之间必须使用相应的协议并保证其以下端口可用： 1. 用于集群管理通信的TCP端口2377； 2. TCP 和UDP 端口7946，用于节点间的通信； 3. UDP 端口 4789，用于覆盖网络流量 为了进行本实例演示，此处按照要求安装了3台使用centos7.4系统的机器，这三台机器的主机名称分别为manager1(作为管理节点)，worker1(作为工作节点)，worker2(作为工作节点),其IP地址分别如下：\n主机名 IP地址 manager 192.168.0.101 worker-1 192.168.0.102 worker-2 192.168.0.103 创建 Docker Swarm集群 在 manager 上创建 swarm 集群 [root@node-1 ~]# docker swarm init --advertise-addr 192.168.0.101 使用 docker node ls 查看集群节点信息 [root@manager ~]# docker node ls 向 Docker Swarm集群添加工作节点 在 worker1 和 worker2 中执行米慧玲，加入 swarm 集群 docker swarm join --token SWMTKN-1-2zhqxsklcroivbpjzzntn5snsim79o5z7xzj4hzexk9phsz68q-d0seaxjgxpjebk8fdqt6d6yz5 192.168.0.101:2377 2. 在管理节点上，使用 docker node ls 查看集群节点信息\n[root@manager ~]# docker node ls 向 Docker Swarm集群部署服务 在向 docker swarm 集群中部署服务时，既可以使用 docker hub 上自带的镜像来启动服务，也可以自己通过 dockerfile 的镜像来启动服务，如果使用自己的 dockerfile 构建的镜像来启动服务，那么必须先将镜像推送到 docker hub 中心仓库 这里，我们使用 docker hub 上自带的 alpine 镜像为例来部署集群服务\n[root@manager ~]# docker service create --replicas 1 --name helloworld alpine ping docker.com 查看Docker Swarm 集群中的服务 当服务部署完成后，在管理节点上可以通过 docker service ls 查看当前集群中的服务列表信息 [root@manager ~]# docker service ls 使用 docker service inspect 查看部署的服务具体详情 [root@manager ~]# docker service inspect helloworl 使用 docker service ps 查看指定服务在集群节点上的分配和运行情况 [root@manager ~]# docker service ps helloworld 更改 Docker Swarm 集群服务样本数量 在集群中部署的服务，如果只运行一个副本，就无法体现出集群的优势，并且一旦该机器或副本崩溃，该服务将无法访问，所以通常一个服务会启动多个副本\n[root@manager ~]# docker service scale helloworld=5 更改完成后，就可以谈过 docker service ps 查看这五个服务副本在3个节点上的具体分布和运行情况 [root@manager ~]# docker service ps helloworld 删除服务 对于不需要的服务，我们可以进行删除\n[root@manager ~]# docker service rm helloworld 访问服务 在管理节点上，执行 docker network ls 查看网络列表 [root@manager ~]# docker network ls 在管理节点上，创建 overlay 网络 [root@manager ~]# docker network create -d overlay ov_net 在管理节点上，再次部署服务 [root@manager ~]# docker service create --network ov_net --name my-web --publish 8080:80 --replicas 2 nginx 访问 nginx 服务 参考 docker swarm删除节点（解散集群） 截取已创建好的 swarm 集群的 token\n","permalink":"https://www.lvbibir.cn/posts/tech/docker-swarm/","summary":"docker swarm 概述 https://blog.csdn.net/anumbrella/article/details/80369913 docker swarm 使用 环境搭建 准备3台Ubuntu系统主机(即用于搭建集群的3个Docker机器)，每台机器上都需要安装Docker并且可以连接网络，同时要求Docker版本必须是1.12及以上，因为老版本不支持Docker Swarm 集群管理节点Docker机器的IP地址必须固定，集群中所有","title":"docker | 三剑客之swarm"},{"content":"info 查看docker的各项信息 查看docke的各项操作，包括docker版本、容器数量、镜像数量、仓库地址、镜像存放位置等 容器操作 run 启动容器 docker run ：创建一个新的容器并运行一个命令 语法\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG\u0026hellip;]\nOPTIONS说明：\n-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； -d: 后台运行容器，并返回容器ID； -i: 以交互模式运行容器，通常与 -t 同时使用； -P: 随机端口映射，容器内部端口随机映射到主机的高端口 -p: 指定端口映射，格式为：主机(宿主)端口:容器端口 1. 只指定容器端口（宿主机端口随机映射） docker run -p 80 -it ubuntu /bin/bash 2. 主机端口：容器端口 docker run -p 8080:80 -it ubuntu /bin/bash 3. IP：容器端口 docker run -p 0.0.0.0:80 -it ubuntu /bin/bash 4. IP：端口：容器端口 dokcer run -p 0.0.0.0:8080:80 -it ubuntu /bin/bash -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； --name=\u0026quot;nginx-lb\u0026quot;: 为容器指定一个名称； --dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致； --dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致； -h \u0026quot;mars\u0026quot;: 指定容器的hostname； -e username=\u0026quot;ritchie\u0026quot;: 设置环境变量； -env-file=[]: 从指定文件读入环境变量； --cpuset=\u0026quot;0-2\u0026quot; or --cpuset=\u0026quot;0,1,2\u0026quot;: 绑定容器到指定CPU运行； -m :设置容器使用内存最大值； --net=\u0026quot;bridge\u0026quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型； --link=[]: 添加链接到另一个容器； --expose=[]: 开放一个端口或一组端口； --volume , -v: 绑定一个卷 实例\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\ndocker run --name mynginx -d nginx:latest 使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\ndocker run -P -d nginx:latest 使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。\ndocker run -p 80:80 -v /data:/data -d nginx:latest 绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。\ndocker run -p 127.0.0.1:80:8080/tcp ubuntu bash 使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。\nrunoob@runoob:~$ docker run -it nginx:latest /bin/bash root@b8573233d675:/# ps 查看容器 docker ps : 列出容器 语法\ndocker ps [OPTIONS]\nOPTIONS说明：\n-a: 显示所有的容器，包括未运行的。 -f: 根据条件过滤显示的内容。 --format: 指定返回值的模板文件。 -l: 显示最近创建的容器。 -n: 列出最近创建的n个容器。 --no-trunc: 不截断输出。 -q: 静默模式，只显示容器编号。 -s: 显示总的文件大小。 实例\n列出所有在运行的容器信息。\nrunoob@runoob:~$ docker ps CONTAINER ID IMAGE COMMAND ... PORTS NAMES 09b93464c2f7 nginx:latest \u0026quot;nginx -g 'daemon off\u0026quot; ... 80/tcp, 443/tcp myrunoob 96f7f14e99ab mysql:5.6 \u0026quot;docker-entrypoint.sh\u0026quot; ... 0.0.0.0:3306-\u0026gt;3306/tcp mymysql 列出最近创建的5个容器信息。\nrunoob@runoob:~$ docker ps -n 5 CONTAINER ID IMAGE COMMAND CREATED 09b93464c2f7 nginx:latest \u0026quot;nginx -g 'daemon off\u0026quot; 2 days ago ... b8573233d675 nginx:latest \u0026quot;/bin/bash\u0026quot; 2 days ago ... b1a0703e41e7 nginx:latest \u0026quot;nginx -g 'daemon off\u0026quot; 2 days ago ... f46fb1dec520 5c6e1090e771 \u0026quot;/bin/sh -c 'set -x \\t\u0026quot; 2 days ago ... a63b4a5597de 860c279d2fec \u0026quot;bash\u0026quot; 2 days ago ... 列出所有创建的容器ID。\nrunoob@runoob:~$ docker ps -a -q 09b93464c2f7 b8573233d675 b1a0703e41e7 f46fb1dec520 a63b4a5597de 6a4aa42e947b de7bb36e7968 43a432b73776 664a8ab1a585 ba52eb632bbd inspect 查看详细信息 docker inspect : 获取容器/镜像的元数据。 语法\ndocker inspect [OPTIONS] NAME|ID [NAME|ID\u0026hellip;]\nOPTIONS说明：\n-f :指定返回值的模板文件。 -s :显示总的文件大小。 --type :为指定类型返回JSON。 实例\n获取镜像mysql:5.6的元信息。\nrunoob@runoob:~$ docker inspect mysql:5.6 [ { \u0026quot;Id\u0026quot;: \u0026quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec\u0026quot;, \u0026quot;RepoTags\u0026quot;: [ \u0026quot;mysql:5.6\u0026quot; ], \u0026quot;RepoDigests\u0026quot;: [], \u0026quot;Parent\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Comment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Created\u0026quot;: \u0026quot;2016-05-24T04:01:41.168371815Z\u0026quot;, \u0026quot;Container\u0026quot;: \u0026quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54\u0026quot;, \u0026quot;ContainerConfig\u0026quot;: { \u0026quot;Hostname\u0026quot;: \u0026quot;b0cf605c7757\u0026quot;, \u0026quot;Domainname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;User\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;AttachStdin\u0026quot;: false, \u0026quot;AttachStdout\u0026quot;: false, \u0026quot;AttachStderr\u0026quot;: false, \u0026quot;ExposedPorts\u0026quot;: { \u0026quot;3306/tcp\u0026quot;: {} }, ... 获取所有容器的ip地址\ndocker inspect --format=\u0026#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39; $(docker ps -aq) start/stop/restart 开启/关闭/重启容器 docker start :启动一个或多个已经被停止的容器\ndocker stop :停止一个运行中的容器\ndocker restart :重启容器\n语法\ndocker start [OPTIONS] CONTAINER [CONTAINER\u0026hellip;]\ndocker stop [OPTIONS] CONTAINER [CONTAINER\u0026hellip;]\ndocker restart [OPTIONS] CONTAINER [CONTAINER\u0026hellip;]\n实例\n启动已被停止的容器myrunoob\ndocker start myrunoob 停止运行中的容器myrunoob\ndocker stop myrunoob 重启容器myrunoob\ndocker restart myrunoob rm 删除容器 docker rm ：删除一个或多少容器 语法\ndocker rm [OPTIONS] CONTAINER [CONTAINER\u0026hellip;]\nOPTIONS说明：\n-f :通过SIGKILL信号强制删除一个运行中的容器 -l :移除容器间的网络连接，而非容器本身 -v :-v 删除与容器关联的卷 实例\n强制删除容器db01、db02\ndocker rm -f db01 db02 移除容器nginx01对容器db01的连接，连接名db\ndocker rm -l db 删除容器nginx01,并删除容器挂载的数据卷\ndocker rm -v nginx01 attach 进入一个开启的容器中 docker attach :连接到正在运行中的容器。\n语法\ndocker attach [OPTIONS] CONTAINER\n要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。\n官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上\u0026ndash;sig-proxy=false来确保CTRL-D或CTRL-C不会关闭容器。\n实例\n容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。\nrunoob@runoob:~$ docker attach --sig-proxy=false mynginx 192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] \u0026quot;GET / HTTP/1.1\u0026quot; 304 0 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\u0026quot; \u0026quot;-\u0026quot; logs 查看容器日志 docker logs : 获取容器的日志 语法\ndocker logs [OPTIONS] CONTAINER\nOPTIONS说明：\n-f : 跟踪日志输出。类似 tail 命令的 -f 选项 --since :显示某个开始时间的所有日志 -t : 显示时间戳 --tail :仅列出最新N条容器日志 实例\n跟踪查看容器mynginx的日志输出。\nrunoob@runoob:~$ docker logs -f mynginx 192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] \u0026quot;GET / HTTP/1.1\u0026quot; 200 612 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\u0026quot; \u0026quot;-\u0026quot; 2016/07/10 16:53:33 [error] 5#5: *1 open() \u0026quot;/usr/share/nginx/html/favicon.ico\u0026quot; failed (2: No such file or directory), client: 192.168.239.1, server: localhost, request: \u0026quot;GET /favicon.ico HTTP/1.1\u0026quot;, host: \u0026quot;192.168.239.130\u0026quot;, referrer: \u0026quot;http://192.168.239.130/\u0026quot; 192.168.239.1 - - [10/Jul/2016:16:53:33 +0000] \u0026quot;GET /favicon.ico HTTP/1.1\u0026quot; 404 571 \u0026quot;http://192.168.239.130/\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\u0026quot; \u0026quot;-\u0026quot; 192.168.239.1 - - [10/Jul/2016:16:53:59 +0000] \u0026quot;GET / HTTP/1.1\u0026quot; 304 0 \u0026quot;-\u0026quot; \u0026quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36\u0026quot; \u0026quot;-\u0026quot; ... 查看容器mynginx从2016年7月1日后的最新10条日志。\ndocker logs --since=\u0026quot;2016-07-01\u0026quot; --tail=10 mynginx top 查看容器内的进程 docker top :查看容器中运行的进程信息，支持 ps 命令参数。 语法\ndocker top [OPTIONS] CONTAINER [ps OPTIONS]\n容器运行时不一定有/bin/bash终端来交互执行top命令，而且容器还不一定有top命令，可以使用docker top来实现查看container中正在运行的进程。 实例\n查看容器mymysql的进程信息。\nrunoob@runoob:~/mysql$ docker top mymysql UID PID PPID C STIME TTY TIME CMD 999 40347 40331 18 00:58 ? 00:00:02 mysqld 查看所有运行容器的进程信息。\nfor i in `docker ps |grep Up|awk '{print $1}'`;do echo \\ \u0026amp;\u0026amp;docker top $i; done exec 在容器中启动新的进程 docker exec ：在运行的容器中执行命令 语法\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG\u0026hellip;]\nOPTIONS说明：\n-d :分离模式: 在后台运行 -i :即使没有附加也保持STDIN 打开 -t :分配一个伪终端 实例\n在容器 mynginx 中以交互模式执行容器内 /root/runoob.sh 脚本:\nrunoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.sh http://www.runoob.com/ 在容器 mynginx 中开启一个交互模式的终端:\nrunoob@runoob:~$ docker exec -i -t mynginx /bin/bash root@b1a0703e41e7:/# 也可以通过 docker ps -a 命令查看已经在运行的容器，然后使用容器 ID 进入容器。\n查看已经在运行的容器 ID：\ndocker ps -a ... 9df70f9a0714 openjdk \u0026quot;/usercode/script.sh…\u0026quot; ... 第一列的 9df70f9a0714 就是容器 ID。\n通过 exec 命令对指定的容器执行 bash:\ndocker exec -it 9df70f9a0714 /bin/bash kill 停止容器 docker kill :杀掉一个运行中的容器。 语法\ndocker kill [OPTIONS] CONTAINER [CONTAINER\u0026hellip;]\nOPTIONS说明：\n-s :向容器发送一个信号 实例\n杀掉运行中的容器mynginx\nrunoob@runoob:~$ docker kill -s KILL mynginx mynginx 镜像操作 images 查看镜像 docker images : 列出本地镜像。 语法\ndocker images [OPTIONS] [REPOSITORY[:TAG]]\nOPTIONS说明：\n-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）； --digests :显示镜像的摘要信息； -f :显示满足条件的镜像； --format :指定返回值的模板文件； --no-trunc :显示完整的镜像信息； -q :只显示镜像ID。 实例\n查看本地镜像列表。\nrunoob@runoob:~$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE mymysql v1 37af1236adef 5 minutes ago 329 MB runoob/ubuntu v4 1c06aa18edee 2 days ago 142.1 MB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 5c6e1090e771 2 days ago 165.9 MB httpd latest ed38aaffef30 11 days ago 195.1 MB alpine latest 4e38e38c8ce0 2 weeks ago 4.799 MB mongo 3.2 282fd552add6 3 weeks ago 336.1 MB redis latest 4465e4bcad80 3 weeks ago 185.7 MB php 5.6-fpm 025041cd3aa5 3 weeks ago 456.3 MB python 3.5 045767ddf24a 3 weeks ago 684.1 MB ... 列出本地镜像中REPOSITORY为ubuntu的镜像列表。\nroot@runoob:~# docker images ubuntu REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu 14.04 90d5884b1ee0 9 weeks ago 188 MB ubuntu 15.10 4e3b13c8a266 3 months ago 136.3 MB inspect 查看详细信息 docker inspect : 获取容器/镜像的元数据。 语法\ndocker inspect [OPTIONS] NAME|ID [NAME|ID\u0026hellip;]\nOPTIONS说明：\n-f :指定返回值的模板文件。 -s :显示总的文件大小。 --type :为指定类型返回JSON。 实例\n获取镜像mysql:5.6的元信息。\nrunoob@runoob:~$ docker inspect mysql:5.6 [ { \u0026quot;Id\u0026quot;: \u0026quot;sha256:2c0964ec182ae9a045f866bbc2553087f6e42bfc16074a74fb820af235f070ec\u0026quot;, \u0026quot;RepoTags\u0026quot;: [ \u0026quot;mysql:5.6\u0026quot; ], \u0026quot;RepoDigests\u0026quot;: [], \u0026quot;Parent\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Comment\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Created\u0026quot;: \u0026quot;2016-05-24T04:01:41.168371815Z\u0026quot;, \u0026quot;Container\u0026quot;: \u0026quot;e0924bc460ff97787f34610115e9363e6363b30b8efa406e28eb495ab199ca54\u0026quot;, \u0026quot;ContainerConfig\u0026quot;: { \u0026quot;Hostname\u0026quot;: \u0026quot;b0cf605c7757\u0026quot;, \u0026quot;Domainname\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;User\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;AttachStdin\u0026quot;: false, \u0026quot;AttachStdout\u0026quot;: false, \u0026quot;AttachStderr\u0026quot;: false, \u0026quot;ExposedPorts\u0026quot;: { \u0026quot;3306/tcp\u0026quot;: {} }, ... rmi 删除镜像 docker rmi : 删除本地一个或多少镜像。 语法\ndocker rmi [OPTIONS] IMAGE [IMAGE\u0026hellip;]\nOPTIONS说明：\n-f :强制删除； --no-prune :不移除该镜像的过程镜像，默认移除； 注：IMAGE可以使用[仓库：标签]的格式，也可以使用镜像ID，可以同时删除多个镜像 1、使用[仓库：标签]的格式：删除一个标签。当一个镜像文件有多个标签时，删除完所有的标签，镜像文件也随之删除 2、使用镜像ID的格式：先将该镜像文件的所有标签删除，再删除镜像文件\n删除所有镜像\ndocker rmi $(docker images -q) 删除某个仓库的所有镜像\ndocker rmi $(docker images -q ubuntu) 实例\n强制删除本地镜像 runoob/ubuntu:v4。\nroot@runoob:~# docker rmi -f runoob/ubuntu:v4 Untagged: runoob/ubuntu:v4 Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072be Deleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73 search 查找镜像 语法\ndocker search [OPTIONS] TERM\nOPTIONS说明：\n--automated :只列出 automated build类型的镜像； --no-trunc :显示完整的镜像描述； -s :列出收藏数不小于指定值的镜像。 实例\n从Docker Hub查找所有镜像名包含java，并且收藏数大于10的镜像\nrunoob@runoob:~$ docker search -s 10 java NAME DESCRIPTION STARS OFFICIAL AUTOMATED java Java is a concurrent, class-based... 1037 [OK] anapsix/alpine-java Oracle Java 8 (and 7) with GLIBC ... 115 [OK] develar/java 46 [OK] isuper/java-oracle This repository contains all java... 38 [OK] lwieske/java-8 Oracle Java 8 Container - Full + ... 27 [OK] nimmis/java-centos This is docker images of CentOS 7... 13 [OK] pull 拉取镜像 docker pull [OPTIONS] NAME[:TAG|@DIGEST]\nOPTIONS说明：\n-a :拉取所有 tagged 镜像 --disable-content-trust :忽略镜像的校验,默认开启 实例\n从Docker Hub下载java最新版镜像。\ndocker pull java 从Docker Hub下载REPOSITORY为java的所有镜像。\ndocker pull -a java push 推送镜像 docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库 语法\ndocker push [OPTIONS] NAME[:TAG]\nOPTIONS说明：\n--disable-content-trust :忽略镜像的校验,默认开启 实例\n上传本地镜像myapache:v1到镜像仓库中。\ndocker push myapache:v1 commit 通过容器构建镜像 docker commit :从容器创建一个新的镜像。 语法\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\nOPTIONS说明：\n-a :提交的镜像作者； -c :使用Dockerfile指令来创建镜像； -m :提交时的说明文字； -p :在commit时，将容器暂停。 实例\n将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。\nrunoob@runoob:~$ docker commit -a \u0026quot;runoob.com\u0026quot; -m \u0026quot;my apache\u0026quot; a404c6c174a2 mymysql:v1 sha256:37af1236adef1544e8886be23010b66577647a40bc02c0885a6600b33ee28057 runoob@runoob:~$ docker images mymysql:v1 REPOSITORY TAG IMAGE ID CREATED SIZE mymysql v1 37af1236adef 15 seconds ago 329 MB build 通过Dockerfile构建镜像 docker build 命令用于使用 Dockerfile 创建镜像。 语法\ndocker build [OPTIONS] PATH | URL | -\nOPTIONS说明：\n--build-arg=[] :设置镜像创建时的变量； --cpu-shares :设置 cpu 使用权重； --cpu-period :限制 CPU CFS周期； --cpu-quota :限制 CPU CFS配额； --cpuset-cpus :指定使用的CPU id； --cpuset-mems :指定使用的内存 id； --disable-content-trust :忽略校验，默认开启； -f :指定要使用的Dockerfile路径； --force-rm :设置镜像过程中删除中间容器； --isolation :使用容器隔离技术； --label=[] :设置镜像使用的元数据； -m :设置内存最大值； --memory-swap :设置Swap的最大值为内存+swap，\u0026quot;-1\u0026quot;表示不限swap； --no-cache :创建镜像的过程不使用缓存； --pull :尝试去更新镜像的新版本； --quiet, -q :安静模式，成功后只输出镜像 ID； --rm :设置镜像成功后删除中间容器； --shm-size :设置/dev/shm的大小，默认值是64M； --ulimit :Ulimit配置。 --tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。 --network: 默认 default。在构建期间设置RUN指令的网络模式 实例\n使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。\ndocker build -t runoob/ubuntu:v1 . 使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。\ndocker build github.com/creack/docker-firefox 也可以通过 -f Dockerfile 文件的位置：\n$ docker build -f /path/to/a/Dockerfile . 在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：\n$ docker build -t test/myapp . Sending build context to Docker daemon 2.048 kB Error response from daemon: Unknown instruction: RUNCMD ","permalink":"https://www.lvbibir.cn/posts/tech/docker-command/","summary":"info 查看docker的各项信息 查看docke的各项操作，包括docker版本、容器数量、镜像数量、仓库地址、镜像存放位置等 容器操作 run 启动容器 docker run ：创建一个新的容器并运行一个命令 语法 docker run [OPTIONS] IMAGE [COMMAND] [ARG\u0026hellip;] OPTIONS说明： -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项； -d: 后台运行容器，并返回容器I","title":"docker | 命令大全"},{"content":"实现跨主机的docker容器之间的通讯：\n使用网桥实现跨主机的连接 docker原生的网络：overlay、macvlan 第三方网络：flaanel、weave、calic 网桥 open vswitch weave macvlan macvlan是Linux操作系统内核提供的网络虚拟化方案之一，更准确的说法是网卡虚拟化方案。它可以为一张物理网卡设置多个mac地址，相当于物理网卡施展了影分身之术，由一个变多个，同时要求物理网卡打开混杂模式。针对每个mac地址，都可以设置IP地址，本来是一块物理网卡连接到交换机，现在是多块虚拟网卡连接到交换机。\n当容器需要直连入物理网络时，可以使用Macvlan。Macvlan本身不创建网络，本质上首先使宿主机物理网卡工作在‘混杂模式’，这样物理网卡的MAC地址将会失效，所有二层网络中的流量物理网卡都能收到。接下来就是在这张物理网卡上创建虚拟网卡，并为虚拟网卡指定MAC地址，实现一卡多用，在物理网络看来，每张虚拟网卡都是一个单独的接口。使用Macvlan有几点需要注意：\n容器直接连接物理网络，由物理网络负责分配IP地址，可能的结果是物理网络IP地址被耗尽，另一个后果是网络性能问题，物理网络中接入的主机变多，广播包占比快速升高而引起的网络性能下降问题。 前边说过了，宿主机上的某张网上需要工作在‘混乱模式’下。 从长远来看bridge网络与overlay网络是更好的选择，原因就是虚拟网络应该与物理网络隔离而不是共享。 优缺点：\n优点是性能非常好 缺点是地址需要手动分配 Macvlan网络有两种模式：bridge模式与802.1q trunk bridge模式。\nbridge模式，Macvlan网络流量直接使用宿主机物理网卡。 802.1q trunk bridge模式，Macvlan网络流量使用Docker动态创建的802.1q子接口，对于路由与过虑，这种模式能够提供更细粒度的控制 环境准备：\n两台centos7 docker版本：18.03 ip：192.168.0.53（node-1） 192.168.0.54（node-2） node-1 node-2 注意：node-1使用的物理网卡是ens33，node-2使用的是ens32 [root@node-1 ~]# ip link show ens33 [root@node-1 ~]# ip link set ens32 promisc on #开启混杂模式，保证多个ip可以通过 [root@node-1 ~]# docker network create -d macvlan --subnet 10.0.0.0/24 --gateway=10.0.0.1 -o parent=ens33 mac_net1 [root@node-1 ~]# docker network ls node-1 docker run -itd --name bbox-1 --ip 10.0.0.11 --network mac_net1 busybox node-2 docker run -itd --name bbox-2 --ip 10.0.0.12 --network mac_net1 busybox node-1 [root@node-1 ~]# docker exec bbox-1 ping 10.0.0.12 [root@node-1 ~]# docker exec bbox-1 ping bbox-2 可以ping通ip，但是无法ping通主机名，因为它没有dns解析 [root@node-1 ~]# brctl show 因为macvlan不依赖于bridge网络，所以查看不到新的桥接网络 [root@node-1 ~]# docker exec bbox-1 ip link 查看到eth0连接到了if2 [root@node-1 ~]# ip link show ens33 可以查看到ens33的编号是2，即bbox-1容器的eth0网卡连接到了ens33物理网卡 [root@node-1 ~]# docker network create -d macvlan -o parent=ens33 mac_net2 Error response from daemon: network dm-b34ee1020a96 is already using parent interface ens33 再创建macvlan网络时发现已经无法再创建，即一块网卡只能添加一个macvlan的地址\n一块网卡绑定多个macvlan地址 [root@node-1 ~]# modinfo 8021q # 查看内核是否支持802.1q封装 [root@node-1 ~]# modprobe 8021q # 如果上条命令执行后没有结果，使用该命令加载该模块 node-1 [root@node-1 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33 BOOTPROTO=manual 修改为不需要ip的manual模式\nnode-2 [root@node-2 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32 BOOTPROTO=manual node-1 添加两块虚拟网卡，注意与实际的ens32网卡的网段区分开 ens32使用的是192.168.0.0/24网段，虚拟网卡使用的是192.168.1.0/24和192.168.2.0/24\n[root@node-1 ~]# cp -p /etc/sysconfig/network-scripts/ifcfg-ens33 /etc/sysconfig/network-scripts/ifcfg-ens33.10 [root@node-1 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33.10 BOOTPROTO=none NAME=ens33.10 DEVICE=ens33.10 ONBOOT=yes IPADDR=192.168.1.10 PREFIX=24 NETWORK=192.168.1.0 VLAN=yes [root@node-1 ~]# cp -p /etc/sysconfig/network-scripts/ifcfg-ens33.10 /etc/sysconfig/network-scripts/ifcfg-ens33.20 [root@node-1 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33.20 BOOTPROTO=none NAME=ens33.20 DEVICE=ens33.20 ONBOOT=yes IPADDR=192.168.2.10 PREFIX=24 NETWORK=192.168.2.0 VLAN=yes [root@node-1 ~]# ifup ens33.10 [root@node-1 ~]# ifup ens33.20 [root@node-1 ~]# scp /etc/sysconfig/network-scripts/ifcfg-ens33.10 192.168.0.54:/etc/sysconfig/network-scripts/ifcfg-ens32.10 [root@node-1 ~]# scp /etc/sysconfig/network-scripts/ifcfg-ens33.20 192.168.0.54:/etc/sysconfig/network-scripts/ifcfg-ens32.20 node-2 [root@node-2 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32.10 BOOTPROTO=none NAME=ens32.10 DEVICE=ens32.10 ONBOOT=yes IPADDR=192.168.1.20 PREFIX=24 NETWORK=192.168.1.0 VLAN=yes [root@node-2 ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32.20 BOOTPROTO=none NAME=ens32.20 DEVICE=ens32.20 ONBOOT=yes IPADDR=192.168.2.20 PREFIX=24 NETWORK=192.168.2.0 VLAN=yes [root@node-2 ~]# ifup ens32.10 [root@node-2 ~]# ifup ens32.20 node-1 [root@node-1 ~]# docker network create -d macvlan --subnet 172.16.11.0/24 --gateway 172.16.11.1 -o parent=ens33.10 mac_net11 [root@node-1 ~]# docker network create -d macvlan --subnet 172.16.12.0/24 --gateway 172.16.12.1 -o parent=ens33.20 mac_net12 node-2 [root@node-2 ~]# docker network create -d macvlan --subnet 172.16.11.0/24 --gateway 172.16.11.1 -o parent=ens32.10 mac_net11 [root@node-2 ~]# docker network create -d macvlan --subnet 172.16.12.0/24 --gateway 172.16.12.1 -o parent=ens32.20 mac_net12 node-1 [root@node-2 ~]# docker run -itd --name bbox-11 --ip=172.16.11.11 --network mac_net11 busybox [root@node-2 ~]# docker run -itd --name bbox-12 --ip=172.16.12.11 --network mac_net12 busybox node-2 [root@node-2 ~]# docker run -itd --name bbox-21 --ip=172.16.11.12 --network mac_net11 busybox [root@node-2 ~]# docker run -itd --name bbox-22 --ip=172.16.12.12 --network mac_net12 busybox node-1 [root@node-1 ~]# docker exec bbox-11 ping 172.16.11.12 PING 172.16.11.12 (172.16.11.12): 56 data bytes 64 bytes from 172.16.11.12: seq=0 ttl=64 time=0.867 ms 64 bytes from 172.16.11.12: seq=1 ttl=64 time=1.074 ms 64 bytes from 172.16.11.12: seq=2 ttl=64 time=1.145 ms 64 bytes from 172.16.11.12: seq=3 ttl=64 time=0.938 ms ^C [root@node-1 ~]# docker exec bbox-12 ping 172.16.12.12 PING 172.16.12.12 (172.16.12.12): 56 data bytes 64 bytes from 172.16.12.12: seq=0 ttl=64 time=0.858 ms 64 bytes from 172.16.12.12: seq=1 ttl=64 time=1.140 ms 64 bytes from 172.16.12.12: seq=2 ttl=64 time=0.818 ms 64 bytes from 172.16.12.12: seq=3 ttl=64 time=1.056 ms ^C 在两台系统进行修改，添加网关，修改防火墙策略\nnode-1中记得将ens32更换为ens33\nifconfig ens32.10 172.16.10.1 netmask 255.255.255.0 ifconfig ens32.20 172.16.20.1 netmask 255.255.255.0 iptables -t nat -A POSTROUTING -o ens32.10 -j MASQUERADE iptables -t nat -A POSTROUTING -o ens32 -j MASQUERADE iptables -A FORWARD -i ens32.10 -o ens32 -m state --state RELATE,ESTABLISHED -j ACCEPT iptables -A FORWARD -i ens32 -o ens32.10 -m state --state RELATE,ESTABLISHED -j ACCEPT iptables -A FORWARD -i ens32.10 -o ens32 -j ACCEPT iptables -A FORWARD -i ens32 -o ens32.10 -j ACCEPT overlay 一、跨主机网络概述 二、准备overlay环境 为支持容器的跨主机通信，Docker提供了overlay driver。Docker overlay网络需要一个key-value数据库用于保存网络状态信息，包括Network、Endpoint、IP等。Consul、Etcd和ZooKeeper都是Docker支持的key-value软件，这里我们使用Consul\n1. 环境描述\n节点 系统版本 docker版本 角色 IP地址 node-1 centos7.4 docker-18.03.0 consul 192.168.0.101 node-2 centos7.4 docker-18.03.0 host 192.168.0.102 node-3 centos7.4 docker-18.03.0 host 192.168.0.103 2. 创建consul\nnode-1; [root@node-1 ~]# docker run -d -p 8500:8500 -h consul --name consul progrium/consul -server -bootstrap 容器启动后可以通过192.168.0.101:8500访问到consul 3. 修改docker配置文件 修改node-2和node-3的docker daemon的配置文件/etc/systemd/system/docker.service\n[root@node-2 ~]# vim /etc/systemd/system/docker.service ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --cluster-store=consul://192.168.0.101:8500 --cluster-advertise=ens32:2376 [root@node-2 ~]# systemctl daemon-reload [root@node-2 ~]# systemctl restart docker -H ：tcp：允许tcp连接daemon -H：unix：默认的socket连接方式，支持远程的同时，本地也可以连接 \u0026ndash;cluster-store 指定consul的地址 \u0026ndash;cluster-advertise 告知consul自己的连接地址 node-2和node-3会自动注册到consul数据库中。 三、创建overlay网络 1、在node-2中创建网络 在node-2中创建overlay网络ov_net1\n[root@node-2 ~]# docker network create -d overlay ov_net1 -d overlay：指定driver为overlay [root@node-2 ~]# docker network ls 2、node-3查看创建的网络 注意到ov_net1的 SCOPE 为 global，而其他网络为 local 。在node-3上查看存在的网络:\n[root@node-3 ~]# docker network ls node-3上也能看到ov_net1，只是因为创建ov_net1时将overlay网络信息存入了consul，node-3从consul读取到了新网络数据。之后ov_net1的任何变化都会同步到node-2和node-3. 3、查看ov_net1详细信息\n[root@node-2 ~]# docker network inspect ov_net1 IPAM 是指 IP Address Management，docker自动为 ov_net1 分配的 IP 空间为 10.0.0.0/24 四、在overlay中运行容器 1、创建容器 bbox-1 在 node-2 上运行一个 busybox 容器并连接到 ov_net1.\n[root@node-2 ~]# docker run -itd --name bbox-1 --network ov_net1 busybox 2、查看 bbox-1 网络配置\n[root@node-2 ~]# docker exec bbox-1 ip r default via 172.18.0.1 dev eth1 10.0.0.0/24 dev eth0 scope link src 10.0.0.2 172.18.0.0/16 dev eth1 scope link src 172.18.0.2 bbox-1 有两个网络接口，eth0 和 eth1 eth0 IP 为 10.0.0.2，连接的是overlay网络 ov_net1 eth1 IP 为 172.18.0.2 容器的默认路由是走 eth1，其实，docker 会创建一个 bridge 网络 “docker_gwbridge”，为所有连接到 overlay 网络的容器提供访问外网的能力 [root@node-2 ~]# docker network ls [root@node-2 ~]# docker network inspect docker_gwbridge 从 docker network inspect docker_gwbridge 输出可确认 docker_gwbridge 的 IP 地址范围是 172.18.0.0/16，当前连接的容器就是 bbox-1（172.18.0.2） 而且此网络的网关就是网桥 docker_gwbridge 的 IP 172.18.0.1\n[root@node-2 ~]# ifconfig docker_gwbridge docker_gwbridge: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 172.18.0.1 netmask 255.255.0.0 broadcast 172.18.255.255 inet6 fe80::42:c5ff:fe45:937 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether 02:42:c5:45:09:37 txqueuelen 0 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 这样容器 bbox-1 就可以通过docker_gwbridge 访问外网\n[root@node-2 ~]# docker exec bbox-1 ping -c 4 www.baidu.com PING www.baidu.com (182.61.200.6): 56 data bytes 64 bytes from 182.61.200.6: seq=0 ttl=53 time=6.721 ms 64 bytes from 182.61.200.6: seq=1 ttl=53 time=7.954 ms 64 bytes from 182.61.200.6: seq=2 ttl=53 time=11.723 ms 64 bytes from 182.61.200.6: seq=3 ttl=53 time=15.105 ms --- www.baidu.com ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 6.721/10.375/15.105 ms 五、overlay网络连通性 1、node-3 中 运行 bbox-2\n[root@node-3 ~]# docker run -itd --name bbox-2 --network ov_net1 busybox 2、查看 bbox-2 路由情况\n[root@node-3 ~]# docker exec bbox-2 ip r default via 172.18.0.1 dev eth1 10.0.0.0/24 dev eth0 scope link src 10.0.0.3 172.18.0.0/16 dev eth1 scope link src 172.18.0.2 3、互通测试\n[root@node-3 ~]# docker exec bbox-2 ping -c 4 10.0.0.2 PING 10.0.0.2 (10.0.0.2): 56 data bytes 64 bytes from 10.0.0.2: seq=0 ttl=64 time=2.628 ms 64 bytes from 10.0.0.2: seq=1 ttl=64 time=1.004 ms 64 bytes from 10.0.0.2: seq=2 ttl=64 time=1.277 ms 64 bytes from 10.0.0.2: seq=3 ttl=64 time=1.505 ms --- 10.0.0.2 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 1.004/1.603/2.628 ms 可见 overlay 网络中的容器可以直接通信，同时docker也实现了DNS服务 4、实现原理 docker 会为每个 overlay 网络创建一个独立的 network namespace，其中会有一个 linux bridge br0， veth pair 一端连接到容器中（即 eth0），另一端连接到 namespace 的 br0 上。 br0 除了连接所有的 veth pair，还会连接一个 vxlan 设备，用于与其他 host 建立 vxlan tunnel。容器之间的数据就是通过这个 tunnel 通信的。逻辑网络拓扑结构如图所示： [root@node-2 ~]# brctl show bridge name bridge id STP enabled interfaces docker0 8000.024217edc413 no docker_gwbridge 8000.0242c5450937 no vethc59120e virbr0 8000.525400b76fd4 yes virbr0-nic [root@node-3 ~]# brctl show bridge name bridge id STP enabled interfaces docker0 8000.0242ef3c7df7 no docker_gwbridge 8000.0242c81afaee no vethf4562a9 virbr0 8000.525400c28478 yes virbr0-nic 要查看 overlay 网络的 namespace 可以在 node-2 和 node-3 上执行 ip netns（请确保在此之前执行过 ln -s /var/run/docker/netns /var/run/netns），可以看到两个 node 上有一个相同的 namespace \u0026ldquo;1-dd91de7599\u0026rdquo;\n[root@node-2 ~]# ln -s /var/run/docker/netns /var/run/netns [root@node-2 ~]# ip netns 6889f61efc4b (id: 1) 1-dd91de7599 (id: 0) [root@node-3 ~]# ln -s /var/run/docker/netns /var/run/netns [root@node-3 ~]# ip netns 8e4722847745 (id: 1) 1-dd91de7599 (id: 0) \u0026ldquo;1-dd91de7599\u0026rdquo; 这就是 ov_net1 的 namespace，查看 namespace 中的 br0 上的设备\n[root@node-2 ~]# ip netns exec 1-dd91de7599 brctl show bridge name bridge id STP enabled interfaces br0 8000.0e7576c7c035 no veth0 vxlan0 六、overlay网络隔离 不同的 overlay 网络是相互隔离的。我们创建第二个 overlay 网络 ov_net2 并运行容器 bbox-3 1、创建网络 ov_net2\n[root@node-2 ~]# docker network create -d overlay ov_net2 2、启动容器 bbox-3\n[root@node-2 ~]# docker run -itd --name bbox-3 --network ov_net2 busybox 3、查看 bbox-3 网络 bbox-3 分配到的 IP 是 10.0.1.2，尝试 ping bbox-1（10.0.0.2）\n[root@node-2 ~]# docker exec -it bbox-3 ip r default via 172.18.0.1 dev eth1 10.0.1.0/24 dev eth0 scope link src 10.0.1.2 172.18.0.0/16 dev eth1 scope link src 172.18.0.3 [root@node-2 ~]# docker exec -it bbox-3 ping -c 4 10.0.0.2 PING 10.0.0.2 (10.0.0.2): 56 data bytes --- 10.0.0.2 ping statistics --- 4 packets transmitted, 0 packets received, 100% packet loss [root@node-2 ~]# docker exec -it bbox-3 ping -c 4 172.18.0.2 PING 172.18.0.2 (172.18.0.2): 56 data bytes --- 172.18.0.2 ping statistics --- 4 packets transmitted, 0 packets received, 100% packet loss ping 失败，可见不同 overlay 网络之间是隔离的，即使通过 docker_gwbridge 也不能通信 如果要实现 bbox-3 和 bbox-1 通信，可以将 bbox-3 也连接到 ov_net1 这时 bbox-3 同时连接到了 ov_net1 和 ov_net2 上\n[root@node-2 ~]# docker network connect ov_net1 bbox-3 [root@node-2 ~]# docker exec bbox-3 ip r default via 172.18.0.1 dev eth1 10.0.0.0/24 dev eth2 scope link src 10.0.0.4 10.0.1.0/24 dev eth0 scope link src 10.0.1.2 172.18.0.0/16 dev eth1 scope link src 172.18.0.3 [root@node-2 ~]# docker exec bbox-3 ping -c 4 10.0.0.2 PING 10.0.0.2 (10.0.0.2): 56 data bytes 64 bytes from 10.0.0.2: seq=0 ttl=64 time=0.184 ms 64 bytes from 10.0.0.2: seq=1 ttl=64 time=0.158 ms 64 bytes from 10.0.0.2: seq=2 ttl=64 time=0.162 ms 64 bytes from 10.0.0.2: seq=3 ttl=64 time=0.093 ms --- 10.0.0.2 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.093/0.149/0.184 ms docker 默认为 overlay 网络分配 24 位掩码的子网（10.0.X.0/24），所有主机共享这个 subnet，容器启动时会顺序从此空间分配 IP。当然我们也可以通过 \u0026ndash;subnet 指定 IP 空间。\ndocker network create -d overlay --subnet 10.22.1.0/24 ov_net ","permalink":"https://www.lvbibir.cn/posts/tech/docker-rong-qi-kua-zhu-ji-lian-jie/","summary":"实现跨主机的docker容器之间的通讯： 使用网桥实现跨主机的连接 docker原生的网络：overlay、macvlan 第三方网络：flaanel、weave、calic 网桥 open vswitch weave macvlan macvlan是Linux操作系统内核提供的网络虚拟化方案之一，更准确的说法是网卡虚拟化方案。它可以","title":"docker | 容器的跨主机连接"},{"content":"什么是数据卷 docker的理念之一就是将应用与其运行的环境打包。通常docker容器的生命周期都是与在容器中运行的程序相一致的，我们对于数据的要求就是持久化；另一方面docker容器之间也需要一个共享文件的渠道。\n数据卷是经过特殊设计的目录，可以绕过联合文件系统（UFS），为一个或者过个容器提供服务 数据卷设计的目的，在于数据的持久化，他完全独立于容器的生存周期，因此，docker不会在容器删除时删除其挂载的数据卷，也不会存在类似的垃圾收集机制，对容器引用的数据卷进行处理 从图片中：\n数据卷独立于docker容器存在，它存在于docker的宿主机中 数据卷可以是目录，也可以是文件 docker容器可以利用数据卷与宿主机共享文件 同一个数据卷可以支持多个容器的访问 数据卷的特点 数据卷在容器启动时初始化，如果容器使用的镜像在挂载点包含了数据，这些数据会拷贝到新初始化的数据卷中 数据卷可以在容器之间共享和重用 可以对数据卷里的内容直接进行修改 数据卷的变化不会影响镜像的更新 数据卷会一直存在，即使挂载数据卷的容器已经被删除 数据卷操作 为容器添加数据卷 docker run -it -v HOST_DIRECTORY:CONTAINER_DIRETORY IMAGE [COMMADN] HOST-DIRECTORY：指定主机目录，不存在时即创建 CONTAINER：指定容器目录，不存在时即创建 示例：\n[root@localhost ~]# docker run -it -v /docker/data_volume:/data_volume busybox /bin/sh / # touch /data_volume/test\t#创建测试文件 / # echo \u0026#34;lvbibir\u0026#34; \u0026gt; /data_volume/test / # cat /data_volume/test lvbibir [root@localhost ~]# cat /docker/data_volume/test\t#验证测试文件 lvbibir [root@localhost ~]# docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES be3fad8d789e busybox \u0026#34;/bin/sh\u0026#34; 6 minutes ago Up 6 minutes elastic_boyd [root@localhost ~]# docker inspect elastic_boyd 为数据卷添加访问权限 docker run -it -v HOST_DIRECTORY:CONTAINER_DIRETORY:r/w IMAGE [COMMADN] 权限可以设置为：\nro：only-read，只读 wo：only-write，只写 rw：write and read，读写 示例：\n[root@localhost ~]# docker run -itd -v /docker/data_volume:/data_volume:ro busybox /bin/sh 3ee3a2b7a97c0a10125d46ee1135bf59af1d97932572d49fdd5c0bb64bf775a5 [root@localhost ~]# docker ps -l CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3ee3a2b7a97c busybox \u0026#34;/bin/sh\u0026#34; 4 seconds ago Up 3 seconds confident_hopper [root@localhost ~]# docker inspect confident_hopper 使用dockerfile构建包含数据卷的镜像 dockerfile指令： VOLUME [\u0026ldquo;HOST_DIRECTORY\u0026rdquo;]\ndockerfile中配置数据卷无法指定映射到本地的目录 构建好镜像启动容器时，数据卷会进行初始化，docker会在/var/lib/docker/volumes/下为数据卷创建新的随机名字的目录（不同版本该目录位置可能不同，具体以inspect查看到的为准） 使用同一个镜像构建的多个容器，映射的本地目录也不一样 通过数据卷容器来进行容器间的数据共享 示例：\n[root@localhost ~]# cat Dockerfile #For test data_volume FROM busybox:latest VOLUME [\u0026#34;/data_volume1\u0026#34;,\u0026#34;/data_volume2\u0026#34;] CMD /bin/sh [root@localhost ~]# docker build -t test/data_volume . [root@localhost ~]# docker run -itd --name test_data_volume_1 test/data_volume /bin/sh ee8347a4bd3590e8cb65a28e1ebfc5d01e44f2ce70d33a2fa9bbc19782e34f21 [root@localhost ~]# docker exec test_data_volume_1 ls -l / | grep data_volume drwxr-xr-x 2 root root 6 Aug 14 15:20 data_volume1 drwxr-xr-x 2 root root 6 Aug 14 15:20 data_volume2 [root@localhost ~]# docker inspect test_data_volume_1 [root@localhost ~]# docker run -itd --name test_data_volume_2 test/data_volume /bin/sh b4f654706ea15e657cd61bb92d16fa6c6b8eb9129a68b1c9209ea21967175b24 [root@localhost ~]# docker exec test_data_volume_2 ls -l / | grep data_volume drwxr-xr-x 2 root root 6 Aug 14 15:24 data_volume1 drwxr-xr-x 2 root root 6 Aug 14 15:24 data_volume2 [root@localhost ~]# docker inspect test_data_volume_2 数据卷容器 一个命名的容器挂载了数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷容器 使用数据卷容器而不是用数据卷直接挂载，可以不暴露宿主机的实际目录 删除数据卷容器对于已经挂载了该容器的容器没有影响，因为数据卷容器只是传递了挂载信息，任何对于目录的更改都不需要通过数据卷容器 从图片中：\n数据卷容器挂载了一个本地目录，其他容器通过连接这个数据卷容器来实现数据的共享 数据卷容器操作 挂载数据卷容器 docker run -it --volumes-from [CONTAINER] IMAGE [COMMAND] CONTAINER必须是已经挂载了卷组的容器，dockerfile和-v两个方式都可以 CONTAINER可以未运行，但必须存在 示例： 创建数据卷容器\n[root@localhost ~]# cat Dockerfile #For test data_volume FROM busybox:latest VOLUME [\u0026#34;/data_volume1\u0026#34;,\u0026#34;/data_volume2\u0026#34;] CMD /bin/sh [root@localhost ~]# docker build -t test/data_volume . [root@localhost ~]# docker run -it --name data_volume_container test/data_volume /bin/sh / # touch /data_volume1/test1 / # touch /data_volume2/test2 / # exit 创建一个容器，挂载数据卷容器进行验证\n[root@localhost ~]# docker run -itd --name test_dvc_1 --volumes-from data_volume_container busybox /bin/sh 6c4afa29df7ef226da7f1f0d394a356d53b92e3b20fa6c4632e7197ba393612c [root@localhost ~]# docker exec test_dvc_1 ls /data_volume1/ test1 [root@localhost ~]# docker exec test_dvc_1 ls /data_volume2/ test2 使用这个新容器对挂载的目录进行更改\n[root@localhost ~]# docker exec test_dvc touch /data_volume1/test2 [root@localhost ~]# docker exec test_dvc ls /data_volume1/ test1 test2 再创建一个新容器验证上一个容器对挂载目录的更改是否生效\n[root@localhost ~]# docker run -itd --name test_dvc_2 --volumes-from data_volume_container busybox /bin/sh 276c24ecd6ee62f35abf24855ffc5416b9abe987c1bb693ec57bf27d241383d2 [root@localhost ~]# docker exec test_dvc_2 ls /data_volume1 test1 test2 [root@localhost ~]# docker inspect --format=\u0026#34;{{.Mounts}}\u0026#34; test_dvc_1 [{volume 1aca4270e7c9ba34b3978638a6bf9e8259c294508207e89b3b9cbb529f4dd4be /var/lib/docker/volumes/1aca4270e7c9ba34b3978638a6bf9e8259c294508207e89b3b9cbb529f4dd4be/_data /data_volume1 local true } {volume d6ebda8735e2c76857d199bd1b96d11c9802d39557d2028bac60f0ec42efc764 /var/lib/docker/volumes/d6ebda8735e2c76857d199bd1b96d11c9802d39557d2028bac60f0ec42efc764/_data /data_volume2 local true }] [root@localhost ~]# docker inspect --format=\u0026#34;{{.Mounts}}\u0026#34; test_dvc_2 [{volume d6ebda8735e2c76857d199bd1b96d11c9802d39557d2028bac60f0ec42efc764 /var/lib/docker/volumes/d6ebda8735e2c76857d199bd1b96d11c9802d39557d2028bac60f0ec42efc764/_data /data_volume2 local true } {volume 1aca4270e7c9ba34b3978638a6bf9e8259c294508207e89b3b9cbb529f4dd4be /var/lib/docker/volumes/1aca4270e7c9ba34b3978638a6bf9e8259c294508207e89b3b9cbb529f4dd4be/_data /data_volume1 local true }] [root@localhost ~]# docker inspect test_dvc_1 [root@localhost ~]# docker inspect test_dvc_2 删除数据卷容器 删除数据卷容器后，已经挂载了这个数据卷容器的容器不受任何影响 数据卷容器只传递链接信息，挂载的数据并不需要通过数据卷容器来进行传输\n数据卷的备份和还原 数据备份 备份这个数据卷容器挂载的所有目录\ndocker run --volumes-from [container] -v $(pwd):/backup [image] tar cvf /backup/backup.tar [container data volume] -v $(pwd):/backup：挂载一个数据卷用于存放备份文件 tar命令：将数据卷容器挂载的目录进行压缩，备份到/backup目录 数据还原 docker run --volumes-from [container] -v $(pwd):/backup [image] tar xvf /backup/backup.tar [container data volume] ","permalink":"https://www.lvbibir.cn/posts/tech/docker-data-volume/","summary":"什么是数据卷 docker的理念之一就是将应用与其运行的环境打包。通常docker容器的生命周期都是与在容器中运行的程序相一致的，我们对于数据的要求就是持久化；另一方面docker容器之间也需要一个共享文件的渠道。 数据卷是经过特殊设计的目录，可以绕过联合文件系统（UFS），为一个或","title":"docker | 数据卷（data volume）"},{"content":"docker简介 Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在GitHub (https://github.com/docker/docker) 上进行维护。 Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容（LXC）等技术。 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。 下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。\n为什么要使用docker 作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。 首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的 利用率很高，一台主机上可以同时运行数千个 Docker 容器。 容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚 拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。 具体说来，Docker 在如下几个方面具有较大的优势。\n更快速的交付和部署 对开发和运维（devop）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。 开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码。 Docker 可以快速创建容器，快速迭代应用程序，并让整个过程全程可见，使团队中的其他成员更容易理解应用程序是如何创建和工作的。 Docker 容器很轻很快！容器的启动时间是秒级的，大量地节约开发、测试、部署的时间。 更高效的虚拟化 Docker 容器的运行不需要额外的 hypervisor 支持，它是内核级的虚拟化，因此可以实现更高的性能和效率。 更轻松的迁移和扩展 Docker 容器几乎可以在任意的平台上运行，包括物理机、虚拟机、公有云、私有云、个人电脑、服务器等。 这种兼容性可以让用户把一个应用程序从一个平台直接迁移到另外一个。 更简单的管理 使用 Docker，只需要小小的修改，就可以替代以往大量的更新工作。所有的修改都以增量的方式被分发和更新，从而实现自动化并且高效的管理。 对比传统虚拟机 docker的应用场景 简化配置 一次构建，多处运行 提升开发效率 应用隔离 多租户环境 为每个容器启用多个不同的容器 快速的部署 代码流水线管理 代码调试 docker镜像 docker镜像是一套使用联合加载技术实现的层叠的只读文件系统，包含基础镜像和附加镜像层\n为什么docker镜像很小 Linux操作系统分别由两部分组成 1.内核空间(kernel) 2.用户空间(rootfs) 内核空间是kernel,Linux刚启动时会加载bootfs文件系统，之后bootf会被卸载掉， 用户空间的文件系统是rootfs,包含常见的目录，如/dev、/proc、/bin、/etc等等 不同的Linux发行版本(红帽，centos，ubuntu等)主要的区别是rootfs, 多个Linux发行版本的kernel差别不大。 每个不同linux发行版的docker镜像只包含对应的rootfs，所以比完整的系统镜像要小得多\ndocker镜像的存储位置 /var/lib/docker(可以使用docker info来进行查看) 写时复制（copy on write） 当一个新容器启动时，读写层是没有任何数据的，当用户需要读取一些文件时，可以直接从只读层进行读取，只有当用户要修改只读层一些文件时，docker才会将该文件从只读层复制出来放在读写层供使用者修改，只读层中的文件是没有改变的\n仓库（repository）与仓库注册服务器（registry） Repository：本身是一个仓库，这个仓库里面可以放具体的镜像，是指具体的某个镜像的仓库，比如Tomcat下面有很多个版本的镜像，它们共同组成了Tomcat的Repository。\nRegistry：镜像的仓库，比如官方的是Docker Hub，它是开源的，也可以自己部署一个，Registry上有很多的Repository，Redis、Tomcat、MySQL等等Repository组成了Registry。\ndocker的C/S模式 用户在Docker Client中运行Docker的各种命令，这些命令会传送给在docker宿主机上运行的docker守护进程，docker的守护进程来实现docker的各种功能 启动docker服务后，docker的守护进程会一直在后台运行\nRemote API docker命令行接口是docker最常用的与守护进程进行通信的接口，docker的二进制命令文件（例如docker run）此时就是docker的Client，docker也提供了其他的接口：Remote API 用户可以通过编写程序调用Remote API，与docker守护进程进行通信，将自己的程序与docker进行集成\nRESTful风格的API：与大多数程序的API风格类似 STDIN、STDOUT、STDERR：Remote API在某些复杂的情况下，也支持这三种方式来与docker守护进程进行通信 如图就是使用自定义程序调用Remote API与docker守护进程通信的C/S模式 Client与守护进程的连接方式 unix:///var/run/docker.sock是默认的连接方式，可以通过配置修改为其他的socket连接方式\nunix:///var/run/docker.sock tcp://host:port fd://socketfd 用户可以通过dokcer的二进制命令接口或者自定义程序，自定义程序通过Remote API来调用docker守护进程，Client与Server之间通过Socket来进行连接，这种连接意味着Client与Server既可以在同一台机器上运行，也可以在不同机器上运行，Client可以通过远程的方式来连接Server ","permalink":"https://www.lvbibir.cn/posts/tech/docker-jian-jie/","summary":"docker简介 Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在GitHub (https://github.com/docker/docker) 上进行维护。 Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其RHEL","title":"docker | 简介以及基础概念"},{"content":"概述 独立容器网络：none host none网络最为安全，只有localback接口 host网络只和物理机相连，保证跟物理机相连的网络效率\t跟物理机完全一样（网络协议栈与主机名）\n容器间的网络：bridge docker bridge详解 docker启动时默认会有一个docker0网桥，该网桥就是桥接模式的体现 用户也可以自建bridge网络，建立后dokcer也会创建一个网桥\n跨主机的容器间的网络：macvlan overlay\n第三方网络：flannel weave calic\ndocker0 安装了docker的系统，使用ifconfig可以查看到docker0设备，docker守护进程就是通过docker0为容器提供网络连接的各种服务 docker0实际上是linux虚拟网桥（交换机) 网桥是数据链路层的设备，它通过mac地址来对网络进行划分，并且在不同的网络之间传递数据\nlinux虚拟网桥的特点：\n可以设置ip地址（二层的网桥可以设置三层的ip地址） 相当于拥有一个隐藏的虚拟网卡 docker0的地址划分：\nIP：172.17.0.1（各版本可能不同） 子网掩码：255.255.0.0 MAC：02:42:00:00:00:00 到 02:42:ff:ff:ff:ff（各版本可能不同） 总共提供了65534个地址 每当一个容器启动时，docker守护进程会创建网络连接的两端，一端在容器内创建eth0网卡，另一端在dokcer0网桥中开启一个端口veth*\n查看网桥设备需要预先安装bridge-utils软件包\n[root@localhost ~]# yum install -y bridge-utils [root@localhost ~]# brctl show bridge name bridge id STP enabled interfaces docker0 8000.024247d799bf no virbr0 8000.525400b76fd4 yes virbr0-nic 开启一个容器，查看网络设置：\n[root@localhost ~]# docker run -it --name nwt1 centos /bin/bash [root@0ef32e882bcf /]# ifconfig bash: ifconfig: command not found [root@0ef32e882bcf /]# yum install -y net-tools [root@0ef32e882bcf /]# ifconfig ctrl+p，ctrl+q 让这个人继续后台运行 再查看一下网桥\n[root@localhost ~]# brctl show [root@localhost ~]# ifconfig 自定义docker0 当默认docker0的ip或者网段与主机环境发生冲突时，可以修改docker0的地址和网段来进行自定义\nifconfig docker0 IP netmask NETMASK [root@localhost ~]# ifconfig docker0 192.168.200.1 netmask 255.255.255.0 [root@localhost ~]# ifconfig [root@localhost ~]# systemctl restart docker [root@localhost ~]# docker run -it centos /bin/bash [root@a5c6ebf79340 /]# yum install -y net-tools [root@a5c6ebf79340 /]# ifconfig 自定义虚拟网桥 添加虚拟网桥：\nbrctl addbr br0 ifconfig br0 IP netmask NETMASK 更改docker守护进程的启动配置\n/lib/systemd/system/docker.service中添加-b=br0 [root@localhost ~]# brctl addbr br0 [root@localhost ~]# ifconfig br0 192.168.100.1 netmask 255.255.255.0 [root@localhost ~]# ifconfig [root@localhost ~]# vim /lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd -b=br0 [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker [root@localhost ~]# ps -ef | grep docker root 4156 1 1 14:06 ? 00:00:00 /usr/bin/dockerd -b=br0 root 4161 4156 0 14:06 ? 00:00:00 docker-containerd --config /var/run/docker/containerd/containerd.toml root 4263 1558 0 14:06 pts/0 00:00:00 grep --color=auto docker 开启一个容器\n[root@localhost ~]# docker run -it --name nwt3 centos /bin/bash [root@d70269c9557e /]# yum install -y net-tools [root@d70269c9557e /]# ifconfig 同一宿主机间容器的连接 允许单台主机内所有容器互联（默认情况） 拒绝容器间连接 允许特定容器间的连接 允许单台主机内所有容器互联（默认情况） \u0026ndash;icc=true 默认为true，即允许同一宿主机下所有容器之间网络连通\n[root@localhost ~]# docker run -itd --name test1 busybox /bin/sh 7ec641b21b66b6472f4e92cfaa7f9c0674c4322a5265a05e272ae180b0d4687c [root@localhost ~]# docker exec test1 ifconfig eth0 eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:02 inet addr:172.17.0.2 Bcast:172.17.255.255 Mask:255.255.0.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:648 (648.0 B) TX bytes:0 (0.0 B) [root@localhost ~]# docker run -itd --name test2 busybox /bin/sh fee0ff3e7f82cd1fa06eea11d850251931dff4dff2f0c7ee3e5a9904532beeb6 [root@localhost ~]# docker exec test2 ping 172.17.0.2 -c 4 PING 172.17.0.2 (172.17.0.2): 56 data bytes 64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.133 ms 64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.136 ms 64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.264 ms 64 bytes from 172.17.0.2: seq=3 ttl=64 time=0.163 ms --- 172.17.0.2 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.133/0.174/0.264 ms 容器的ip是不可靠的连接 可以使用\u0026ndash;link选项来连接两个容器\ndocker run --link=[CONTAINER_NAME]:[ALIAS] [IMAGE] [COMMAND] \u0026ndash;link后面的test3指连接到test3容器，nt是为test3创建了一个别名 新建两个容器进行测试\n[root@localhost ~]# docker run -itd --name test3 busybox /bin/sh 1fd4e373dba17fdf1fa93121e08ea2f1f32d8f4116339c072a72a73574b0926f [root@localhost ~]# docker run -itd --name test4 --link=test3:nt busybox /bin/sh c04b9b759bd4cc9af54000a742df58c8369a7f1bfc8862a8325481f1d61db135 [root@localhost ~]# [root@localhost ~]# docker exec test4 ping nt -c 4 PING nt (172.17.0.4): 56 data bytes 64 bytes from 172.17.0.4: seq=0 ttl=64 time=0.256 ms 64 bytes from 172.17.0.4: seq=1 ttl=64 time=0.196 ms 64 bytes from 172.17.0.4: seq=2 ttl=64 time=0.164 ms 64 bytes from 172.17.0.4: seq=3 ttl=64 time=0.148 ms --- nt ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.148/0.191/0.256 ms \u0026ndash;link选项对容器做了如下改变：\n修改了env环境变量 修改了hosts文件 [root@localhost ~]# docker exec test4 env [root@localhost ~]# docker exec test4 cat /etc/hosts 删除之前使用的test1与test2容器，这两个容器占用的ip释放，重启test3后，使用最新的ip地址\n[root@localhost ~]# docker rm -f test1 test1 [root@localhost ~]# docker rm -f test2 test2 [root@localhost ~]# docker restart test3 test3 [root@localhost ~]# docker exec test3 ifconfig eth0 eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:02 inet addr:172.17.0.2 Bcast:172.17.255.255 Mask:255.255.0.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:648 (648.0 B) TX bytes:0 (0.0 B) 可以看到随着test3的ip地址发生改变，test4容器中的hosts文件也随之改变\n[root@localhost ~]# docker exec test4 cat /etc/hosts 拒绝容器间连接 修改守护进程的启动选项：\u0026ndash;icc=false\n[root@localhost ~]# vim /lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd --icc=false [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker 新建两个容器进行测试，可以看到无法ping通\n[root@localhost ~]# docker run -itd --name test10 busybox /bin/sh 700f026459206531b0fda811a43bc12af2f0815dc695f317a1f52939bfada2a1 [root@localhost ~]# docker run -itd --name test11 busybox /bin/sh 792cc31481739e1b2537597bc54c76737333bf95412dac2209e050f35d276dd4 [root@localhost ~]# docker exec test10 ifconfig eth0 eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:06 inet addr:172.17.0.6 Bcast:172.17.255.255 Mask:255.255.0.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:8 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:648 (648.0 B) TX bytes:0 (0.0 B) [root@localhost ~]# docker exec test11 ping 172.16.0.6 ^C 允许特定容器间的连接 修改守护进程选项：\n\u0026ndash;icc=false \u0026ndash;iptables=true\t#允许docker容器配置添加到linux的iptables设置中 \u0026ndash;link 只有设置了\u0026ndash;link的两个容器间才可以互通\n[root@localhost ~]# vim /lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd --icc=false --iptables=true [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker 新建两个容器进行验证\n[root@localhost ~]# docker run -itd --name test21 busybox /bin/sh 77f56db227acaa590f729c12a4852d3131f1729851ea8c613a670effbfa512ad [root@localhost ~]# docker run -itd --name test22 --link=test21:nt busybox /bin/sh f4e346387588198cafcfd1d6a2c330a20375b746d05c08bf06e100f9af294a9e [root@localhost ~]# docker exec test22 ping nt -c 4 PING nt (172.17.0.2): 56 data bytes 64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.201 ms 64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.164 ms 64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.195 ms 64 bytes from 172.17.0.2: seq=3 ttl=64 time=0.188 ms --- nt ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.164/0.187/0.201 ms [root@localhost ~]# docker exec test22 ifconfig eth0 eth0 Link encap:Ethernet HWaddr 02:42:AC:11:00:03 inet addr:172.17.0.3 Bcast:172.17.255.255 Mask:255.255.0.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:14 errors:0 dropped:0 overruns:0 frame:0 TX packets:6 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:1124 (1.0 KiB) TX bytes:476 (476.0 B) [root@localhost ~]# docker exec test21 ping 172.17.0.3 -c 4 PING 172.17.0.3 (172.17.0.3): 56 data bytes 64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.181 ms 64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.168 ms 64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.109 ms 64 bytes from 172.17.0.3: seq=3 ttl=64 time=0.226 ms --- 172.17.0.3 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.109/0.171/0.226 ms ","permalink":"https://www.lvbibir.cn/posts/tech/docker-network/","summary":"概述 独立容器网络：none host none网络最为安全，只有localback接口 host网络只和物理机相连，保证跟物理机相连的网络效率 跟物理机完全一样（网络协议栈与主机名） 容器间的网络：bridge docker bridge详解 docker启动时默认会有一个docker0网桥，该网桥就是桥接模式","title":"docker | 网络简介"},{"content":"环境准备 主机版本为Centos7.4，docker版本为docker-ce-18.09.7-3.el7.x86_64 node1：192.168.0.111 node2：192.168.0.107\n两台安装docker的环境 保证两台主机上的docker的Client API与Server APi版本一致 修改daemon.json配置文件，添加label，用于区别两台docker主机 node1：\n[root@localhost ~]# vim /etc/docker/daemon.json { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;http://f1361db2.m.daocloud.io\u0026#34;], \u0026#34;labels\u0026#34;: [\u0026#34;-label nodeName=node1\u0026#34;] #添加label } 查看效果\n[root@localhost ~]# systemctl restart docker [root@localhost ~]# docker info node2; 修改Client与守护进程通信的方式（修改为tcp的方式） 修改通信方式共有三种方式：\n修改daemon.json文件，添加host键值对 添加：\u0026ldquo;hosts\u0026rdquo;: [\u0026ldquo;tcp://0.0.0.0:2375\u0026rdquo;] 开放本机ip的2375端口，可以让其他docker主机的client进行连接 修改/lib/systemd/system/docker.service文件，添加-H启动参数 修改：ExecStart=/usr/bin/docker -H tcp://0.0.0.0:2375 使用dokcerd启动docker，添加-H参数 dockerd -H tcp://0.0.0.0:2375 Centos7中/etc/docker/daemon.json会被docker.service的配置文件覆盖，直接添加daemon.json不起作用 所以我使用的是第二种方式\nnode1：\n[root@localhost ~]# vim /lib/systemd/system/docker.service ExecStart=/usr/bin/docker -H tcp://0.0.0.0:2375 [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker [root@localhost ~]# ps -ef | grep docker root 5775 1 3 23:17 ? 00:00:00 /usr/bin/dockerd -H tcp://0.0.0.0:2375 root 5779 5775 0 23:17 ? 00:00:00 docker-containerd --config /var/run/docker/containerd/containerd.toml root 5879 3919 0 23:17 pts/1 00:00:00 grep --color=auto docker 远程访问 node2：\n[root@localhost ~]# curl http://192.168.0.111:2375/info [root@localhost ~]# docker -H tcp://192.168.0.111:2375 info 如果频繁使用-H选项未免太过于麻烦，可以修改DOCKER_HOST这个环境变量的值，node2就可以像使用本地的docker一样来远程连接node1的守护进程\n[root@localhost ~]# export DOCKER_HOST=\u0026#34;tcp://192.168.0.111:2375\u0026#34; [root@localhost ~]# docker info 当无需再远程连接node1的守护进程时，将DOCKER_HOST环境变量置空即可\n[root@localhost ~]# export DOCKER_HOST=\u0026#34;\u0026#34; [root@localhost ~]# docker info node1： 因为node1设置了修改Client与守护进程的通信方式，所以本地无法再通过默认的socket进行连接，必须使用-H选项通过tcp来进行连接，也可以通过DOCKER_HOST来修改\n[root@localhost ~]# docker info Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? [root@localhost ~]# docker -H 0.0.0.0:2375 info 如果本机依旧希望使用默认的socket进行连接，可以在/lib/systemd/system/docker.service中再添加一个-H选项\n[root@localhost ~]# vim /lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock [root@localhost ~]# systemctl daemon-reload [root@localhost ~]# systemctl restart docker [root@localhost ~]# ps -ef | grep docker root 6462 1 2 23:40 ? 00:00:00 /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock root 6467 6462 0 23:40 ? 00:00:00 docker-containerd --config /var/run/docker/containerd/containerd.toml root 6567 3919 0 23:40 pts/1 00:00:00 grep --color=auto docker [root@localhost ~]# docker info ","permalink":"https://www.lvbibir.cn/posts/tech/docker-yuan-cheng-fang-wen/","summary":"环境准备 主机版本为Centos7.4，docker版本为docker-ce-18.09.7-3.el7.x86_64 node1：192.168.0.111 node2：192.168.0.107 两台安装docker的环境 保证两台主机上的docker的Client API与Server","title":"docker | 跨主机访问"},{"content":"LVM基本特性：（可以通过插件CLVM，实现群集逻辑卷管理） PV物理卷\nLV逻辑卷（逻辑卷管理：会在物理存储上生成抽象层，以便创建逻辑存储卷，方便设备命名）（下面是逻辑卷的分类） Linear\t线性卷(这是默认的lvm形式，即按顺序占用磁盘，一块写完了再写另一块) Stripe\t条带逻辑卷 RAID\traid逻辑卷 Mirror\t镜像卷 Thinly-Provision\t精简配置逻辑卷 Snapshot\t快照卷 Thinly-Provisioned Snapshot\t精简配置快照卷 Cache\t缓存卷\n创建PV时（一同被创建的有） 1：接近设备起始处，放置一个标签，包括uuid，元数据的位置　#(这个标签每个磁盘默认都保持一份) 2：lvm元数据，包含lvm卷组的配置详情 3：剩余空间，用于存储数据\nlvm逻辑卷概念 及　创建lvm的步骤 LVM的组成 PE：（物理拓展，是VG卷组的基本组成单位） PV：（物理卷） VG：（卷组） LV：（逻辑卷） 创建lvm的步骤 1：将磁盘创建为PV（物理卷），其实物理磁盘被条带化为PV，划成了一个一个的PE，默认每个PE大小是4MB 2：创建VG（卷组），其实它是一个空间池，不同PV加入同一VG 3：创建LV（逻辑卷），组成LV的PE可能来自不同的物理磁盘 4：格式化LV，挂载使用 lvm相关命令工具 pv操作命令 pvchange\t更改物理卷的属性 pvck\t检查物理卷元数据 pvcreate\t初始化磁盘或分区以供lvm使用 pvdisplay\t显示物理卷的属性 pvmove\t移动物理Exent pvremove\t删除物理卷 pvresize\t调整lvm2使用的磁盘或分区的大小 pvs\t报告有关物理卷的信息 pvscan\t扫描物理卷的所有磁盘 vg操作命令 vgcfgbackup\t备份卷组描述符区域 vgcfgrestore\t恢复卷组描述符区域 vgchange\t更改卷组的属性 vgck\t检查卷组元数据 vgconvert\t转换卷组元数据格式 vgcreate\t创建卷组 vgdisplay\t显示卷组的属性 vgexport\t使卷组对系统不了解（这是个什么） vgextend\t将物理卷添加到卷组 vgimportclone\t导入并重命名重复的卷组（例如硬件快照） vgmerge\t合并两个卷组 vgmknodes\t重新创建卷组目录和逻辑卷特殊文件 vgreduce\t通过删除一个或多个物理卷来减少卷组（将物理卷踢出VG） vgremove\t删除卷组 vgrename\t重命名卷组 vgs\t报告有关卷组信息 vgscan\t扫描卷组的所有磁盘并重建高速缓存 vgsplit\t将卷组拆分为两个，通过移动整个物理卷将任何逻辑卷从一个卷组移动到另一个卷组 lv操作命令 lvchange\t更改逻辑卷属性 lvconvert\t将逻辑卷从线性转换为镜像或快照 lvcreate\t将现有卷组中创建逻辑卷 lvdisplay\t显示逻辑卷的属性 lvextend\t扩展逻辑卷的大小 lvmconfig\t在加载lvm.conf和任何其他配置文件后显示配置信息 lvmdiskscan\t扫描lvm2可见的所有设备 lvmdump\t创建lvm2信息转储以用于诊断目的 lvreduce\t减少逻辑卷的大小 lvremove\t删除逻辑卷 lvrename\t重命名逻辑卷 lvresize\t调整逻辑卷大小 lvs\t报告有关逻辑卷的信息 lvscan\t扫描所有的逻辑卷 PV管理 制作PV pvcreate /dev/sdb1\n删除pv撤销PV（需先踢出vg） pvremove /dev/sdb1\nVG管理 制作VG vgcreate datavg /dev/sdb1 vgcreate datavg /dev/sdb1 /dev/sdb2 #解释：vgcreate vg名 分区\nvgcreate -s 16M datavg2 /dev/sdb3 #解释：-s 指定pe的大小为16M，默认不指定是4M\n从卷组中移除缺失的磁盘 vgreduce \u0026ndash;removemissing datavg vgreduce \u0026ndash;removemissing datavg \u0026ndash;force\t#强制移除\n扩展VG空间 vgextend datavg /dev/sdb3 pvs\n踢出vg中的某个成员 vgreduce datavg /dev/sdb3 vgs\nLV管理 制作LV lvcreate -n lvdata1 -L 1.5G datavg #解释：-n lv的name，-L 指定lv的大小，datavg 是vg的名字，表示从那个vg\n激活修复后的逻辑卷 lvchange -ay /dev/datavg/lvdata1 lvchange -ay /dev/datavg/lvdata1 -K\t#强制激活\nLVM的快照 用途：注意用途是数据一致性备份，先做一个快照，冻结当前系统，这样快照里面的内容可暂时保持不变，系统本身继续运行，通过重新挂载备份快照卷，实现不中断服务备份。\nlvcreate -s -n kuaizhao01 -L 100M /dev/datavg/lvdata1\n查看，删除使用方法 1：查看物理卷信息 pvs,pvdisplay\n2：查看卷组信息 vgs,vgdisplay\n3：查看逻辑卷信息 lvs,lvdisplay\n4：删除LV lvremove /dev/mapper/VG-mylv\n5：删除VG vgremove VG\n6：删除PV（注意删除顺序是LV，VG，PV） pvremove /dev/sdb\nvg卷组改名 vgrename xxxx-vgid-xxxx-xxxx xinname 细述LVM基本特性及日常管理细述LVM基本特性及日常管理\n拉伸一个逻辑卷LV 1:用vgdisplay查看vg还有多少空余空间 2:扩充逻辑卷 lvextend -L +1G /dev/VG/LV01 lvextend -L +1G /dev/VG/LV01 -r #这个命令表示在扩展的同时也更新文件系统，但是不是所有的发行版本都支持，部分文件系统不支持在线扩展的除外 3:进行扩充操作后，df -h你会发现大小并没有变 4:更新文件系统（争对不同的文件系统，其更新的命令也不一样） e2fsck -f /dev/datavg/lvdata1\t#ext4文件系统，检查lv的文件系统 resize2fs /dev/VG/LV01\t#ext4文件系统命令，该命令后面接lv的设备名就行\nxfs_growfs /nas\t#xfs文件系统，该命令后面直接跟的是挂载点 当更新文件系统后，你就会发现，df -h正常了\n缩小逻辑卷LV（必须离线，umount） 1：卸载\n2：缩小文件系统 resize2fs /dev/VG/LV01 2G\n3：缩小LV lvreduce -L -1G /dev/VG/LV01\n4：查看lvs，挂载使用\n拉伸一个卷组VG 1:新插入一块硬盘，若不是热插拔的磁盘，可以试试这个在系统上强制刷新硬盘接口 for i in /sys/class/scsi_host/*; do echo \u0026ldquo;- - -\u0026rdquo; \u0026gt; $i/scan; done\n2:将/dev/sdd条带化，格式化为PE pvcreate /dev/sdd\n3:将一块新的PV加入到现有的VG中 vgextend VG /dev/sdd\n4:查看大小 vgs\n缩小卷组VG（注意不要有PE在占用） 1：将一个PV从指定卷中移除 vgreduce VG /dev/sdd\n2：查看缩小后的卷组大小\n将磁盘加入和踢出VG 将sdd1踢出datavg组里 vgreduce datavg /dev/sdd1\n将sdb1加入datavg组里 vgextend datavg /dev/sdb1\nlvm灾难恢复场景案例 场景再现： 三块盘做lvm,现在有一块物理坏了，将剩下两块放到其他linux服务器上\n恢复步骤 第一，查看磁盘信息，lvm信息，确认能查到lvm相关信息，找到VG组的名字（pvs,lvs,vgs,fidsk,blkid） 第二：删除lvm信息中损坏的磁盘角色，（强制提出故障磁盘）\u0026ldquo;vgreduce \u0026ndash;removemissing VG_name \u0026quot; 第三：强制激活VG组 \u0026ldquo;vgchange -ay\u0026rdquo; 第四：强制激活LVM \u0026ldquo;lvchange -ay /dev/VG_name\u0026rdquo; 第五：挂载\n","permalink":"https://www.lvbibir.cn/posts/tech/lvm-characteristic-management/","summary":"LVM基本特性：（可以通过插件CLVM，实现群集逻辑卷管理） PV物理卷 LV逻辑卷（逻辑卷管理：会在物理存储上生成抽象层，以便创建逻辑存储卷，方便设备命名）（下面是逻辑卷的分类） Linear 线性卷(这是默认的lvm形式，即按顺序占用磁盘，一块写完了再写另一块) Stripe 条带逻辑卷 RAID raid逻辑卷 Mirror 镜","title":"lvm基本特性及日常管理"},{"content":"前言 查看硬件信息，并将信息整合成json数值，然后传给前段进行分析，最后再进行相应的处理。在装系统的时候，或是进行监控时，都是一个标准的自动化运维流程。使用shell直接生成好json数据再进行传输，会变得非常方便。\n环境 [root@sys-idc-pxe01 ~]# yum install jq lsscsi MegaCli 脚本内容 #!/bin/sh #description: get server hardware info #author: lvbibir #date: 20180122 #需要安装jq工具 yum install jq #用于存放该服务器的所有信息，个人喜欢把全局变量写到外面 #写到函数里面，没有加local的变量也是全局变量 INFO=\u0026#34;{}\u0026#34; #定义一个工具函数，用于生成json数值，后面将会频繁用到 function create_json() { #utility function local key=$1 local value=\u0026#34;$2\u0026#34; local json=\u0026#34;\u0026#34; #if value is string if [ -z \u0026#34;$(echo \u0026#34;$value\u0026#34; |egrep \u0026#34;\\[|\\]|\\{|\\}\u0026#34;)\u0026#34; ] then json=$(jq -n {\u0026#34;$key\u0026#34;:\u0026#34;\\\u0026#34;$value\\\u0026#34;\u0026#34;}) #if value is json, object elif [ \u0026#34;$(echo \u0026#34;$value\u0026#34; |jq -r type)\u0026#34; == \u0026#34;object\u0026#34; ] then json=$(jq -n {\u0026#34;$key\u0026#34;:\u0026#34;$value\u0026#34;}) #if value is array elif [ \u0026#34;$(echo \u0026#34;$value\u0026#34; |jq -r type)\u0026#34; == \u0026#34;array\u0026#34; ] then json=$(jq -n \u0026#34;{$key:$value}\u0026#34;) else echo \u0026#34;value type error...\u0026#34; exit 1 return 0 fi echo $json return 0 } #获取CPU信息 function get_cpu() { #获取cpu信息，去掉空格和制表符和空行，以便于for循环 local cpu_model_1=$(dmidecode -s processor-version |grep \u0026#39;@\u0026#39; |tr -d \u0026#34; \u0026#34; |tr -s \u0026#34;\\n\u0026#34; |tr -d \u0026#34;\\t\u0026#34;) local cpu_info=\u0026#34;{}\u0026#34; local i=0 #因为去掉了空格和制表符，以下默认使用换行符分隔 for line in $(echo \u0026#34;$cpu_model_1\u0026#34;) do local cpu_model=\u0026#34;$line\u0026#34; local cpu1=$(create_json \u0026#34;cpu_model\u0026#34; \u0026#34;$cpu_model\u0026#34;) #获取每块cpu的信息，这里只记录了型号 local cpu=$(create_json \u0026#34;cpu_$i\u0026#34; \u0026#34;$cpu1\u0026#34;) local cpu_info=$(jq -n \u0026#34;$cpu_info + $cpu\u0026#34;) i=$[ $i + 1] done #将cpu的信息整合成一个json，key是cpu local info=$(create_json \u0026#34;cpu\u0026#34; \u0026#34;$cpu_info\u0026#34;) #将信息加入到全局变量中 INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_mem() { #generate json {Locator:{sn:sn,size:size}} local mem_info=\u0026#34;{}\u0026#34; #获取每个内存的信息，包括Size:|Locator:|Serial Number: local mem_info_1=$(dmidecode -t memory |egrep \u0026#39;Size:|Locator:|Serial Number:\u0026#39; |grep -v \u0026#39;Bank Locator:\u0026#39; |awk \u0026#39; { if (NR%3==1 \u0026amp;\u0026amp; $NF==\u0026#34;MB\u0026#34;) { size=$2; getline (NR+1); locator=$2; getline (NR+2); sn=$NF; printf(\u0026#34;%s,%s,%s\\n\u0026#34;,locator,size,sn) } }\u0026#39;) #根据上面的信息，将信息过滤并整合成json local i=0 for line in $(echo \u0026#34;$mem_info_1\u0026#34;) do local locator=$(echo $line |awk -F , \u0026#39;{print $1}\u0026#39;) local sn=$(echo $line |awk -F , \u0026#39;{print $3}\u0026#39;) local size=$(echo $line |awk -F , \u0026#39;{print $2}\u0026#39;) local mem1=$(create_json \u0026#34;locator\u0026#34; \u0026#34;$locator\u0026#34;) local mem2=$(create_json \u0026#34;sn\u0026#34; \u0026#34;$sn\u0026#34;) local mem3=$(create_json \u0026#34;size\u0026#34; \u0026#34;$size\u0026#34;) local mem4=$(jq -n \u0026#34;$mem1 + $mem2 + $mem3\u0026#34;) #每条内存的信息，key是内存从0开始的序号 local mem=$(create_json \u0026#34;mem_$i\u0026#34; \u0026#34;$mem4\u0026#34;) #将这些内存的信息组合到一个json中 mem_info=$(jq -n \u0026#34;$mem_info + $mem\u0026#34;) i=$[ $i + 1 ] done #给这些内存的信息设置key，mem local info=$(create_json \u0026#34;mem\u0026#34; \u0026#34;$mem_info\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_megacli_disk() { #设置megacli工具的路径，此条可以根据情况更改 local raid_tool=\u0026#34;/opt/MegaRAID/MegaCli/MegaCli64\u0026#34; #将硬盘信息获取，保存下来，省去每次都执行的操作 $raid_tool pdlist aall \u0026gt;/tmp/megacli_pdlist.txt local disk_info=\u0026#34;{}\u0026#34; #获取硬盘的必要信息 local disk_info_1=$(cat /tmp/megacli_pdlist.txt |egrep \u0026#39;Enclosure Device ID:|Slot Number:|PD Type:|Raw Size:|Inquiry Data:|Media Type:\u0026#39;|awk \u0026#39; { if(NR%6==1 \u0026amp;\u0026amp; $1$2==\u0026#34;EnclosureDevice\u0026#34;) { E=$NF; getline (NR+1); S=$NF; getline (NR+2); pdtype=$NF; getline (NR+3); size=$3$4; getline (NR+4); sn=$3$4$5$6; getline (NR+5); mediatype=$3$4$5$6; printf(\u0026#34;%s,%s,%s,%s,%s,%s\\n\u0026#34;,E,S,pdtype,size,sn,mediatype) } }\u0026#39;) #将获取到的硬盘信息进行整合，生成json local i=0 for line in $(echo $disk_info_1) do #local key=$(echo $line |awk -F , \u0026#39;{printf(\u0026#34;ES%s_%s\\n\u0026#34;,$1,$2)}\u0026#39;) local E=$(echo $line |awk -F , \u0026#39;{print $1}\u0026#39;) local S=$(echo $line |awk -F , \u0026#39;{print $2}\u0026#39;) local pdtype=$(echo $line |awk -F , \u0026#39;{print $3}\u0026#39;) local size=$(echo $line |awk -F , \u0026#39;{print $4}\u0026#39;) local sn=$(echo $line |awk -F , \u0026#39;{print $5}\u0026#39;) local mediatype=$(echo $line |awk -F , \u0026#39;{print $6}\u0026#39;) local disk1=$(create_json \u0026#34;pdtype\u0026#34; \u0026#34;$pdtype\u0026#34;) local disk1_1=$(create_json \u0026#34;enclosure_id\u0026#34; \u0026#34;$E\u0026#34;) local disk1_2=$(create_json \u0026#34;slot_id\u0026#34; \u0026#34;$S\u0026#34;) local disk2=$(create_json \u0026#34;size\u0026#34; \u0026#34;$size\u0026#34;) local disk3=$(create_json \u0026#34;sn\u0026#34; \u0026#34;$sn\u0026#34;) local disk4=$(create_json \u0026#34;mediatype\u0026#34; \u0026#34;$mediatype\u0026#34;) local disk5=$(jq -n \u0026#34;$disk1 + $disk1_1 + $disk1_2 + $disk2 + $disk3 + $disk4\u0026#34;) local disk=$(create_json \u0026#34;disk_$i\u0026#34; \u0026#34;$disk5\u0026#34;) disk_info=$(jq -n \u0026#34;$disk_info + $disk\u0026#34;) i=$[ $i + 1 ] done #echo $disk_info local info=$(create_json \u0026#34;disk\u0026#34; \u0026#34;$disk_info\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_hba_disk() { #对于hba卡的硬盘，使用smartctl获取硬盘信息 local disk_tool=\u0026#34;smartctl\u0026#34; local disk_info=\u0026#34;{}\u0026#34; #lsscsi 需要使用yum install lsscsi 安装 local disk_info_1=$(lsscsi -g |grep -v \u0026#39;enclosu\u0026#39; |awk \u0026#39;{printf(\u0026#34;%s,%s,%s,%s\\n\u0026#34;,$1,$2,$(NF-1),$NF)}\u0026#39;) local i=0 for line in $(echo $disk_info_1) do local E=$(echo $line |awk -F , \u0026#39;{print $1}\u0026#39; |awk -F \u0026#39;:\u0026#39; \u0026#39;{print $1}\u0026#39; |tr -d \u0026#39;\\[|\\]\u0026#39;) local S=$(echo $line |awk -F , \u0026#39;{print $NF}\u0026#39; |egrep -o [0-9]*) local sd=$(echo $line |awk -F , \u0026#39;{print $(NF-1)}\u0026#39;) $disk_tool -i $sd \u0026gt;/tmp/disk_info.txt local pdtype=\u0026#34;SATA\u0026#34; if [ \u0026#34;$(cat /tmp/disk_info.txt |grep \u0026#39;Transport protocol:\u0026#39; |awk \u0026#39;{print $NF}\u0026#39;)\u0026#34; == \u0026#34;SAS\u0026#34; ] then local pdtype=\u0026#34;SAS\u0026#34; fi local size=$(cat /tmp/disk_info.txt |grep \u0026#39;User Capacity:\u0026#39; |awk \u0026#39;{printf(\u0026#34;%s%s\\n\u0026#34;,$(NF-1),$NF)}\u0026#39; |tr -d \u0026#39;\\[|\\]\u0026#39;) local sn=$(cat /tmp/disk_info.txt |grep \u0026#39;Serial Number:\u0026#39; |awk \u0026#39;{print $NF}\u0026#39;) local mediatype=\u0026#34;disk\u0026#34; local disk1=$(create_json \u0026#34;pdtype\u0026#34; \u0026#34;$pdtype\u0026#34;) local disk1_1=$(create_json \u0026#34;enclosure_id\u0026#34; \u0026#34;$E\u0026#34;) local disk1_2=$(create_json \u0026#34;slot_id\u0026#34; \u0026#34;$S\u0026#34;) local disk2=$(create_json \u0026#34;size\u0026#34; \u0026#34;$size\u0026#34;) local disk3=$(create_json \u0026#34;sn\u0026#34; \u0026#34;$sn\u0026#34;) local disk4=$(create_json \u0026#34;mediatype\u0026#34; \u0026#34;$mediatype\u0026#34;) local disk5=$(jq -n \u0026#34;$disk1 + $disk1_1 + $disk1_2 + $disk2 + $disk3 + $disk4\u0026#34;) local disk=$(create_json \u0026#34;disk_$i\u0026#34; \u0026#34;$disk5\u0026#34;) disk_info=$(jq -n \u0026#34;$disk_info + $disk\u0026#34;) i=$[ $i + 1 ] done #echo $disk_info local info=$(create_json \u0026#34;disk\u0026#34; \u0026#34;$disk_info\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_disk() { #根据获取到的硬盘控制器类型，来判断使用什么工具采集硬盘信息 if [ \u0026#34;$(echo \u0026#34;$INFO\u0026#34; |jq -r .disk_ctrl.disk_ctrl_0.type)\u0026#34; == \u0026#34;raid\u0026#34; ] then get_megacli_disk elif [ \u0026#34;$(echo \u0026#34;$INFO\u0026#34; |jq -r .disk_ctrl.disk_ctrl_0.type)\u0026#34; == \u0026#34;hba\u0026#34; ] then get_hba_disk else local info=$(create_json \u0026#34;disk\u0026#34; \u0026#34;error\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) fi #hp机器比较特殊，这里我没有做hp机器硬盘信息采集，有兴趣的朋友可以自行添加上 #if hp machine return 0 } function get_diskController() { local disk_ctrl=\u0026#34;{}\u0026#34; #if LSI Controller local disk_ctrl_1=\u0026#34;$(lspci -nn |grep LSI)\u0026#34; local i=0 #以换行符分隔 IFS_OLD=$IFS \u0026amp;\u0026amp; IFS=$\u0026#39;\\n\u0026#39; for line in $(echo \u0026#34;$disk_ctrl_1\u0026#34;) do #echo $line local ctrl_id=$(echo \u0026#34;$line\u0026#34; |awk -F \u0026#39;]:\u0026#39; \u0026#39;{print $1}\u0026#39; |awk \u0026#39;{print $NF}\u0026#39; |tr -d \u0026#39;\\[|\\]\u0026#39;) case \u0026#34;$ctrl_id\u0026#34; in #根据控制器的id或进行判断是raid卡还是hba卡，因为品牌比较多，后续可以在此处进行扩展添加 0104) # 获取Logic以后的字符串，并进行拼接 local ctrl_name=$(echo \u0026#34;${line##*\u0026#34;Logic\u0026#34;}\u0026#34; |awk \u0026#39;{printf(\u0026#34;%s_%s_%s\\n\u0026#34;,$1,$2,$3)}\u0026#39;) local ctrl1=$(create_json \u0026#34;id\u0026#34; \u0026#34;$ctrl_id\u0026#34;) local ctrl2=$(create_json \u0026#34;type\u0026#34; \u0026#34;raid\u0026#34;) local ctrl3=$(create_json \u0026#34;name\u0026#34; \u0026#34;$ctrl_name\u0026#34;) ;; 0100|0107) local ctrl_name=$(echo \u0026#34;${line##*\u0026#34;Logic\u0026#34;}\u0026#34; |awk \u0026#39;{printf(\u0026#34;%s_%s_%s\\n\u0026#34;,$1,$3,$4)}\u0026#39;) local ctrl1=$(create_json \u0026#34;id\u0026#34; \u0026#34;$ctrl_id\u0026#34;) local ctrl2=$(create_json \u0026#34;type\u0026#34; \u0026#34;hba\u0026#34;) local ctrl3=$(create_json \u0026#34;name\u0026#34; \u0026#34;$ctrl_name\u0026#34;) ;; *) local ctrl1=$(create_json \u0026#34;id\u0026#34; \u0026#34;----\u0026#34;) local ctrl2=$(create_json \u0026#34;type\u0026#34; \u0026#34;----\u0026#34;) local ctrl3=$(create_json \u0026#34;name\u0026#34; \u0026#34;----\u0026#34;) ;; esac local ctrl_tmp=$(jq -n \u0026#34;$ctrl1 + $ctrl2 + $ctrl3\u0026#34;) local ctrl=$(create_json \u0026#34;disk_ctrl_$i\u0026#34; \u0026#34;$ctrl_tmp\u0026#34;) disk_ctrl=$(jq -n \u0026#34;$disk_ctrl + $ctrl\u0026#34;) i=$[ $i + 1 ] done IFS=$IFS_OLD local info=$(create_json \u0026#34;disk_ctrl\u0026#34; \u0026#34;$disk_ctrl\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_netcard() { local netcard_info=\u0026#34;{}\u0026#34; local netcard_info_1=\u0026#34;$(lspci -nn |grep Ether)\u0026#34; local i=0 #echo \u0026#34;$netcard_info_1\u0026#34; IFS_OLD=$IFS \u0026amp;\u0026amp; IFS=$\u0026#39;\\n\u0026#39; for line in $(echo \u0026#34;$netcard_info_1\u0026#34;) do local net_id=$(echo $line |egrep -o \u0026#39;[0-9a-z]{4}:[0-9a-z]{4}\u0026#39;) local net_id_1=$(echo $net_id |awk -F : \u0026#39;{print $1}\u0026#39;) case \u0026#34;$net_id_1\u0026#34; in 8086) local net_name=$(echo \u0026#34;${line##*\u0026#34;: \u0026#34;}\u0026#34; |awk \u0026#39;{printf(\u0026#34;%s_%s_%s_%s\\n\u0026#34;,$1,$3,$4,$5)}\u0026#39;) local type=$(echo $line |egrep -o SFP || echo \u0026#34;TP\u0026#34;) local net1=$(create_json \u0026#34;id\u0026#34; \u0026#34;$net_id\u0026#34;) local net2=$(create_json \u0026#34;name\u0026#34; \u0026#34;$net_name\u0026#34;) local net3=$(create_json \u0026#34;type\u0026#34; \u0026#34;$type\u0026#34;) ;; 14e4) local net_name=$(echo \u0026#34;${line##*\u0026#34;: \u0026#34;}\u0026#34; |awk \u0026#39;{printf(\u0026#34;%s_%s_%s_%s\\n\u0026#34;,$1,$3,$4,$5)}\u0026#39;) local type=$(echo $line |egrep -o SFP || echo \u0026#34;TP\u0026#34;) local net1=$(create_json \u0026#34;id\u0026#34; \u0026#34;$net_id\u0026#34;) local net2=$(create_json \u0026#34;name\u0026#34; \u0026#34;$net_name\u0026#34;) local net3=$(create_json \u0026#34;type\u0026#34; \u0026#34;$type\u0026#34;) ;; *) local net_name=$(echo \u0026#34;${line##*\u0026#34;: \u0026#34;}\u0026#34; |awk \u0026#39;{printf(\u0026#34;%s_%s_%s_%s\\n\u0026#34;,$1,$3,$4,$5)}\u0026#39;) local type=$(echo $line |egrep -o SFP || echo \u0026#34;TP\u0026#34;) local net1=$(create_json \u0026#34;id\u0026#34; \u0026#34;$net_id\u0026#34;) local net2=$(create_json \u0026#34;name\u0026#34; \u0026#34;$net_name\u0026#34;) local net3=$(create_json \u0026#34;type\u0026#34; \u0026#34;$type\u0026#34;) ;; esac local net1=$(jq -n \u0026#34;$net1 + $net2 + $net3\u0026#34;) #echo $net local net2=$(create_json \u0026#34;net_$i\u0026#34; \u0026#34;$net1\u0026#34;) netcard_info=$(jq -n \u0026#34;$netcard_info + $net2\u0026#34;) i=$[ $i + 1 ] done IFS=$IFS_OLD local info=$(create_json \u0026#34;net\u0026#34; \u0026#34;$netcard_info\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } function get_server() { local product=$(dmidecode -s system-product-name |grep -v \u0026#39;^#\u0026#39; |tr -d \u0026#39; \u0026#39; |head -n1) local manufacturer=$(dmidecode -s system-manufacturer |grep -v \u0026#39;^#\u0026#39; |tr -d \u0026#39; \u0026#39; |head -n1) local server1=$(create_json \u0026#34;manufacturer\u0026#34; \u0026#34;$manufacturer\u0026#34;) local server2=$(create_json \u0026#34;product\u0026#34; \u0026#34;$product\u0026#34;) local server3=$(jq -n \u0026#34;$server1 + $server2\u0026#34;) local info=$(create_json \u0026#34;basic_info\u0026#34; \u0026#34;$server3\u0026#34;) INFO=$(jq -n \u0026#34;$INFO + $info\u0026#34;) return 0 } ALL_INFO=\u0026#34;\u0026#34; function get_all() { #因为硬盘信息的获取依赖硬盘控制器的信息，所以get_diskController要放到get_disk前面 get_server get_cpu get_mem get_diskController get_disk get_netcard local sn=$(dmidecode -s system-serial-number |grep -v \u0026#39;^#\u0026#39; |tr -d \u0026#39; \u0026#39; |head -n1) ALL_INFO=$(create_json \u0026#34;$sn\u0026#34; \u0026#34;$INFO\u0026#34;) return 0 } function main() { get_all echo $ALL_INFO return 0 } #------------------------------------------------- main ","permalink":"https://www.lvbibir.cn/posts/tech/shell-get-server-hardware-information/","summary":"前言 查看硬件信息，并将信息整合成json数值，然后传给前段进行分析，最后再进行相应的处理。在装系统的时候，或是进行监控时，都是一个标准的自动化运维流程。使用shell直接生成好json数据再进行传输，会变得非常方便。 环境 [root@sys-idc-pxe01 ~]# yum install jq lsscsi MegaCli 脚本内容 #!/bin/sh #description: get server hardware info #author: lvbibir #date: 20180122 #需要安装jq工具","title":"shell | 获取服务器硬件信息（整合为json格式）"}]